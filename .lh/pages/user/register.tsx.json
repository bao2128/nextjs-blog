{
    "sourceFile": "pages/user/register.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1657879642417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1657880779279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { useForm } from \"react-hook-form\";\r\n import _ from \"lodash/fp\";\r\n import { ErrorMessage } from \"@hookform/error-message\";\r\n import Layout from '../../layout/layout';\r\n-import styles from '../../../components/register.module.css';\r\n+import styles from '../../components/register.module.css';\r\n \r\n interface IFormInput {\r\n   firstName: string;\r\n   lastName: string;\r\n"
                },
                {
                    "date": 1659489907717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,11 +104,11 @@\n }\r\n \r\n export default register\r\n \r\n-register.getLayout = function getLayout(page) {\r\n-  return (\r\n-    <Layout pageTitle={'Register'}>\r\n-      {page}\r\n-    </Layout>\r\n-  )\r\n-}\r\n+// register.getLayout = function getLayout(page) {\r\n+//   return (\r\n+//     <Layout pageTitle={'Register'}>\r\n+//       {page}\r\n+//     </Layout>\r\n+//   )\r\n+// }\r\n"
                }
            ],
            "date": 1657879642417,
            "name": "Commit-0",
            "content": "import * as React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport _ from \"lodash/fp\";\r\nimport { ErrorMessage } from \"@hookform/error-message\";\r\nimport Layout from '../../layout/layout';\r\nimport styles from '../../../components/register.module.css';\r\n\r\ninterface IFormInput {\r\n  firstName: string;\r\n  lastName: string;\r\n  age: number;\r\n  example: string;\r\n}\r\n\r\nfunction register() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    formState: { errors }\r\n  } = useForm<IFormInput>(\r\n    {\r\n      criteriaMode: \"all\"   //display multiple errors\r\n    }\r\n  );\r\n\r\n  const onSubmit = (data: IFormInput) => {\r\n    alert(JSON.stringify(data));\r\n  }; // your form submit function which will invoke after successful validation\r\n\r\n  // console.log(watch()); // you can watch individual input by pass the name of the input\r\n  // console.log(\"error\", {errors});\r\n  \r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>\r\n        <fieldset>\r\n          <legend>Register</legend>\r\n          <label className={styles.label}>First Name:</label>\r\n          <input className={styles.input}\r\n            {...register(\"firstName\", {\r\n              required: \"This field cannot be empty\",\r\n              maxLength: {\r\n                value: 20,\r\n                message: \"Maximum length 20 characters\"\r\n              },\r\n              pattern: {\r\n                value: /^[A-Za-z ]+$/i,\r\n                message: \"Alphabetical characters only\"\r\n              }\r\n            })}\r\n          />\r\n          <ErrorMessage\r\n            errors={errors}\r\n            name={\"firstName\"}\r\n            render={({ messages }) => {\r\n              console.log(\"messages\", messages);\r\n              return messages\r\n                ? _.entries(messages).map(([type, message]) => (\r\n                  <p key={type} className={styles.p}>{message}</p>\r\n                ))\r\n                : null;\r\n            }}\r\n          />\r\n\r\n          <label className={styles.label}>Last Name:</label>\r\n          <input className={styles.input}\r\n            {...register(\"lastName\", { pattern: /^[A-Za-z ]+$/i })}\r\n          />\r\n          {errors?.lastName?.type === \"pattern\" && (\r\n            <p className={styles.p}>Alphabetical characters only</p>\r\n          )}\r\n\r\n          <label className={styles.label}>Age:</label>\r\n          <input className={styles.input}\r\n            {...register(\"age\", { \r\n              min: {\r\n                value: 18,\r\n                message: \"You must be older than 18\"\r\n              },\r\n              pattern: {\r\n                value: /^[0-9]+$/,\r\n                message: \"Number only\"\r\n              },\r\n            })} \r\n          />\r\n          <ErrorMessage\r\n            errors={errors}\r\n            name={\"age\"}\r\n            render={({ messages }) => {\r\n              console.log(\"messages\", messages);\r\n              return messages\r\n                ? _.entries(messages).map(([type, message]) => (\r\n                  <p key={type} className={styles.p}>{message}</p>\r\n                ))\r\n                : null;\r\n            }}\r\n          />\r\n          <input className={styles.input} type=\"submit\" value=\"Submit\"/>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default register\r\n\r\nregister.getLayout = function getLayout(page) {\r\n  return (\r\n    <Layout pageTitle={'Register'}>\r\n      {page}\r\n    </Layout>\r\n  )\r\n}\r\n"
        }
    ]
}