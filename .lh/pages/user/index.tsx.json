{
    "sourceFile": "pages/user/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 724,
            "patches": [
                {
                    "date": 1657786110331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1657786131840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,2 @@\n \r\n+export {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1657875912732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,15 @@\n+import {useState} from 'react'\r\n \r\n\\ No newline at end of file\n-export {}\n+export default function userPage() {\r\n+    const [users, setUsers] = useState([])\r\n+\r\n+    const fetchUsers = async () => {\r\n+        const response = await fetch('/api/users')\r\n+        const data = await response.json()\r\n+    }\r\n+    return (\r\n+        <>\r\n+            <button onClick={fetchUsers}>Load user</button>\r\n+        </>\r\n+    )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1657876012503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,7 +9,16 @@\n     }\r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load user</button>\r\n+            {\r\n+                users.map(user => {\r\n+                    return (\r\n+                        <div key={user.id}>\r\n+                            {user.id} {user.fName} {user.lName} {user.age}\r\n+                        </div>\r\n+                    )\r\n+                })\r\n+            }\r\n         </>\r\n     )\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1657876264364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \r\n     const fetchUsers = async () => {\r\n         const response = await fetch('/api/users')\r\n         const data = await response.json()\r\n+        setUsers(data)\r\n     }\r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load user</button>\r\n"
                },
                {
                    "date": 1657876314791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n             {\r\n                 users.map(user => {\r\n                     return (\r\n                         <div key={user.id}>\r\n-                            {user.id} {user.fName} {user.lName} {user.age}\r\n+                            {user.id} {user.firstName} {user.lastName} {user.age}\r\n                         </div>\r\n                     )\r\n                 })\r\n             }\r\n"
                },
                {
                    "date": 1657876755366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import {useState} from 'react'\r\n+import { useState } from 'react'\r\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n@@ -9,16 +9,15 @@\n         setUsers(data)\r\n     }\r\n     return (\r\n         <>\r\n-            <button onClick={fetchUsers}>Load user</button>\r\n             {\r\n                 users.map(user => {\r\n                     return (\r\n-                        <div key={user.id}>\r\n-                            {user.id} {user.firstName} {user.lastName} {user.age}\r\n-                        </div>\r\n-                    )\r\n+                <div key={user.id}>\r\n+                    {user.id} {user.firstName} {user.lastName} {user.age}\r\n+                </div>\r\n+                )\r\n                 })\r\n             }\r\n         </>\r\n     )\r\n"
                },
                {
                    "date": 1657876869057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { useState } from 'react'\r\n+import {useState} from 'react'\r\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n@@ -9,15 +9,16 @@\n         setUsers(data)\r\n     }\r\n     return (\r\n         <>\r\n+            <button onClick={fetchUsers}>Load user</button>\r\n             {\r\n                 users.map(user => {\r\n                     return (\r\n-                <div key={user.id}>\r\n-                    {user.id} {user.firstName} {user.lastName} {user.age}\r\n-                </div>\r\n-                )\r\n+                        <div key={user.id}>\r\n+                            {user.id} {user.firstName} {user.lastName} {user.age}\r\n+                        </div>\r\n+                    )\r\n                 })\r\n             }\r\n         </>\r\n     )\r\n"
                },
                {
                    "date": 1657877511965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n import {useState} from 'react'\r\n \r\n+const [users, setUsers] = useState([])\r\n+\r\n+const fetchUsers = async () => {\r\n+    const response = await fetch('/api/users')\r\n+    const data = await response.json()\r\n+    setUsers(data)\r\n+}\r\n+\r\n export default function userPage() {\r\n-    const [users, setUsers] = useState([])\r\n-\r\n-    const fetchUsers = async () => {\r\n-        const response = await fetch('/api/users')\r\n-        const data = await response.json()\r\n-        setUsers(data)\r\n-    }\r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load user</button>\r\n             {\r\n"
                },
                {
                    "date": 1657877543358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,14 @@\n import {useState} from 'react'\r\n \r\n-const [users, setUsers] = useState([])\r\n+export default function userPage() {\r\n+    const [users, setUsers] = useState([])\r\n \r\n-const fetchUsers = async () => {\r\n-    const response = await fetch('/api/users')\r\n-    const data = await response.json()\r\n-    setUsers(data)\r\n-}\r\n-\r\n-export default function userPage() {\r\n+    const fetchUsers = async () => {\r\n+        const response = await fetch('/api/users')\r\n+        const data = await response.json()\r\n+        setUsers(data)\r\n+    }\r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load user</button>\r\n             {\r\n"
                },
                {
                    "date": 1657877942064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n     const fetchUsers = async () => {\r\n         const response = await fetch('/api/users')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n+        console.log(\"data\", data);\r\n+        \r\n     }\r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load user</button>\r\n"
                },
                {
                    "date": 1657877975032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n     const fetchUsers = async () => {\r\n         const response = await fetch('/api/users')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n+        console.clear();\r\n         console.log(\"data\", data);\r\n         \r\n     }\r\n     return (\r\n"
                },
                {
                    "date": 1657878096367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import _ from 'lodash'\r\n import {useState} from 'react'\r\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n@@ -10,8 +11,9 @@\n         console.clear();\r\n         console.log(\"data\", data);\r\n         \r\n     }\r\n+    const rows = _.cloneDeep(users) \r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load user</button>\r\n             {\r\n"
                },
                {
                    "date": 1657878183765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import _ from 'lodash'\r\n import {useState} from 'react'\r\n+import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n@@ -13,18 +14,15 @@\n         \r\n     }\r\n     const rows = _.cloneDeep(users) \r\n     return (\r\n-        <>\r\n-            <button onClick={fetchUsers}>Load user</button>\r\n-            {\r\n-                users.map(user => {\r\n-                    return (\r\n-                        <div key={user.id}>\r\n-                            {user.id} {user.firstName} {user.lastName} {user.age}\r\n-                        </div>\r\n-                    )\r\n-                })\r\n-            }\r\n-        </>\r\n+        <div style={{ height: 400, width: '100%' }}>\r\n+            <DataGrid\r\n+                rows={rows}\r\n+                columns={columns}\r\n+                pageSize={5}\r\n+                rowsPerPageOptions={[5]}\r\n+                checkboxSelection\r\n+            />\r\n+        </div>\r\n     )\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1657878295560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,13 +13,19 @@\n         console.log(\"data\", data);\r\n         \r\n     }\r\n     const rows = _.cloneDeep(users) \r\n+    const cols: GridColDef[] = [\r\n+        {field: 'id', headerName: 'ID', width: 70},\r\n+        {field: 'firstName', headerName: 'First name', width: 70},\r\n+        {field: 'lastName', headerName: 'Last name', width: 70},\r\n+\r\n+    ]\r\n     return (\r\n         <div style={{ height: 400, width: '100%' }}>\r\n             <DataGrid\r\n                 rows={rows}\r\n-                columns={columns}\r\n+                columns={cols}\r\n                 pageSize={5}\r\n                 rowsPerPageOptions={[5]}\r\n                 checkboxSelection\r\n             />\r\n"
                },
                {
                    "date": 1657878331793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,10 @@\n     }\r\n     const rows = _.cloneDeep(users) \r\n     const cols: GridColDef[] = [\r\n         {field: 'id', headerName: 'ID', width: 70},\r\n-        {field: 'firstName', headerName: 'First name', width: 70},\r\n-        {field: 'lastName', headerName: 'Last name', width: 70},\r\n+        {field: 'firstName', headerName: 'First name', width: 150},\r\n+        {field: 'lastName', headerName: 'Last name', width: 150},\r\n \r\n     ]\r\n     return (\r\n         <div style={{ height: 400, width: '100%' }}>\r\n"
                },
                {
                    "date": 1657878367249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     ]\r\n     return (\r\n         <div style={{ height: 400, width: '100%' }}>\r\n             <DataGrid\r\n-                rows={rows}\r\n+                rows={users}\r\n                 columns={cols}\r\n                 pageSize={5}\r\n                 rowsPerPageOptions={[5]}\r\n                 checkboxSelection\r\n"
                },
                {
                    "date": 1657878426915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,15 +20,18 @@\n         {field: 'lastName', headerName: 'Last name', width: 150},\r\n \r\n     ]\r\n     return (\r\n-        <div style={{ height: 400, width: '100%' }}>\r\n-            <DataGrid\r\n-                rows={users}\r\n-                columns={cols}\r\n-                pageSize={5}\r\n-                rowsPerPageOptions={[5]}\r\n-                checkboxSelection\r\n-            />\r\n-        </div>\r\n+        <>\r\n+            <button onClick={fetchUsers}>Load users</button>\r\n+            <div style={{ height: 400, width: '100%' }}>\r\n+                <DataGrid\r\n+                    rows={users}\r\n+                    columns={cols}\r\n+                    pageSize={5}\r\n+                    rowsPerPageOptions={[5]}\r\n+                    checkboxSelection\r\n+                    />\r\n+            </div>\r\n+        </>\r\n     )\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1657878784206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,16 +4,16 @@\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n-    const fetchUsers = async () => {\r\n+    const fetchUsers = async function() {\r\n         const response = await fetch('/api/users')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n         console.clear();\r\n         console.log(\"data\", data);\r\n         \r\n-    }\r\n+    }()\r\n     const rows = _.cloneDeep(users) \r\n     const cols: GridColDef[] = [\r\n         {field: 'id', headerName: 'ID', width: 70},\r\n         {field: 'firstName', headerName: 'First name', width: 150},\r\n@@ -21,9 +21,9 @@\n \r\n     ]\r\n     return (\r\n         <>\r\n-            <button onClick={fetchUsers}>Load users</button>\r\n+            \r\n             <div style={{ height: 400, width: '100%' }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657878816759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n         setUsers(data)\r\n         console.clear();\r\n         console.log(\"data\", data);\r\n         \r\n-    }()\r\n+    }\r\n     const rows = _.cloneDeep(users) \r\n     const cols: GridColDef[] = [\r\n         {field: 'id', headerName: 'ID', width: 70},\r\n         {field: 'firstName', headerName: 'First name', width: 150},\r\n@@ -21,9 +21,9 @@\n \r\n     ]\r\n     return (\r\n         <>\r\n-            \r\n+            <button onClick={fetchUsers}>Load users</button>\r\n             <div style={{ height: 400, width: '100%' }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657878943920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,16 +4,16 @@\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n-    const fetchUsers = async function() {\r\n+    const fetchUsers = (async () => {\r\n         const response = await fetch('/api/users')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n         console.clear();\r\n         console.log(\"data\", data);\r\n         \r\n-    }\r\n+    })()\r\n     const rows = _.cloneDeep(users) \r\n     const cols: GridColDef[] = [\r\n         {field: 'id', headerName: 'ID', width: 70},\r\n         {field: 'firstName', headerName: 'First name', width: 150},\r\n@@ -21,9 +21,9 @@\n \r\n     ]\r\n     return (\r\n         <>\r\n-            <button onClick={fetchUsers}>Load users</button>\r\n+            {/* <button onClick={fetchUsers}>Load users</button> */}\r\n             <div style={{ height: 400, width: '100%' }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657879021987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,16 +4,16 @@\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n-    const fetchUsers = (async () => {\r\n+    const fetchUsers = async () => {\r\n         const response = await fetch('/api/users')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n         console.clear();\r\n         console.log(\"data\", data);\r\n         \r\n-    })()\r\n+    }\r\n     const rows = _.cloneDeep(users) \r\n     const cols: GridColDef[] = [\r\n         {field: 'id', headerName: 'ID', width: 70},\r\n         {field: 'firstName', headerName: 'First name', width: 150},\r\n@@ -21,9 +21,9 @@\n \r\n     ]\r\n     return (\r\n         <>\r\n-            {/* <button onClick={fetchUsers}>Load users</button> */}\r\n+            <button onClick={fetchUsers}>Load users</button>\r\n             <div style={{ height: 400, width: '100%' }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657879294560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n     const cols: GridColDef[] = [\r\n         {field: 'id', headerName: 'ID', width: 70},\r\n         {field: 'firstName', headerName: 'First name', width: 150},\r\n         {field: 'lastName', headerName: 'Last name', width: 150},\r\n+        {field: 'age', headerName: 'Age', width: 150},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1657879434074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,12 +14,12 @@\n         \r\n     }\r\n     const rows = _.cloneDeep(users) \r\n     const cols: GridColDef[] = [\r\n-        {field: 'id', headerName: 'ID', width: 70},\r\n-        {field: 'firstName', headerName: 'First name', width: 150},\r\n-        {field: 'lastName', headerName: 'Last name', width: 150},\r\n-        {field: 'age', headerName: 'Age', width: 150},\r\n+        {field: 'id', headerName: 'ID', flex: 1},\r\n+        {field: 'firstName', headerName: 'First name', flex: 1},\r\n+        {field: 'lastName', headerName: 'Last name', flex: 1},\r\n+        {field: 'age', headerName: 'Age', flex: 1},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1657879700947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import _ from 'lodash'\r\n import {useState} from 'react'\r\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n+import Layout from '../../layout/layout'\r\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n@@ -34,5 +35,13 @@\n                     />\r\n             </div>\r\n         </>\r\n     )\r\n-}\n\\ No newline at end of file\n+}\r\n+\r\n+userPage.getLayout = function getLayout(page) {\r\n+    return (\r\n+      <Layout pageTitle={'Register'}>\r\n+        {page}\r\n+      </Layout>\r\n+    )\r\n+  }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1657879707631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n }\r\n \r\n userPage.getLayout = function getLayout(page) {\r\n     return (\r\n-      <Layout pageTitle={'Register'}>\r\n+      <Layout pageTitle={'User'}>\r\n         {page}\r\n       </Layout>\r\n     )\r\n   }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1657881310636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import _ from 'lodash'\r\n import {useState} from 'react'\r\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n+import { Box } from '@mui/material';\r\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n@@ -24,17 +25,17 @@\n     ]\r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n-            <div style={{ height: 400, width: '100%' }}>\r\n+            <Box style={{ height: 400, width: '100%' }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n                     />\r\n-            </div>\r\n+            </Box>\r\n         </>\r\n     )\r\n }\r\n \r\n"
                },
                {
                    "date": 1657881346382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import _ from 'lodash'\r\n-import {useState} from 'react'\r\n+import { useState } from 'react'\r\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n \r\n@@ -12,37 +12,37 @@\n         const data = await response.json()\r\n         setUsers(data)\r\n         console.clear();\r\n         console.log(\"data\", data);\r\n-        \r\n+\r\n     }\r\n-    const rows = _.cloneDeep(users) \r\n+    const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n-        {field: 'id', headerName: 'ID', flex: 1},\r\n-        {field: 'firstName', headerName: 'First name', flex: 1},\r\n-        {field: 'lastName', headerName: 'Last name', flex: 1},\r\n-        {field: 'age', headerName: 'Age', flex: 1},\r\n+        { field: 'id', headerName: 'ID', flex: 1 },\r\n+        { field: 'firstName', headerName: 'First name', flex: 1 },\r\n+        { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n+        { field: 'age', headerName: 'Age', flex: 1 },\r\n \r\n     ]\r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n-            <Box style={{ height: 400, width: '100%' }}>\r\n+            <Box sx={{ height: 400, width: '100%', backgroundColor: 'rgba(255, 7, 0, 0.55)' }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n-                    />\r\n+                />\r\n             </Box>\r\n         </>\r\n     )\r\n }\r\n\\ No newline at end of file\n \r\n userPage.getLayout = function getLayout(page) {\r\n     return (\r\n-      <Layout pageTitle={'User'}>\r\n-        {page}\r\n-      </Layout>\r\n+        <Layout pageTitle={'User'}>\r\n+            {page}\r\n+        </Layout>\r\n     )\r\n-  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1657881398813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,14 @@\n     ]\r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n-            <Box sx={{ height: 400, width: '100%', backgroundColor: 'rgba(255, 7, 0, 0.55)' }}>\r\n+            <Box sx={{\r\n+                height: 400, width: '100%',\r\n+                '& .super-app-theme--header': {\r\n+                    backgroundColor: 'rgba(255, 7, 0, 0.55)',\r\n+                }\r\n+            }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n"
                },
                {
                    "date": 1657881502748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,8 @@\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n                 height: 400, width: '100%',\r\n-                '& .super-app-theme--header': {\r\n-                    backgroundColor: 'rgba(255, 7, 0, 0.55)',\r\n-                }\r\n             }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657881648254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                height: 400, width: '100%',\r\n+                height: 400, width: '100%', borderColor: 'primary.main'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657881662587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                height: 400, width: '100%', borderColor: 'primary.main'\r\n+                height: 400, width: '100%', borderColor: 'red'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657881675451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                height: 400, width: '100%', borderColor: 'red'\r\n+                height: 400, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657881708754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                height: 400, width: '100%'\r\n+                height: 500, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657881719561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                height: 500, width: '100%'\r\n+                height: 300, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657881727626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                height: 300, width: '100%'\r\n+                height: 400, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657881745773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                height: 400, width: '100%'\r\n+                height: 370, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657881754819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                height: 370, width: '100%'\r\n+                height: 380, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657881766265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                height: 380, width: '100%'\r\n+                height: 375, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657881791172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                height: 375, width: '100%'\r\n+                height: 373, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1657881805524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                height: 373, width: '100%'\r\n+                height: 371, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={users}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658108393565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,16 +6,16 @@\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n-    const fetchUsers = async () => {\r\n+    const fetchUsers = (async () => {\r\n         const response = await fetch('/api/users')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n         console.clear();\r\n         console.log(\"data\", data);\r\n \r\n-    }\r\n+    })()\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n@@ -24,9 +24,9 @@\n \r\n     ]\r\n     return (\r\n         <>\r\n-            <button onClick={fetchUsers}>Load users</button>\r\n+            {/* <button onClick={fetchUsers}>Load users</button> */}\r\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n"
                },
                {
                    "date": 1658108427840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,10 @@\n     const fetchUsers = (async () => {\r\n         const response = await fetch('/api/users')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n-        console.clear();\r\n-        console.log(\"data\", data);\r\n+        // console.clear();\r\n+        // console.log(\"data\", data);\r\n \r\n     })()\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n"
                },
                {
                    "date": 1658108449141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n-    const fetchUsers = (async () => {\r\n+    (async () => {\r\n         const response = await fetch('/api/users')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n         // console.clear();\r\n"
                },
                {
                    "date": 1658108474436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n-    (async () => {\r\n+    const fetchUsers = (async () => {\r\n         const response = await fetch('/api/users')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n         // console.clear();\r\n"
                },
                {
                    "date": 1658108730439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,16 +6,16 @@\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n-    const fetchUsers = (async () => {\r\n+    const fetchUsers = async () => {\r\n         const response = await fetch('/api/users')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n         // console.clear();\r\n         // console.log(\"data\", data);\r\n \r\n-    })()\r\n+    }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n@@ -24,9 +24,9 @@\n \r\n     ]\r\n     return (\r\n         <>\r\n-            {/* <button onClick={fetchUsers}>Load users</button> */}\r\n+            <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n"
                },
                {
                    "date": 1658111020722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,27 +3,28 @@\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n \r\n-export default function userPage() {\r\n-    const [users, setUsers] = useState([])\r\n+const [users, setUsers] = useState([])\r\n \r\n-    const fetchUsers = async () => {\r\n-        const response = await fetch('/api/users')\r\n-        const data = await response.json()\r\n-        setUsers(data)\r\n-        // console.clear();\r\n-        // console.log(\"data\", data);\r\n+const fetchUsers = async () => {\r\n+    const response = await fetch('/api/users')\r\n+    const data = await response.json()\r\n+    setUsers(data)\r\n+    // console.clear();\r\n+    // console.log(\"data\", data);\r\n \r\n-    }\r\n-    const rows = _.cloneDeep(users)\r\n-    const cols: GridColDef[] = [\r\n-        { field: 'id', headerName: 'ID', flex: 1 },\r\n-        { field: 'firstName', headerName: 'First name', flex: 1 },\r\n-        { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n-        { field: 'age', headerName: 'Age', flex: 1 },\r\n+}\r\n+const rows = _.cloneDeep(users)\r\n+const cols: GridColDef[] = [\r\n+    { field: 'id', headerName: 'ID', flex: 1 },\r\n+    { field: 'firstName', headerName: 'First name', flex: 1 },\r\n+    { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n+    { field: 'age', headerName: 'Age', flex: 1 },\r\n \r\n-    ]\r\n+]\r\n+\r\n+export default function userPage() {\r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n"
                },
                {
                    "date": 1658111049932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,28 +3,27 @@\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n \r\n-const [users, setUsers] = useState([])\r\n+export default function userPage() {\r\n+    const [users, setUsers] = useState([])\r\n \r\n-const fetchUsers = async () => {\r\n-    const response = await fetch('/api/users')\r\n-    const data = await response.json()\r\n-    setUsers(data)\r\n-    // console.clear();\r\n-    // console.log(\"data\", data);\r\n+    const fetchUsers = async () => {\r\n+        const response = await fetch('/api/users')\r\n+        const data = await response.json()\r\n+        setUsers(data)\r\n+        // console.clear();\r\n+        // console.log(\"data\", data);\r\n \r\n-}\r\n-const rows = _.cloneDeep(users)\r\n-const cols: GridColDef[] = [\r\n-    { field: 'id', headerName: 'ID', flex: 1 },\r\n-    { field: 'firstName', headerName: 'First name', flex: 1 },\r\n-    { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n-    { field: 'age', headerName: 'Age', flex: 1 },\r\n+    }\r\n+    const rows = _.cloneDeep(users)\r\n+    const cols: GridColDef[] = [\r\n+        { field: 'id', headerName: 'ID', flex: 1 },\r\n+        { field: 'firstName', headerName: 'First name', flex: 1 },\r\n+        { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n+        { field: 'age', headerName: 'Age', flex: 1 },\r\n \r\n-]\r\n-\r\n-export default function userPage() {\r\n+    ]\r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n"
                },
                {
                    "date": 1658117254078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n-        { field: 'age', headerName: 'Age', flex: 1 },\r\n+        { field: 'email', headerName: 'Email', flex: 1 },\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658117337103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n-                    rows={users}\r\n+                    rows={rows}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1658117481344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n-        { field: 'email', headerName: 'Email', flex: 1 },\r\n+        { field: 'email', headerName: 'Email'},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658117513097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n-        { field: 'email', headerName: 'Email'},\r\n+        { field: 'email', headerName: 'Email', flex: 1, width: 150px},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658117519625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n-        { field: 'email', headerName: 'Email', flex: 1, width: 150px},\r\n+        { field: 'email', headerName: 'Email', flex: 1, width: 150},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658117531471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n-        { field: 'email', headerName: 'Email', flex: 1, width: 150},\r\n+        { field: 'email', headerName: 'Email', width: 150},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658117541391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n-        { field: 'email', headerName: 'Email', width: 150},\r\n+        { field: 'email', headerName: 'Email', width: 550},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658117555264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n-        { field: 'email', headerName: 'Email', width: 550},\r\n+        { field: 'email', headerName: 'Email', width: 250},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658117603605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n-        { field: 'id', headerName: 'ID', flex: 1 },\r\n+        { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n         { field: 'email', headerName: 'Email', width: 250},\r\n \r\n"
                },
                {
                    "date": 1658118020093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,19 +25,20 @@\n     ]\r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n-            <Box sx={{\r\n+            <div style={{\r\n                 height: 371, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n+                    \r\n                 />\r\n-            </Box>\r\n+            </div>\r\n         </>\r\n     )\r\n }\r\n \r\n"
                },
                {
                    "date": 1658118110534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name', flex: 1 },\r\n-        { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n+        { field: 'firstName', headerName: 'First name'},\r\n+        { field: 'lastName', headerName: 'Last name'},\r\n         { field: 'email', headerName: 'Email', width: 250},\r\n \r\n     ]\r\n     return (\r\n"
                },
                {
                    "date": 1658118151458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,12 @@\n \r\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n-        { field: 'id', headerName: 'ID', width: 10},\r\n+        { field: 'id', headerName: 'ID'},\r\n         { field: 'firstName', headerName: 'First name'},\r\n         { field: 'lastName', headerName: 'Last name'},\r\n-        { field: 'email', headerName: 'Email', width: 250},\r\n+        { field: 'email', headerName: 'Email'},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118171181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n-        { field: 'id', headerName: 'ID'},\r\n+        { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name'},\r\n         { field: 'lastName', headerName: 'Last name'},\r\n         { field: 'email', headerName: 'Email'},\r\n \r\n"
                },
                {
                    "date": 1658118187915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name'},\r\n         { field: 'lastName', headerName: 'Last name'},\r\n-        { field: 'email', headerName: 'Email'},\r\n+        { field: 'email', headerName: 'Email', width: 150},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118205738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name'},\r\n+        { field: 'firstName', headerName: 'First name', flex: 1},\r\n         { field: 'lastName', headerName: 'Last name'},\r\n         { field: 'email', headerName: 'Email', width: 150},\r\n \r\n     ]\r\n"
                },
                {
                    "date": 1658118228979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,11 @@\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name', flex: 1},\r\n-        { field: 'lastName', headerName: 'Last name'},\r\n-        { field: 'email', headerName: 'Email', width: 150},\r\n+        { field: 'firstName', headerName: 'First name', flex: 1 },\r\n+        { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n+        { field: 'email', headerName: 'Email', width: 250},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118244606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name', flex: 1 },\r\n-        { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n+        { field: 'firstName', headerName: 'First name'},\r\n+        { field: 'lastName', headerName: 'Last name'},\r\n         { field: 'email', headerName: 'Email', width: 250},\r\n \r\n     ]\r\n     return (\r\n"
                },
                {
                    "date": 1658118259722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name'},\r\n         { field: 'lastName', headerName: 'Last name'},\r\n-        { field: 'email', headerName: 'Email', width: 250},\r\n+        { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118271477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name'},\r\n         { field: 'lastName', headerName: 'Last name'},\r\n-        { field: 'email', headerName: 'Email', flex: 1},\r\n+        { field: 'email', headerName: 'Email'},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118282867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name'},\r\n         { field: 'lastName', headerName: 'Last name'},\r\n-        { field: 'email', headerName: 'Email'},\r\n+        { field: 'email', headerName: 'Email', width: 250},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118301048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name'},\r\n         { field: 'lastName', headerName: 'Last name'},\r\n-        { field: 'email', headerName: 'Email', width: 250},\r\n+        { field: 'email', headerName: 'Email'},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118386615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name'},\r\n-        { field: 'lastName', headerName: 'Last name'},\r\n+        { field: 'firstName', headerName: 'First name', flex: 1},\r\n+        { field: 'lastName', headerName: 'Last name', flex: 1},\r\n         { field: 'email', headerName: 'Email'},\r\n \r\n     ]\r\n     return (\r\n"
                },
                {
                    "date": 1658118395134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name', flex: 1},\r\n         { field: 'lastName', headerName: 'Last name', flex: 1},\r\n-        { field: 'email', headerName: 'Email'},\r\n+        { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118406308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     ]\r\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n-            <div style={{\r\n+            <Box sx={{\r\n                 height: 371, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n@@ -36,9 +36,9 @@\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n                     \r\n                 />\r\n-            </div>\r\n+            </Box>\r\n         </>\r\n     )\r\n }\r\n \r\n"
                },
                {
                    "date": 1658118426332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name', flex: 1},\r\n         { field: 'lastName', headerName: 'Last name', flex: 1},\r\n-        { field: 'email', headerName: 'Email', flex: 1},\r\n+        { field: 'email', headerName: 'Email', width: 150},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118465273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,10 @@\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name', flex: 1},\r\n-        { field: 'lastName', headerName: 'Last name', flex: 1},\r\n-        { field: 'email', headerName: 'Email', width: 150},\r\n+        { field: 'lastName', headerName: 'Last name'},\r\n+        { field: 'email', headerName: 'Email', width: 250},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118481587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name', flex: 1},\r\n+        { field: 'firstName', headerName: 'First name'},\r\n         { field: 'lastName', headerName: 'Last name'},\r\n         { field: 'email', headerName: 'Email', width: 250},\r\n \r\n     ]\r\n"
                },
                {
                    "date": 1658118516896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,12 @@\n \r\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n-        { field: 'id', headerName: 'ID', width: 10},\r\n+        { field: 'id', headerName: 'ID'},\r\n         { field: 'firstName', headerName: 'First name'},\r\n         { field: 'lastName', headerName: 'Last name'},\r\n-        { field: 'email', headerName: 'Email', width: 250},\r\n+        { field: 'email', headerName: 'Email'},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118540479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,12 @@\n \r\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n-        { field: 'id', headerName: 'ID'},\r\n-        { field: 'firstName', headerName: 'First name'},\r\n-        { field: 'lastName', headerName: 'Last name'},\r\n-        { field: 'email', headerName: 'Email'},\r\n+        { field: 'id', headerName: 'ID', flex: 1},\r\n+        { field: 'firstName', headerName: 'First name', flex: 1},\r\n+        { field: 'lastName', headerName: 'Last name', flex: 1},\r\n+        { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118568764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n-        { field: 'id', headerName: 'ID', flex: 1},\r\n+        { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name', flex: 1},\r\n         { field: 'lastName', headerName: 'Last name', flex: 1},\r\n         { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n"
                },
                {
                    "date": 1658118594436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name', flex: 1},\r\n+        { field: 'firstName', headerName: 'First name', width: 30},\r\n         { field: 'lastName', headerName: 'Last name', flex: 1},\r\n         { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n     ]\r\n"
                },
                {
                    "date": 1658118607465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name', width: 30},\r\n+        { field: 'firstName', headerName: 'First name', width: 60},\r\n         { field: 'lastName', headerName: 'Last name', flex: 1},\r\n         { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n     ]\r\n"
                },
                {
                    "date": 1658118615704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name', width: 60},\r\n+        { field: 'firstName', headerName: 'First name', width: 100},\r\n         { field: 'lastName', headerName: 'Last name', flex: 1},\r\n         { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n     ]\r\n"
                },
                {
                    "date": 1658118633879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name', width: 100},\r\n-        { field: 'lastName', headerName: 'Last name', flex: 1},\r\n+        { field: 'lastName', headerName: 'Last name', width: 100},\r\n         { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n     ]\r\n     return (\r\n"
                },
                {
                    "date": 1658118652358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name', width: 100},\r\n+        { field: 'firstName', headerName: 'First name', flex: 1},\r\n         { field: 'lastName', headerName: 'Last name', width: 100},\r\n         { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n     ]\r\n"
                },
                {
                    "date": 1658118751195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name', flex: 1},\r\n+        { field: 'firstName', headerName: 'First name', width: 100},\r\n         { field: 'lastName', headerName: 'Last name', width: 100},\r\n         { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n     ]\r\n"
                },
                {
                    "date": 1658118838580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name', width: 100},\r\n         { field: 'lastName', headerName: 'Last name', width: 100},\r\n-        { field: 'email', headerName: 'Email', flex: 1},\r\n+        { field: 'email', headerName: 'Email', width: 250},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118859953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name', width: 100},\r\n+        { field: 'firstName', headerName: 'First name', flex: 1},\r\n         { field: 'lastName', headerName: 'Last name', width: 100},\r\n         { field: 'email', headerName: 'Email', width: 250},\r\n \r\n     ]\r\n"
                },
                {
                    "date": 1658118875844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name', flex: 1},\r\n-        { field: 'lastName', headerName: 'Last name', width: 100},\r\n+        { field: 'lastName', headerName: 'Last name', flex: 1},\r\n         { field: 'email', headerName: 'Email', width: 250},\r\n \r\n     ]\r\n     return (\r\n"
                },
                {
                    "date": 1658118908586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name', flex: 1},\r\n         { field: 'lastName', headerName: 'Last name', flex: 1},\r\n-        { field: 'email', headerName: 'Email', width: 250},\r\n+        { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n     ]\r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1658118954837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n-        { field: 'id', headerName: 'ID', width: 10},\r\n+        { field: 'id', headerName: 'ID', flex: 1},\r\n         { field: 'firstName', headerName: 'First name', flex: 1},\r\n         { field: 'lastName', headerName: 'Last name', flex: 1},\r\n         { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n"
                },
                {
                    "date": 1658118972216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n-        { field: 'id', headerName: 'ID', flex: 1},\r\n+        { field: 'id', headerName: 'ID', width: 10},\r\n         { field: 'firstName', headerName: 'First name', flex: 1},\r\n         { field: 'lastName', headerName: 'Last name', flex: 1},\r\n         { field: 'email', headerName: 'Email', flex: 1},\r\n \r\n"
                },
                {
                    "date": 1658125580268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                height: 371, width: '100%'\r\n+                width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658128594903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return (\r\n         <>\r\n             <button onClick={fetchUsers}>Load users</button>\r\n             <Box sx={{\r\n-                width: '100%'\r\n+                height: 371, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658195456237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n         const response = await fetch('/api/users')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n         // console.clear();\r\n-        // console.log(\"data\", data);\r\n+        console.log(\"data\", data);\r\n \r\n     }\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n"
                },
                {
                    "date": 1658195505868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,12 +7,12 @@\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n     const fetchUsers = async () => {\r\n-        const response = await fetch('/api/users')\r\n+        const response = await fetch('/api/User')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n-        // console.clear();\r\n+        console.clear();\r\n         console.log(\"data\", data);\r\n \r\n     }\r\n     const rows = _.cloneDeep(users)\r\n"
                },
                {
                    "date": 1658197629368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import _ from 'lodash'\r\n-import { useState } from 'react'\r\n+import { useEffect, useState } from 'react'\r\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n \r\n@@ -10,18 +10,26 @@\n     const fetchUsers = async () => {\r\n         const response = await fetch('/api/User')\r\n         const data = await response.json()\r\n         setUsers(data)\r\n-        console.clear();\r\n-        console.log(\"data\", data);\r\n+        // console.clear();\r\n+        // console.log(\"data\", data);\r\n \r\n     }\r\n+\r\n+    useEffect(() => {\r\n+        async () => {\r\n+            const response = await fetch('/api/User')\r\n+            const data = await response.json()\r\n+        }\r\n+    }, [])\r\n+\r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n-        { field: 'id', headerName: 'ID', width: 10},\r\n-        { field: 'firstName', headerName: 'First name', flex: 1},\r\n-        { field: 'lastName', headerName: 'Last name', flex: 1},\r\n-        { field: 'email', headerName: 'Email', flex: 1},\r\n+        { field: 'id', headerName: 'ID', width: 10 },\r\n+        { field: 'firstName', headerName: 'First name', flex: 1 },\r\n+        { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n+        { field: 'email', headerName: 'Email', flex: 1 },\r\n \r\n     ]\r\n     return (\r\n         <>\r\n@@ -34,9 +42,9 @@\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n-                    \r\n+\r\n                 />\r\n             </Box>\r\n         </>\r\n     )\r\n"
                },
                {
                    "date": 1658197638917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,10 @@\n     useEffect(() => {\r\n         async () => {\r\n             const response = await fetch('/api/User')\r\n             const data = await response.json()\r\n+            console.log('data',data);\r\n+            \r\n         }\r\n     }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n"
                },
                {
                    "date": 1658197853758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,14 +16,15 @@\n \r\n     }\r\n \r\n     useEffect(() => {\r\n-        async () => {\r\n+        const dat = async () => {\r\n             const response = await fetch('/api/User')\r\n             const data = await response.json()\r\n             console.log('data',data);\r\n             \r\n         }\r\n+        return dat\r\n     }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n"
                },
                {
                    "date": 1658197871336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     useEffect(() => {\r\n         const dat = async () => {\r\n             const response = await fetch('/api/User')\r\n             const data = await response.json()\r\n-            console.log('data',data);\r\n+            console.log('data',dat);\r\n             \r\n         }\r\n         return dat\r\n     }, [])\r\n"
                },
                {
                    "date": 1658197884088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     useEffect(() => {\r\n         const dat = async () => {\r\n             const response = await fetch('/api/User')\r\n             const data = await response.json()\r\n-            console.log('data',dat);\r\n+            console.log('data',data);\r\n             \r\n         }\r\n         return dat\r\n     }, [])\r\n"
                },
                {
                    "date": 1658197899157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,12 @@\n     useEffect(() => {\r\n         const dat = async () => {\r\n             const response = await fetch('/api/User')\r\n             const data = await response.json()\r\n-            console.log('data',data);\r\n             \r\n+            \r\n         }\r\n+        console.log('data',data);\r\n         return dat\r\n     }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n"
                },
                {
                    "date": 1658198023800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,15 +17,15 @@\n     }\r\n \r\n     useEffect(() => {\r\n         const dat = async () => {\r\n-            const response = await fetch('/api/User')\r\n-            const data = await response.json()\r\n+            const response = await get('/api/User')\r\n+            // const data = await response.json()\r\n             \r\n             \r\n         }\r\n-        console.log('data',data);\r\n-        return dat\r\n+        console.log('data',dat);\r\n+        // return dat\r\n     }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n"
                },
                {
                    "date": 1658198056366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,11 @@\n     }\r\n \r\n     useEffect(() => {\r\n         const dat = async () => {\r\n-            const response = await get('/api/User')\r\n+            const response = await fetch('/api/User')\r\n             // const data = await response.json()\r\n+            return response\r\n             \r\n             \r\n         }\r\n         console.log('data',dat);\r\n"
                },
                {
                    "date": 1658198099184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,10 @@\n     useEffect(() => {\r\n         const dat = async () => {\r\n             const response = await fetch('/api/User')\r\n             // const data = await response.json()\r\n+            console.log(\"rs\", response);\r\n+            \r\n             return response\r\n             \r\n             \r\n         }\r\n"
                },
                {
                    "date": 1658198222210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,20 +16,17 @@\n \r\n     }\r\n \r\n     useEffect(() => {\r\n-        const dat = async () => {\r\n-            const response = await fetch('/api/User')\r\n-            // const data = await response.json()\r\n-            console.log(\"rs\", response);\r\n-            \r\n-            return response\r\n-            \r\n-            \r\n+        async function fetchMyAPI() {\r\n+          let response = await fetch('/api/User')\r\n+          response = await response.json()\r\n+          console.log(\"data\", response);\r\n+          \r\n         }\r\n-        console.log('data',dat);\r\n-        // return dat\r\n-    }, [])\r\n+    \r\n+        fetchMyAPI()\r\n+      }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n"
                },
                {
                    "date": 1658198283039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,10 @@\n         async function fetchMyAPI() {\r\n           let response = await fetch('/api/User')\r\n           response = await response.json()\r\n           console.log(\"data\", response);\r\n-          \r\n+          setUsers(response)\r\n         }\r\n-    \r\n         fetchMyAPI()\r\n       }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n"
                },
                {
                    "date": 1658198320770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \r\n     ]\r\n     return (\r\n         <>\r\n-            <button onClick={fetchUsers}>Load users</button>\r\n+            {/* <button onClick={fetchUsers}>Load users</button> */}\r\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n"
                },
                {
                    "date": 1658198368249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     }\r\n \r\n     useEffect(() => {\r\n         async function fetchMyAPI() {\r\n-          let response = await fetch('/api/User')\r\n+          const response = await fetch('/api/User')\r\n           response = await response.json()\r\n           console.log(\"data\", response);\r\n           setUsers(response)\r\n         }\r\n"
                },
                {
                    "date": 1658198377875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     }\r\n \r\n     useEffect(() => {\r\n         async function fetchMyAPI() {\r\n-          const response = await fetch('/api/User')\r\n+          let response = await fetch('/api/User')\r\n           response = await response.json()\r\n           console.log(\"data\", response);\r\n           setUsers(response)\r\n         }\r\n"
                },
                {
                    "date": 1658198960240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,16 @@\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n \r\n+interface userList {\r\n+    is: number,\r\n+    firstName: string,\r\n+    lastName: string,\r\n+    email: string,\r\n+    password: string\r\n+}\r\n+\r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n     const fetchUsers = async () => {\r\n@@ -17,9 +25,9 @@\n     }\r\n \r\n     useEffect(() => {\r\n         async function fetchMyAPI() {\r\n-          let response = await fetch('/api/User')\r\n+          let response: userList[] = await fetch('/api/User')\r\n           response = await response.json()\r\n           console.log(\"data\", response);\r\n           setUsers(response)\r\n         }\r\n"
                },
                {
                    "date": 1658199011542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,12 +25,12 @@\n     }\r\n \r\n     useEffect(() => {\r\n         async function fetchMyAPI() {\r\n-          let response: userList[] = await fetch('/api/User')\r\n-          response = await response.json()\r\n-          console.log(\"data\", response);\r\n-          setUsers(response)\r\n+          let res = await fetch('/api/User')\r\n+          let result: userList[] = await res.json()\r\n+          console.log(\"data\", result);\r\n+          setUsers(result)\r\n         }\r\n         fetchMyAPI()\r\n       }, [])\r\n \r\n"
                },
                {
                    "date": 1658199587955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,15 +24,15 @@\n \r\n     }\r\n \r\n     useEffect(() => {\r\n-        async function fetchMyAPI() {\r\n+        async function fetchData() {\r\n           let res = await fetch('/api/User')\r\n           let result: userList[] = await res.json()\r\n           console.log(\"data\", result);\r\n           setUsers(result)\r\n         }\r\n-        fetchMyAPI()\r\n+        fetchData()\r\n       }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n"
                },
                {
                    "date": 1658199602740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,10 @@\n     }\r\n \r\n     useEffect(() => {\r\n         async function fetchData() {\r\n-          let res = await fetch('/api/User')\r\n-          let result: userList[] = await res.json()\r\n+          const res = await fetch('/api/User')\r\n+          const result: userList[] = await res.json()\r\n           console.log(\"data\", result);\r\n           setUsers(result)\r\n         }\r\n         fetchData()\r\n"
                },
                {
                    "date": 1658199616683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     useEffect(() => {\r\n         async function fetchData() {\r\n           const res = await fetch('/api/User')\r\n           const result: userList[] = await res.json()\r\n-          console.log(\"data\", result);\r\n+        //   console.log(\"data\", result);\r\n           setUsers(result)\r\n         }\r\n         fetchData()\r\n       }, [])\r\n"
                },
                {
                    "date": 1658218082411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,16 +14,16 @@\n \r\n export default function userPage() {\r\n     const [users, setUsers] = useState([])\r\n \r\n-    const fetchUsers = async () => {\r\n-        const response = await fetch('/api/User')\r\n-        const data = await response.json()\r\n-        setUsers(data)\r\n-        // console.clear();\r\n-        // console.log(\"data\", data);\r\n+    // const fetchUsers = async () => {\r\n+    //     const response = await fetch('/api/User')\r\n+    //     const data = await response.json()\r\n+    //     setUsers(data)\r\n+    //     // console.clear();\r\n+    //     // console.log(\"data\", data);\r\n \r\n-    }\r\n+    // }\r\n \r\n     useEffect(() => {\r\n         async function fetchData() {\r\n           const res = await fetch('/api/User')\r\n"
                },
                {
                    "date": 1658224832013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,11 +60,11 @@\n         </>\r\n     )\r\n }\r\n \r\n-userPage.getLayout = function getLayout(page) {\r\n-    return (\r\n-        <Layout pageTitle={'User'}>\r\n-            {page}\r\n-        </Layout>\r\n-    )\r\n-}\n\\ No newline at end of file\n+// userPage.getLayout = function getLayout(page) {\r\n+//     return (\r\n+//         <Layout pageTitle={'User'}>\r\n+//             {page}\r\n+//         </Layout>\r\n+//     )\r\n+// }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1658225909595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,11 @@\n     password: string\r\n }\r\n \r\n export default function userPage() {\r\n+    useEffect(() => {\r\n+        document.title = 'User'\r\n+      }, [])\r\n     const [users, setUsers] = useState([])\r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n"
                },
                {
                    "date": 1658282837565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     return (\r\n         <>\r\n             {/* <button onClick={fetchUsers}>Load users</button> */}\r\n             <Box sx={{\r\n-                height: 371, width: '100%'\r\n+                height: 371, width: '100%', overflow: 'auto',\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658282941131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     return (\r\n         <>\r\n             {/* <button onClick={fetchUsers}>Load users</button> */}\r\n             <Box sx={{\r\n-                height: 371, width: '100%', overflow: 'auto',\r\n+                height: 371, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658283025666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,11 +47,9 @@\n     ]\r\n     return (\r\n         <>\r\n             {/* <button onClick={fetchUsers}>Load users</button> */}\r\n-            <Box sx={{\r\n-                height: 371, width: '100%'\r\n-            }}>\r\n+            <Box component=\"div\" sx={{ overflow: 'auto' }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n"
                },
                {
                    "date": 1658283044429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,11 @@\n     ]\r\n     return (\r\n         <>\r\n             {/* <button onClick={fetchUsers}>Load users</button> */}\r\n-            <Box component=\"div\" sx={{ overflow: 'auto' }}>\r\n+            <Box sx={{\r\n+                height: 371, width: '100%'\r\n+            }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n"
                },
                {
                    "date": 1658283204809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,17 @@\n import { useEffect, useState } from 'react'\r\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n+import {useAppContext} from '../../context/AppContext';\r\n \r\n-interface userList {\r\n-    is: number,\r\n-    firstName: string,\r\n-    lastName: string,\r\n-    email: string,\r\n-    password: string\r\n-}\r\n+// interface userList {\r\n+//     is: number,\r\n+//     firstName: string,\r\n+//     lastName: string,\r\n+//     email: string,\r\n+//     password: string\r\n+// }\r\n \r\n export default function userPage() {\r\n     useEffect(() => {\r\n         document.title = 'User'\r\n@@ -26,17 +27,17 @@\n     //     // console.log(\"data\", data);\r\n \r\n     // }\r\n \r\n-    useEffect(() => {\r\n-        async function fetchData() {\r\n-          const res = await fetch('/api/User')\r\n-          const result: userList[] = await res.json()\r\n-        //   console.log(\"data\", result);\r\n-          setUsers(result)\r\n-        }\r\n-        fetchData()\r\n-      }, [])\r\n+    // useEffect(() => {\r\n+    //     async function fetchData() {\r\n+    //       const res = await fetch('/api/User')\r\n+    //       const result: userList[] = await res.json()\r\n+    //     //   console.log(\"data\", result);\r\n+    //       setUsers(result)\r\n+    //     }\r\n+    //     fetchData()\r\n+    //   }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n"
                },
                {
                    "date": 1658283225103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import _ from 'lodash'\r\n-import { useEffect, useState } from 'react'\r\n+import { useEffect, useState, useContext } from 'react';\r\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n import {useAppContext} from '../../context/AppContext';\r\n@@ -16,9 +16,9 @@\n export default function userPage() {\r\n     useEffect(() => {\r\n         document.title = 'User'\r\n       }, [])\r\n-    const [users, setUsers] = useState([])\r\n+    const [users, setUsers] = useContext()\r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n     //     const data = await response.json()\r\n"
                },
                {
                    "date": 1658283233785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n export default function userPage() {\r\n     useEffect(() => {\r\n         document.title = 'User'\r\n       }, [])\r\n-    const [users, setUsers] = useContext()\r\n+    const [users, setUsers] = useAppContext()\r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n     //     const data = await response.json()\r\n"
                },
                {
                    "date": 1658283239596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n export default function userPage() {\r\n     useEffect(() => {\r\n         document.title = 'User'\r\n       }, [])\r\n+      \r\n     const [users, setUsers] = useAppContext()\r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n"
                },
                {
                    "date": 1658303225927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,13 @@\n export default function userPage() {\r\n     useEffect(() => {\r\n         document.title = 'User'\r\n       }, [])\r\n-      \r\n+\r\n     const [users, setUsers] = useAppContext()\r\n+    \r\n+    console.log('users', users)\r\n+    \r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n     //     const data = await response.json()\r\n"
                },
                {
                    "date": 1658303246478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n       }, [])\r\n \r\n     const [users, setUsers] = useAppContext()\r\n     \r\n-    console.log('users', users)\r\n+    // console.log('users', users)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n"
                },
                {
                    "date": 1658303302547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     //     }\r\n     //     fetchData()\r\n     //   }, [])\r\n \r\n-    const rows = _.cloneDeep(users)\r\n+    const rows = users\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n"
                },
                {
                    "date": 1658303323693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n       }, [])\r\n \r\n     const [users, setUsers] = useAppContext()\r\n     \r\n-    // console.log('users', users)\r\n+    console.log('users', users)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n"
                },
                {
                    "date": 1658303329458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n       }, [])\r\n \r\n     const [users, setUsers] = useAppContext()\r\n     \r\n-    console.log('users', users)\r\n+    // console.log('users', users)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n"
                },
                {
                    "date": 1658303338060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,15 @@\n //     password: string\r\n // }\r\n \r\n export default function userPage() {\r\n-    useEffect(() => {\r\n-        document.title = 'User'\r\n-      }, [])\r\n+    // useEffect(() => {\r\n+    //     document.title = 'User'\r\n+    //   }, [])\r\n \r\n     const [users, setUsers] = useAppContext()\r\n     \r\n-    // console.log('users', users)\r\n+    console.log('users', users)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n"
                },
                {
                    "date": 1658303349665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,15 @@\n //     password: string\r\n // }\r\n \r\n export default function userPage() {\r\n-    // useEffect(() => {\r\n-    //     document.title = 'User'\r\n-    //   }, [])\r\n+    useEffect(() => {\r\n+        document.title = 'User'\r\n+      }, [])\r\n \r\n     const [users, setUsers] = useAppContext()\r\n     \r\n-    console.log('users', users)\r\n+    // console.log('users', users)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n"
                },
                {
                    "date": 1658303369517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n       }, [])\r\n \r\n     const [users, setUsers] = useAppContext()\r\n     \r\n-    // console.log('users', users)\r\n+    console.log('users', users)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n"
                },
                {
                    "date": 1658312648150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n       }, [])\r\n \r\n     const [users, setUsers] = useAppContext()\r\n     \r\n-    console.log('users', users)\r\n+    // console.log('users', users)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n"
                },
                {
                    "date": 1658369590535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import _ from 'lodash'\r\n-import { useEffect, useState, useContext } from 'react';\r\n+import { useEffect } from 'react';\r\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n import {useAppContext} from '../../context/AppContext';\r\n"
                },
                {
                    "date": 1658371596663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \r\n export default function userPage() {\r\n     useEffect(() => {\r\n         document.title = 'User'\r\n-      }, [])\r\n+      }, )\r\n \r\n     const [users, setUsers] = useAppContext()\r\n     \r\n     // console.log('users', users)\r\n"
                },
                {
                    "date": 1658372887442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \r\n export default function userPage() {\r\n     useEffect(() => {\r\n         document.title = 'User'\r\n-      }, )\r\n+      },)\r\n \r\n     const [users, setUsers] = useAppContext()\r\n     \r\n     // console.log('users', users)\r\n"
                },
                {
                    "date": 1658387891719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n       },)\r\n \r\n     const [users, setUsers] = useAppContext()\r\n     \r\n+    \r\n     // console.log('users', users)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n"
                },
                {
                    "date": 1658391011824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,15 @@\n //     password: string\r\n // }\r\n \r\n export default function userPage() {\r\n-    useEffect(() => {\r\n+    (() => {\r\n         document.title = 'User'\r\n-      },)\r\n+      })();\r\n \r\n     const [users, setUsers] = useAppContext()\r\n+\r\n     \r\n-    \r\n     // console.log('users', users)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n"
                },
                {
                    "date": 1658391043689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,14 +13,13 @@\n //     password: string\r\n // }\r\n \r\n export default function userPage() {\r\n-    (() => {\r\n+    useEffect(() => {\r\n         document.title = 'User'\r\n-      })();\r\n+      },)\r\n \r\n     const [users, setUsers] = useAppContext()\r\n-\r\n     \r\n     // console.log('users', users)\r\n     \r\n \r\n"
                },
                {
                    "date": 1658391706474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n import {useAppContext} from '../../context/AppContext';\r\n+import router from 'next/router';\r\n \r\n // interface userList {\r\n //     is: number,\r\n //     firstName: string,\r\n@@ -19,9 +20,9 @@\n       },)\r\n \r\n     const [users, setUsers] = useAppContext()\r\n     \r\n-    // console.log('users', users)\r\n+    console.log('path', router.pathname)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n"
                },
                {
                    "date": 1658391838608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n import {useAppContext} from '../../context/AppContext';\r\n-import router from 'next/router';\r\n+import { useRouter } from 'next/router';\r\n \r\n // interface userList {\r\n //     is: number,\r\n //     firstName: string,\r\n"
                },
                {
                    "date": 1658391854837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         document.title = 'User'\r\n       },)\r\n \r\n     const [users, setUsers] = useAppContext()\r\n-    \r\n+    const router = useRouter()\r\n     console.log('path', router.pathname)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n"
                },
                {
                    "date": 1658392895911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,11 @@\n //     password: string\r\n // }\r\n \r\n export default function userPage() {\r\n-    useEffect(() => {\r\n-        document.title = 'User'\r\n-      },)\r\n+    // useEffect(() => {\r\n+    //     document.title = 'User'\r\n+    //   },)\r\n \r\n     const [users, setUsers] = useAppContext()\r\n     const router = useRouter()\r\n     console.log('path', router.pathname)\r\n"
                },
                {
                    "date": 1658393053709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,10 @@\n     //     document.title = 'User'\r\n     //   },)\r\n \r\n     const [users, setUsers] = useAppContext()\r\n-    const router = useRouter()\r\n-    console.log('path', router.pathname)\r\n+    // const router = useRouter()\r\n+    // console.log('path', router.pathname)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n"
                },
                {
                    "date": 1658395835300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     //     }\r\n     //     fetchData()\r\n     //   }, [])\r\n \r\n-    const rows = users\r\n+    const rows = _.cloneDeep(users)\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n"
                },
                {
                    "date": 1658399520777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,10 @@\n     //     fetchData()\r\n     //   }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n+    console.log('/users', users);\r\n+    \r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n"
                },
                {
                    "date": 1658729258705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     //     fetchData()\r\n     //   }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n-    console.log('/users', users);\r\n+    // console.log('/users', users);\r\n     \r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n"
                },
                {
                    "date": 1658729789452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     //     document.title = 'User'\r\n     //   },)\r\n \r\n     const [users, setUsers] = useAppContext()\r\n-    // const router = useRouter()\r\n+    const router = useRouter()\r\n     // console.log('path', router.pathname)\r\n     \r\n \r\n     // const fetchUsers = async () => {\r\n@@ -44,9 +44,13 @@\n     //   }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n     // console.log('/users', users);\r\n-    \r\n+    if (rows.find(ele => {\r\n+        ele.isSignIn !== true\r\n+    })) {\r\n+        router.push('/pages/user/sign-in')\r\n+    }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n"
                },
                {
                    "date": 1658729813275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,12 @@\n     //   }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n     // console.log('/users', users);\r\n+    const tmp = rows.find(ele => {\r\n+        ele.isSignIn !== true\r\n+    })\r\n+    \r\n     if (rows.find(ele => {\r\n         ele.isSignIn !== true\r\n     })) {\r\n         router.push('/pages/user/sign-in')\r\n"
                },
                {
                    "date": 1658729819955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,9 @@\n     // console.log('/users', users);\r\n     const tmp = rows.find(ele => {\r\n         ele.isSignIn !== true\r\n     })\r\n+    console.log('tmp', tmp);\r\n     \r\n     if (rows.find(ele => {\r\n         ele.isSignIn !== true\r\n     })) {\r\n"
                },
                {
                    "date": 1658729828718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n \r\n     const rows = _.cloneDeep(users)\r\n     // console.log('/users', users);\r\n     const tmp = rows.find(ele => {\r\n-        ele.isSignIn !== true\r\n+        ele.isSignIn === true\r\n     })\r\n     console.log('tmp', tmp);\r\n     \r\n     if (rows.find(ele => {\r\n"
                },
                {
                    "date": 1658729860458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     //     fetchData()\r\n     //   }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n-    // console.log('/users', users);\r\n+    console.log('/users', users);\r\n     const tmp = rows.find(ele => {\r\n         ele.isSignIn === true\r\n     })\r\n     console.log('tmp', tmp);\r\n"
                },
                {
                    "date": 1658729935793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n \r\n     const rows = _.cloneDeep(users)\r\n     console.log('/users', users);\r\n     const tmp = rows.find(ele => {\r\n-        ele.isSignIn === true\r\n+        return ele.isSignIn === true\r\n     })\r\n     console.log('tmp', tmp);\r\n     \r\n     if (rows.find(ele => {\r\n"
                },
                {
                    "date": 1658729996846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     const rows = _.cloneDeep(users)\r\n     console.log('/users', users);\r\n     const tmp = rows.find(ele => {\r\n         return ele.isSignIn === true\r\n-    })\r\n+    }).then(e => {return e.isSignIn})\r\n     console.log('tmp', tmp);\r\n     \r\n     if (rows.find(ele => {\r\n         ele.isSignIn !== true\r\n"
                },
                {
                    "date": 1658730242049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n \r\n     const rows = _.cloneDeep(users)\r\n     console.log('/users', users);\r\n     const tmp = rows.find(ele => {\r\n-        return ele.isSignIn === true\r\n+        return Promise.resolve(ele.isSignIn === true)\r\n     }).then(e => {return e.isSignIn})\r\n     console.log('tmp', tmp);\r\n     \r\n     if (rows.find(ele => {\r\n"
                },
                {
                    "date": 1658730341948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     const rows = _.cloneDeep(users)\r\n     console.log('/users', users);\r\n     const tmp = rows.find(ele => {\r\n         return Promise.resolve(ele.isSignIn === true)\r\n-    }).then(e => {return e.isSignIn})\r\n+    }).then(e => {console.log(e.isSignIn)})\r\n     console.log('tmp', tmp);\r\n     \r\n     if (rows.find(ele => {\r\n         ele.isSignIn !== true\r\n"
                },
                {
                    "date": 1658730374834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,10 @@\n \r\n     const rows = _.cloneDeep(users)\r\n     console.log('/users', users);\r\n     const tmp = rows.find(ele => {\r\n-        return Promise.resolve(ele.isSignIn === true)\r\n-    }).then(e => {console.log(e.isSignIn)})\r\n+        return ele.isSignIn === true\r\n+    })\r\n     console.log('tmp', tmp);\r\n     \r\n     if (rows.find(ele => {\r\n         ele.isSignIn !== true\r\n"
                },
                {
                    "date": 1658730462755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,9 @@\n         return ele.isSignIn === true\r\n     })\r\n     console.log('tmp', tmp);\r\n     \r\n-    if (rows.find(ele => {\r\n-        ele.isSignIn !== true\r\n-    })) {\r\n+    if (!!tmp.isSignIn) {\r\n         router.push('/pages/user/sign-in')\r\n     }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n"
                },
                {
                    "date": 1658730469731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n         return ele.isSignIn === true\r\n     })\r\n     console.log('tmp', tmp);\r\n     \r\n-    if (!!tmp.isSignIn) {\r\n+    if (!!tmp?.isSignIn) {\r\n         router.push('/pages/user/sign-in')\r\n     }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n"
                },
                {
                    "date": 1658730477919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n         return ele.isSignIn === true\r\n     })\r\n     console.log('tmp', tmp);\r\n     \r\n-    if (!!tmp?.isSignIn) {\r\n+    if (!tmp?.isSignIn) {\r\n         router.push('/pages/user/sign-in')\r\n     }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n"
                },
                {
                    "date": 1658730540306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     })\r\n     console.log('tmp', tmp);\r\n     \r\n     if (!tmp?.isSignIn) {\r\n-        router.push('/pages/user/sign-in')\r\n+        router.push('./sign-in')\r\n     }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n"
                },
                {
                    "date": 1658730580870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,11 @@\n     })\r\n     console.log('tmp', tmp);\r\n     \r\n     if (!tmp?.isSignIn) {\r\n-        router.push('./sign-in')\r\n+        // router.push('./sign-in')\r\n+        console.log('not sign in');\r\n+        \r\n     }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n"
                },
                {
                    "date": 1658730619820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,8 @@\n     \r\n     if (!tmp?.isSignIn) {\r\n         // router.push('./sign-in')\r\n         console.log('not sign in');\r\n-        \r\n     }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n"
                },
                {
                    "date": 1658730655524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,10 @@\n     })\r\n     console.log('tmp', tmp);\r\n     \r\n     if (!tmp?.isSignIn) {\r\n-        // router.push('./sign-in')\r\n-        console.log('not sign in');\r\n+        router.push('./sign-in')\r\n+        console.log('not sign in')\r\n     }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n"
                },
                {
                    "date": 1658731385912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     })\r\n     console.log('tmp', tmp);\r\n     \r\n     if (!tmp?.isSignIn) {\r\n-        router.push('./sign-in')\r\n+        // router.push('./sign-in')\r\n         console.log('not sign in')\r\n     }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n"
                },
                {
                    "date": 1658731921801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     // useEffect(() => {\r\n     //     document.title = 'User'\r\n     //   },)\r\n \r\n-    const [users, setUsers] = useAppContext()\r\n+    const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n     // console.log('path', router.pathname)\r\n     \r\n \r\n@@ -49,9 +49,9 @@\n         return ele.isSignIn === true\r\n     })\r\n     console.log('tmp', tmp);\r\n     \r\n-    if (!tmp?.isSignIn) {\r\n+    if (!status) {\r\n         // router.push('./sign-in')\r\n         console.log('not sign in')\r\n     }\r\n     const cols: GridColDef[] = [\r\n"
                },
                {
                    "date": 1658732364011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,22 +61,26 @@\n         { field: 'email', headerName: 'Email', flex: 1 },\r\n \r\n     ]\r\n     return (\r\n+        \r\n         <>\r\n-            {/* <button onClick={fetchUsers}>Load users</button> */}\r\n-            <Box sx={{\r\n-                height: 371, width: '100%'\r\n-            }}>\r\n-                <DataGrid\r\n-                    rows={rows}\r\n-                    columns={cols}\r\n-                    pageSize={5}\r\n-                    rowsPerPageOptions={[5]}\r\n-                    checkboxSelection\r\n+            {status? (\r\n+                <Box sx={{\r\n+                    height: 371, width: '100%'\r\n+                }}>\r\n+                    <DataGrid\r\n+                        rows={rows}\r\n+                        columns={cols}\r\n+                        pageSize={5}\r\n+                        rowsPerPageOptions={[5]}\r\n+                        checkboxSelection\r\n \r\n-                />\r\n-            </Box>\r\n+                    />\r\n+                </Box>\r\n+            ) : (\r\n+                router.push('/')\r\n+            )}\r\n         </>\r\n     )\r\n }\r\n \r\n"
                },
                {
                    "date": 1658732500450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,26 +61,21 @@\n         { field: 'email', headerName: 'Email', flex: 1 },\r\n \r\n     ]\r\n     return (\r\n-        \r\n         <>\r\n-            {status? (\r\n-                <Box sx={{\r\n-                    height: 371, width: '100%'\r\n-                }}>\r\n-                    <DataGrid\r\n-                        rows={rows}\r\n-                        columns={cols}\r\n-                        pageSize={5}\r\n-                        rowsPerPageOptions={[5]}\r\n-                        checkboxSelection\r\n+            <Box sx={{\r\n+                height: 371, width: '100%'\r\n+            }}>\r\n+                <DataGrid\r\n+                    rows={rows}\r\n+                    columns={cols}\r\n+                    pageSize={5}\r\n+                    rowsPerPageOptions={[5]}\r\n+                    checkboxSelection\r\n \r\n-                    />\r\n-                </Box>\r\n-            ) : (\r\n-                router.push('/')\r\n-            )}\r\n+                />\r\n+            </Box>\r\n         </>\r\n     )\r\n }\r\n \r\n"
                },
                {
                    "date": 1658732586884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { useEffect } from 'react';\r\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n-import {useAppContext} from '../../context/AppContext';\r\n+import { useAppContext } from '../../context/AppContext';\r\n import { useRouter } from 'next/router';\r\n \r\n // interface userList {\r\n //     is: number,\r\n@@ -21,10 +21,10 @@\n \r\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n     // console.log('path', router.pathname)\r\n-    \r\n \r\n+\r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n     //     const data = await response.json()\r\n     //     setUsers(data)\r\n@@ -48,9 +48,15 @@\n     const tmp = rows.find(ele => {\r\n         return ele.isSignIn === true\r\n     })\r\n     console.log('tmp', tmp);\r\n-    \r\n+\r\n+    useEffect(() => {\r\n+        if (status) {\r\n+            router.push('/')\r\n+        }}\r\n+    , [])\r\n+\r\n     if (!status) {\r\n         // router.push('./sign-in')\r\n         console.log('not sign in')\r\n     }\r\n"
                },
                {
                    "date": 1658732595853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     })\r\n     console.log('tmp', tmp);\r\n \r\n     useEffect(() => {\r\n-        if (status) {\r\n+        if (!status) {\r\n             router.push('/')\r\n         }}\r\n     , [])\r\n \r\n"
                },
                {
                    "date": 1658732876721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,14 +49,8 @@\n         return ele.isSignIn === true\r\n     })\r\n     console.log('tmp', tmp);\r\n \r\n-    useEffect(() => {\r\n-        if (!status) {\r\n-            router.push('/')\r\n-        }}\r\n-    , [])\r\n-\r\n     if (!status) {\r\n         // router.push('./sign-in')\r\n         console.log('not sign in')\r\n     }\r\n"
                },
                {
                    "date": 1658740497486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n         return ele.isSignIn === true\r\n     })\r\n     console.log('tmp', tmp);\r\n \r\n-    if (!status) {\r\n+    if (status === 'false') {\r\n         // router.push('./sign-in')\r\n         console.log('not sign in')\r\n     }\r\n     const cols: GridColDef[] = [\r\n"
                },
                {
                    "date": 1658740540855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,12 +44,12 @@\n     //   }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n     console.log('/users', users);\r\n-    const tmp = rows.find(ele => {\r\n-        return ele.isSignIn === true\r\n-    })\r\n-    console.log('tmp', tmp);\r\n+    // const tmp = rows.find(ele => {\r\n+    //     return ele.isSignIn === true\r\n+    // })\r\n+    // console.log('tmp', tmp);\r\n \r\n     if (status === 'false') {\r\n         // router.push('./sign-in')\r\n         console.log('not sign in')\r\n"
                },
                {
                    "date": 1658741056399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     // })\r\n     // console.log('tmp', tmp);\r\n \r\n     if (status === 'false') {\r\n-        // router.push('./sign-in')\r\n+        router.push('./sign-in')\r\n         console.log('not sign in')\r\n     }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n"
                },
                {
                    "date": 1658741101710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n     console.log('/users', users);\r\n     // const tmp = rows.find(ele => {\r\n     //     return ele.isSignIn === true\r\n     // })\r\n-    // console.log('tmp', tmp);\r\n+    console.log('status', status);\r\n \r\n     if (status === 'false') {\r\n         router.push('./sign-in')\r\n         console.log('not sign in')\r\n"
                },
                {
                    "date": 1658741137213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     // })\r\n     console.log('status', status);\r\n \r\n     if (status === 'false') {\r\n-        router.push('./sign-in')\r\n+        router.push('/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n"
                },
                {
                    "date": 1658741183109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     // })\r\n     console.log('status', status);\r\n \r\n     if (status === 'false') {\r\n-        router.push('/sign-in')\r\n+        router.push('./sign-in')\r\n         console.log('not sign in')\r\n     }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n"
                },
                {
                    "date": 1658741312708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     // })\r\n     console.log('status', status);\r\n \r\n     if (status === 'false') {\r\n-        router.push('./sign-in')\r\n+        router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n"
                },
                {
                    "date": 1658742129605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n         { field: 'email', headerName: 'Email', flex: 1 },\r\n \r\n     ]\r\n+    setTimeout(() => {  console.log(\"World!\"); }, 2000);\r\n     return (\r\n         <>\r\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n"
                },
                {
                    "date": 1658742229130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,9 @@\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n         { field: 'email', headerName: 'Email', flex: 1 },\r\n \r\n     ]\r\n-    setTimeout(() => {  console.log(\"World!\"); }, 2000);\r\n-    return (\r\n+    setTimeout(() => {  return (\r\n         <>\r\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n             }}>\r\n@@ -76,9 +75,9 @@\n \r\n                 />\r\n             </Box>\r\n         </>\r\n-    )\r\n+    )}, 2000)\r\n }\r\n \r\n // userPage.getLayout = function getLayout(page) {\r\n //     return (\r\n"
                },
                {
                    "date": 1658742293314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,24 +60,27 @@\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n         { field: 'email', headerName: 'Email', flex: 1 },\r\n \r\n     ]\r\n-    setTimeout(() => {  return (\r\n-        <>\r\n-            <Box sx={{\r\n-                height: 371, width: '100%'\r\n-            }}>\r\n-                <DataGrid\r\n-                    rows={rows}\r\n-                    columns={cols}\r\n-                    pageSize={5}\r\n-                    rowsPerPageOptions={[5]}\r\n-                    checkboxSelection\r\n \r\n-                />\r\n-            </Box>\r\n-        </>\r\n-    )}, 2000)\r\n+    return (\r\n+        setTimeout(() => {  \r\n+            <>\r\n+                <Box sx={{\r\n+                    height: 371, width: '100%'\r\n+                }}>\r\n+                    <DataGrid\r\n+                        rows={rows}\r\n+                        columns={cols}\r\n+                        pageSize={5}\r\n+                        rowsPerPageOptions={[5]}\r\n+                        checkboxSelection\r\n+        \r\n+                    />\r\n+                </Box>\r\n+            </> \r\n+        }, 2000)\r\n+    )\r\n }\r\n \r\n // userPage.getLayout = function getLayout(page) {\r\n //     return (\r\n"
                },
                {
                    "date": 1658742303877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,26 +60,24 @@\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n         { field: 'email', headerName: 'Email', flex: 1 },\r\n \r\n     ]\r\n+    setTimeout(() => {  console.log(\"World!\"); }, 2000);\r\n+    return (\r\n+        <>\r\n+            <Box sx={{\r\n+                height: 371, width: '100%'\r\n+            }}>\r\n+                <DataGrid\r\n+                    rows={rows}\r\n+                    columns={cols}\r\n+                    pageSize={5}\r\n+                    rowsPerPageOptions={[5]}\r\n+                    checkboxSelection\r\n \r\n-    return (\r\n-        setTimeout(() => {  \r\n-            <>\r\n-                <Box sx={{\r\n-                    height: 371, width: '100%'\r\n-                }}>\r\n-                    <DataGrid\r\n-                        rows={rows}\r\n-                        columns={cols}\r\n-                        pageSize={5}\r\n-                        rowsPerPageOptions={[5]}\r\n-                        checkboxSelection\r\n-        \r\n-                    />\r\n-                </Box>\r\n-            </> \r\n-        }, 2000)\r\n+                />\r\n+            </Box>\r\n+        </>\r\n     )\r\n }\r\n \r\n // userPage.getLayout = function getLayout(page) {\r\n"
                },
                {
                    "date": 1658742440180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,20 +49,20 @@\n     //     return ele.isSignIn === true\r\n     // })\r\n     console.log('status', status);\r\n \r\n-    if (status === 'false') {\r\n-        router.push('/user/sign-in')\r\n-        console.log('not sign in')\r\n-    }\r\n+    \r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n         { field: 'email', headerName: 'Email', flex: 1 },\r\n \r\n     ]\r\n-    setTimeout(() => {  console.log(\"World!\"); }, 2000);\r\n+    setTimeout(() => {  if (status === 'false') {\r\n+        router.push('/user/sign-in')\r\n+        console.log('not sign in')\r\n+    }}, 2000);\r\n     return (\r\n         <>\r\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n"
                },
                {
                    "date": 1658742491172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,20 +49,19 @@\n     //     return ele.isSignIn === true\r\n     // })\r\n     console.log('status', status);\r\n \r\n-    \r\n+    if (status === 'false') {\r\n+        router.push('/user/sign-in')\r\n+        console.log('not sign in')\r\n+    }\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n         { field: 'email', headerName: 'Email', flex: 1 },\r\n \r\n     ]\r\n-    setTimeout(() => {  if (status === 'false') {\r\n-        router.push('/user/sign-in')\r\n-        console.log('not sign in')\r\n-    }}, 2000);\r\n     return (\r\n         <>\r\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n"
                },
                {
                    "date": 1658742506085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,15 +53,16 @@\n     if (status === 'false') {\r\n         router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n+    else {\r\n     const cols: GridColDef[] = [\r\n         { field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n         { field: 'email', headerName: 'Email', flex: 1 },\r\n \r\n-    ]\r\n+    ]}\r\n     return (\r\n         <>\r\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n"
                },
                {
                    "date": 1658742615608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n     //   },)\r\n \r\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n+    const cols: GridColDef[] = []\r\n     // console.log('path', router.pathname)\r\n \r\n \r\n     // const fetchUsers = async () => {\r\n@@ -54,15 +55,13 @@\n         router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n     else {\r\n-    const cols: GridColDef[] = [\r\n-        { field: 'id', headerName: 'ID', width: 10 },\r\n+        cols.push({ field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n-        { field: 'email', headerName: 'Email', flex: 1 },\r\n-\r\n-    ]}\r\n+        { field: 'email', headerName: 'Email', flex: 1 },)\r\n+    }\r\n     return (\r\n         <>\r\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n"
                },
                {
                    "date": 1658742809270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,17 +44,17 @@\n     //     fetchData()\r\n     //   }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n-    console.log('/users', users);\r\n+    // console.log('/users', users);\r\n     // const tmp = rows.find(ele => {\r\n     //     return ele.isSignIn === true\r\n     // })\r\n-    console.log('status', status);\r\n+    // console.log('status', status);\r\n \r\n     if (status === 'false') {\r\n         router.push('/user/sign-in')\r\n-        console.log('not sign in')\r\n+        // console.log('not sign in')\r\n     }\r\n     else {\r\n         cols.push({ field: 'id', headerName: 'ID', width: 10 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n"
                },
                {
                    "date": 1658797684259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n         router.push('/user/sign-in')\r\n         // console.log('not sign in')\r\n     }\r\n     else {\r\n-        cols.push({ field: 'id', headerName: 'ID', width: 10 },\r\n+        cols.push({ field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n         { field: 'email', headerName: 'Email', flex: 1 },)\r\n     }\r\n"
                },
                {
                    "date": 1658798141385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,10 @@\n     else {\r\n         cols.push({ field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n-        { field: 'email', headerName: 'Email', flex: 1 },)\r\n+        { field: 'email', headerName: 'Email', flex: 1 },\r\n+        { field: 'Actions', headerName: 'actions', flex: 1 },)\r\n     }\r\n     return (\r\n         <>\r\n             <Box sx={{\r\n"
                },
                {
                    "date": 1658798159996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,10 @@\n     // })\r\n     // console.log('status', status);\r\n \r\n     if (status === 'false') {\r\n-        router.push('/user/sign-in')\r\n-        // console.log('not sign in')\r\n+        // router.push('/user/sign-in')\r\n+        console.log('not sign in')\r\n     }\r\n     else {\r\n         cols.push({ field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n"
                },
                {
                    "date": 1658798179029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n         cols.push({ field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n         { field: 'email', headerName: 'Email', flex: 1 },\r\n-        { field: 'Actions', headerName: 'actions', flex: 1 },)\r\n+        { field: 'actions', headerName: 'Actions', flex: 1 },)\r\n     }\r\n     return (\r\n         <>\r\n             <Box sx={{\r\n"
                },
                {
                    "date": 1658798207670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,15 +54,15 @@\n     if (status === 'false') {\r\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n-    else {\r\n+    \r\n         cols.push({ field: 'id', headerName: 'ID', flex: 1 },\r\n         { field: 'firstName', headerName: 'First name', flex: 1 },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n         { field: 'email', headerName: 'Email', flex: 1 },\r\n         { field: 'actions', headerName: 'Actions', flex: 1 },)\r\n-    }\r\n+    \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n"
                },
                {
                    "date": 1658802889288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import _ from 'lodash'\r\n-import { useEffect } from 'react';\r\n+import { useEffect, useState } from 'react';\r\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n import { useAppContext } from '../../context/AppContext';\r\n@@ -44,8 +44,9 @@\n     //     fetchData()\r\n     //   }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n+    const [rowSelectedId, setRowSelectedId] = useState()\r\n     // console.log('/users', users);\r\n     // const tmp = rows.find(ele => {\r\n     //     return ele.isSignIn === true\r\n     // })\r\n@@ -72,9 +73,9 @@\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n-\r\n+                    editMode=\"row\"\r\n                 />\r\n             </Box>\r\n         </>\r\n     )\r\n"
                },
                {
                    "date": 1658802924498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,13 +56,13 @@\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n     \r\n-        cols.push({ field: 'id', headerName: 'ID', flex: 1 },\r\n-        { field: 'firstName', headerName: 'First name', flex: 1 },\r\n-        { field: 'lastName', headerName: 'Last name', flex: 1 },\r\n-        { field: 'email', headerName: 'Email', flex: 1 },\r\n-        { field: 'actions', headerName: 'Actions', flex: 1 },)\r\n+        cols.push({ field: 'id', headerName: 'ID', flex: 1, editable: true },\r\n+        { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n+        { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n+        { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n+        { field: 'actions', headerName: 'Actions', flex: 1 ,editable: true},)\r\n     \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n"
                },
                {
                    "date": 1658803052078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,13 +56,13 @@\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n     \r\n-        cols.push({ field: 'id', headerName: 'ID', flex: 1, editable: true },\r\n-        { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n-        { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n-        { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n-        { field: 'actions', headerName: 'Actions', flex: 1 ,editable: true},)\r\n+    cols.push({ field: 'id', headerName: 'ID', flex: 1, editable: true },\r\n+    { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n+    { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n+    { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n+    { field: 'actions', headerName: 'Actions', flex: 1 ,editable: true},)\r\n     \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n"
                },
                {
                    "date": 1658806740761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,28 @@\n import { useEffect, useState } from 'react';\r\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box } from '@mui/material';\r\n+import Button from '@mui/material/Button';\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\n+import SaveIcon from '@mui/icons-material/Save';\r\n+import CancelIcon from '@mui/icons-material/Close';\r\n+import {\r\n+    GridRowsProp,\r\n+    GridRowModesModel,\r\n+    GridRowModes,\r\n+    DataGridPro,\r\n+    GridColumns,\r\n+    GridRowParams,\r\n+    MuiEvent,\r\n+    GridToolbarContainer,\r\n+    GridActionsCellItem,\r\n+    GridEventListener,\r\n+    GridRowId,\r\n+    GridRowModel,\r\n+} from '@mui/x-data-grid-pro';\r\n import { useAppContext } from '../../context/AppContext';\r\n import { useRouter } from 'next/router';\r\n \r\n // interface userList {\r\n@@ -12,20 +32,87 @@\n //     lastName: string,\r\n //     email: string,\r\n //     password: string\r\n // }\r\n+interface EditToolbarProps {\r\n+    setRows: (newRows: (oldRows: GridRowsProp) => GridRowsProp) => void;\r\n+    setRowModesModel: (\r\n+        newModel: (oldModel: GridRowModesModel) => GridRowModesModel,\r\n+    ) => void;\r\n+}\r\n \r\n+function EditToolbar(props: EditToolbarProps) {\r\n+    const { setRows, setRowModesModel } = props;\r\n+\r\n+    const handleClick = () => {\r\n+        const id = Date.now();\r\n+        setRows((oldRows) => [...oldRows, { id, name: '', age: '', isNew: true }]);\r\n+        setRowModesModel((oldModel) => ({\r\n+            ...oldModel,\r\n+            [id]: { mode: GridRowModes.Edit, fieldToFocus: 'name' },\r\n+        }));\r\n+    };\r\n+\r\n+    return (\r\n+        <GridToolbarContainer>\r\n+            <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\r\n+                Add record\r\n+            </Button>\r\n+        </GridToolbarContainer>\r\n+    );\r\n+}\r\n+\r\n export default function userPage() {\r\n     // useEffect(() => {\r\n     //     document.title = 'User'\r\n     //   },)\r\n \r\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n-    const cols: GridColDef[] = []\r\n+    \r\n     // console.log('path', router.pathname)\r\n+    const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({})\r\n \r\n+    const handleRowEditStart = (\r\n+        params: GridRowParams,\r\n+        event: MuiEvent<React.SyntheticEvent>,\r\n+    ) => {\r\n+        event.defaultMuiPrevented = true;\r\n+    };\r\n \r\n+    const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\r\n+        event.defaultMuiPrevented = true;\r\n+    };\r\n+\r\n+    const handleEditClick = (id: GridRowId) => () => {\r\n+        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n+    };\r\n+\r\n+    const handleSaveClick = (id: GridRowId) => () => {\r\n+        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n+    };\r\n+\r\n+    const handleDeleteClick = (id: GridRowId) => () => {\r\n+        setUsers(rows.filter((row) => row.id !== id));\r\n+    };\r\n+\r\n+    const handleCancelClick = (id: GridRowId) => () => {\r\n+        setRowModesModel({\r\n+            ...rowModesModel,\r\n+            [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n+        });\r\n+\r\n+        const editedRow = rows.find((row) => row.id === id);\r\n+        if (editedRow!.isNew) {\r\n+            setUsers(rows.filter((row) => row.id !== id));\r\n+        }\r\n+    };\r\n+\r\n+    const processRowUpdate = (newRow: GridRowModel) => {\r\n+        const updatedRow = { ...newRow, isNew: false };\r\n+        setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+        return updatedRow;\r\n+    };\r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n     //     const data = await response.json()\r\n     //     setUsers(data)\r\n@@ -55,27 +142,81 @@\n     if (status === 'false') {\r\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n-    \r\n-    cols.push({ field: 'id', headerName: 'ID', flex: 1, editable: true },\r\n-    { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n-    { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n-    { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n-    { field: 'actions', headerName: 'Actions', flex: 1 ,editable: true},)\r\n-    \r\n+\r\n+    const cols: GridColumns = [{ field: 'id', headerName: 'ID', flex: 1, editable: true },\r\n+        { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n+        { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n+        { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n+        {\r\n+            field: 'actions',\r\n+            type: 'actions',\r\n+            headerName: 'Actions',\r\n+            width: 100,\r\n+            cellClassName: 'actions',\r\n+            getActions: ({ id }) => {\r\n+                const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n+\r\n+                if (isInEditMode) {\r\n+                    return [\r\n+                        <GridActionsCellItem\r\n+                            icon={<SaveIcon />}\r\n+                            label=\"Save\"\r\n+                            onClick={handleSaveClick(id)}\r\n+                        />,\r\n+                        <GridActionsCellItem\r\n+                            icon={<CancelIcon />}\r\n+                            label=\"Cancel\"\r\n+                            className=\"textPrimary\"\r\n+                            onClick={handleCancelClick(id)}\r\n+                            color=\"inherit\"\r\n+                        />,\r\n+                    ];\r\n+                }\r\n+\r\n+                return [\r\n+                    <GridActionsCellItem\r\n+                        icon={<EditIcon />}\r\n+                        label=\"Edit\"\r\n+                        className=\"textPrimary\"\r\n+                        onClick={handleEditClick(id)}\r\n+                        color=\"inherit\"\r\n+                    />,\r\n+                    <GridActionsCellItem\r\n+                        icon={<DeleteIcon />}\r\n+                        label=\"Delete\"\r\n+                        onClick={handleDeleteClick(id)}\r\n+                        color=\"inherit\"\r\n+                    />,\r\n+                ];\r\n+            },\r\n+        },\r\n+    ]\r\n+\r\n     return (\r\n         <>\r\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n             }}>\r\n-                <DataGrid\r\n+                <DataGridPro\r\n                     rows={rows}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n+                    rowModesModel={rowModesModel}\r\n+                    onRowEditStart={handleRowEditStart}\r\n+                    onRowEditStop={handleRowEditStop}\r\n+                    processRowUpdate={processRowUpdate}\r\n+                    components={{\r\n+                        Toolbar: EditToolbar,\r\n+                    }}\r\n+                    componentsProps={{\r\n+                        toolbar: { setUsers, setRowModesModel },\r\n+                    }}\r\n+                    experimentalFeatures={{ newEditingApi: true }}\r\n                 />\r\n             </Box>\r\n         </>\r\n     )\r\n"
                },
                {
                    "date": 1658806857828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n         <>\r\n             <Box sx={{\r\n                 height: 371, width: '100%'\r\n             }}>\r\n-                <DataGridPro\r\n+                <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n"
                },
                {
                    "date": 1658806904455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n import {\r\n     GridRowsProp,\r\n     GridRowModesModel,\r\n     GridRowModes,\r\n-    DataGridPro,\r\n     GridColumns,\r\n     GridRowParams,\r\n     MuiEvent,\r\n     GridToolbarContainer,\r\n"
                },
                {
                    "date": 1658807049469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     const { setRows, setRowModesModel } = props;\r\n \r\n     const handleClick = () => {\r\n         const id = Date.now();\r\n-        setRows((oldRows) => [...oldRows, { id, name: '', age: '', isNew: true }]);\r\n+        setRows((oldRows) => [...oldRows, { id, firstName: '', lastName: '', email: '', isNew: true }]);\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [id]: { mode: GridRowModes.Edit, fieldToFocus: 'name' },\r\n         }));\r\n"
                },
                {
                    "date": 1658807195584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n-                height: 371, width: '100%'\r\n+                height: 400, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658807203262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n-                height: 400, width: '100%'\r\n+                height: 500, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658807212647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n-                height: 500, width: '100%'\r\n+                height: 471, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658807219120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n-                height: 471, width: '100%'\r\n+                height: 400, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658807236000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n-                height: 400, width: '100%'\r\n+                height: 420, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658807244965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n-                height: 420, width: '100%'\r\n+                height: 415, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658807254213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n-                height: 415, width: '100%'\r\n+                height: 411, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658807720308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,10 +204,10 @@\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     rowModesModel={rowModesModel}\r\n-                    onRowEditStart={handleRowEditStart}\r\n-                    onRowEditStop={handleRowEditStop}\r\n+                    // onRowEditStart={handleRowEditStart}\r\n+                    // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n                     components={{\r\n                         Toolbar: EditToolbar,\r\n                     }}\r\n"
                },
                {
                    "date": 1658808349862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import _ from 'lodash'\r\n import { useEffect, useState } from 'react';\r\n import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n-import { Box } from '@mui/material';\r\n+import { Box, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n import DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\n@@ -142,9 +142,9 @@\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n-    const cols: GridColumns = [{ field: 'id', headerName: 'ID', flex: 1, editable: true },\r\n+    const cols: GridColDef = [{ field: 'id', headerName: 'ID', flex: 1, editable: true },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n         {\r\n@@ -171,24 +171,34 @@\n                             color=\"inherit\"\r\n                         />,\r\n                     ];\r\n                 }\r\n+                return (\r\n+                    \r\n+                        <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                            <IconButton aria-label=\"edit\" size=\"small\">\r\n+                                <EditIcon fontSize=\"inherit\" onClick={handleEditClick(id)}/>\r\n+                            </IconButton>\r\n+                            <IconButton aria-label=\"delete\" size=\"small\">\r\n+                                <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(id)}/>\r\n+                            </IconButton>\r\n \r\n-                return [\r\n-                    <GridActionsCellItem\r\n-                        icon={<EditIcon />}\r\n-                        label=\"Edit\"\r\n-                        className=\"textPrimary\"\r\n-                        onClick={handleEditClick(id)}\r\n-                        color=\"inherit\"\r\n-                    />,\r\n-                    <GridActionsCellItem\r\n-                        icon={<DeleteIcon />}\r\n-                        label=\"Delete\"\r\n-                        onClick={handleDeleteClick(id)}\r\n-                        color=\"inherit\"\r\n-                    />,\r\n-                ];\r\n+                            {/* <GridActionsCellItem\r\n+                                icon={<EditIcon />}\r\n+                                label=\"Edit\"\r\n+                                className=\"textPrimary\"\r\n+                                onClick={handleEditClick(id)}\r\n+                                color=\"inherit\"\r\n+                            />,\r\n+                            <GridActionsCellItem\r\n+                                icon={<DeleteIcon />}\r\n+                                label=\"Delete\"\r\n+                                onClick={handleDeleteClick(id)}\r\n+                                color=\"inherit\"\r\n+                            />, */}\r\n+                        </Stack>\r\n+                    \r\n+                )\r\n             },\r\n         },\r\n     ]\r\n \r\n"
                },
                {
                    "date": 1658808468992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,48 +156,54 @@\n             getActions: ({ id }) => {\r\n                 const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n \r\n                 if (isInEditMode) {\r\n-                    return [\r\n-                        <GridActionsCellItem\r\n-                            icon={<SaveIcon />}\r\n-                            label=\"Save\"\r\n-                            onClick={handleSaveClick(id)}\r\n-                        />,\r\n-                        <GridActionsCellItem\r\n-                            icon={<CancelIcon />}\r\n-                            label=\"Cancel\"\r\n-                            className=\"textPrimary\"\r\n-                            onClick={handleCancelClick(id)}\r\n-                            color=\"inherit\"\r\n-                        />,\r\n-                    ];\r\n-                }\r\n-                return (\r\n-                    \r\n+                    return (\r\n                         <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                            <IconButton aria-label=\"edit\" size=\"small\">\r\n-                                <EditIcon fontSize=\"inherit\" onClick={handleEditClick(id)}/>\r\n+                            <IconButton aria-label=\"save\" size=\"small\">\r\n+                                <EditIcon fontSize=\"inherit\" onClick={handleSaveClick(id)}/>\r\n                             </IconButton>\r\n-                            <IconButton aria-label=\"delete\" size=\"small\">\r\n-                                <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(id)}/>\r\n+                            <IconButton aria-label=\"cancel\" size=\"small\">\r\n+                                <DeleteIcon fontSize=\"inherit\" onClick={handleCancelClick(id)}/>\r\n                             </IconButton>\r\n+                        </Stack>\r\n+                        // <GridActionsCellItem\r\n+                        //     icon={<SaveIcon />}\r\n+                        //     label=\"Save\"\r\n+                        //     onClick={handleSaveClick(id)}\r\n+                        // />,\r\n+                        // <GridActionsCellItem\r\n+                        //     icon={<CancelIcon />}\r\n+                        //     label=\"Cancel\"\r\n+                        //     className=\"textPrimary\"\r\n+                        //     onClick={handleCancelClick(id)}\r\n+                        //     color=\"inherit\"\r\n+                        // />,\r\n+                    )\r\n+                }\r\n+                return (\r\n+                    <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                        <IconButton aria-label=\"edit\" size=\"small\">\r\n+                            <EditIcon fontSize=\"inherit\" onClick={handleEditClick(id)}/>\r\n+                        </IconButton>\r\n+                        <IconButton aria-label=\"delete\" size=\"small\">\r\n+                            <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(id)}/>\r\n+                        </IconButton>\r\n \r\n-                            {/* <GridActionsCellItem\r\n-                                icon={<EditIcon />}\r\n-                                label=\"Edit\"\r\n-                                className=\"textPrimary\"\r\n-                                onClick={handleEditClick(id)}\r\n-                                color=\"inherit\"\r\n-                            />,\r\n-                            <GridActionsCellItem\r\n-                                icon={<DeleteIcon />}\r\n-                                label=\"Delete\"\r\n-                                onClick={handleDeleteClick(id)}\r\n-                                color=\"inherit\"\r\n-                            />, */}\r\n-                        </Stack>\r\n-                    \r\n+                        {/* <GridActionsCellItem\r\n+                            icon={<EditIcon />}\r\n+                            label=\"Edit\"\r\n+                            className=\"textPrimary\"\r\n+                            onClick={handleEditClick(id)}\r\n+                            color=\"inherit\"\r\n+                        />,\r\n+                        <GridActionsCellItem\r\n+                            icon={<DeleteIcon />}\r\n+                            label=\"Delete\"\r\n+                            onClick={handleDeleteClick(id)}\r\n+                            color=\"inherit\"\r\n+                        />, */}\r\n+                    </Stack>\r\n                 )\r\n             },\r\n         },\r\n     ]\r\n"
                },
                {
                    "date": 1658815614329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,28 @@\n import _ from 'lodash'\r\n import { useEffect, useState } from 'react';\r\n-import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n+import { DataGrid, GridColDef, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n import DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\n import SaveIcon from '@mui/icons-material/Save';\r\n import CancelIcon from '@mui/icons-material/Close';\r\n-import {\r\n-    GridRowsProp,\r\n-    GridRowModesModel,\r\n-    GridRowModes,\r\n-    GridColumns,\r\n-    GridRowParams,\r\n-    MuiEvent,\r\n-    GridToolbarContainer,\r\n-    GridActionsCellItem,\r\n-    GridEventListener,\r\n-    GridRowId,\r\n-    GridRowModel,\r\n-} from '@mui/x-data-grid-pro';\r\n+// import {\r\n+//     GridRowsProp,\r\n+//     GridRowModesModel,\r\n+//     GridRowModes,\r\n+//     GridColumns,\r\n+//     GridRowParams,\r\n+//     MuiEvent,\r\n+//     GridToolbarContainer,\r\n+//     GridActionsCellItem,\r\n+//     GridEventListener,\r\n+//     GridRowId,\r\n+//     GridRowModel,\r\n+// } from '@mui/x-data-grid-pro';\r\n import { useAppContext } from '../../context/AppContext';\r\n import { useRouter } from 'next/router';\r\n \r\n // interface userList {\r\n@@ -32,11 +32,11 @@\n //     email: string,\r\n //     password: string\r\n // }\r\n interface EditToolbarProps {\r\n-    setRows: (newRows: (oldRows: GridRowsProp) => GridRowsProp) => void;\r\n+    setRows: (newRows: (oldRows) => GridRowsProp) => void;\r\n     setRowModesModel: (\r\n-        newModel: (oldModel: GridRowModesModel) => GridRowModesModel,\r\n+        newModel: (oldModel) => GridRowModesModel,\r\n     ) => void;\r\n }\r\n \r\n function EditToolbar(props: EditToolbarProps) {\r\n@@ -51,13 +51,13 @@\n         }));\r\n     };\r\n \r\n     return (\r\n-        <GridToolbarContainer>\r\n+        <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n             <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\r\n                 Add record\r\n             </Button>\r\n-        </GridToolbarContainer>\r\n+        </Stack>\r\n     );\r\n }\r\n \r\n export default function userPage() {\r\n@@ -71,31 +71,31 @@\n     // console.log('path', router.pathname)\r\n     const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({})\r\n \r\n     const handleRowEditStart = (\r\n-        params: GridRowParams,\r\n-        event: MuiEvent<React.SyntheticEvent>,\r\n+        params,\r\n+        event,\r\n     ) => {\r\n         event.defaultMuiPrevented = true;\r\n     };\r\n \r\n-    const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\r\n+    const handleRowEditStop = (params, event) => {\r\n         event.defaultMuiPrevented = true;\r\n     };\r\n \r\n-    const handleEditClick = (id: GridRowId) => () => {\r\n+    const handleEditClick = (id) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n     };\r\n \r\n-    const handleSaveClick = (id: GridRowId) => () => {\r\n+    const handleSaveClick = (id) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n     };\r\n \r\n-    const handleDeleteClick = (id: GridRowId) => () => {\r\n+    const handleDeleteClick = (id) => () => {\r\n         setUsers(rows.filter((row) => row.id !== id));\r\n     };\r\n \r\n-    const handleCancelClick = (id: GridRowId) => () => {\r\n+    const handleCancelClick = (id) => () => {\r\n         setRowModesModel({\r\n             ...rowModesModel,\r\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n         });\r\n@@ -105,9 +105,9 @@\n             setUsers(rows.filter((row) => row.id !== id));\r\n         }\r\n     };\r\n \r\n-    const processRowUpdate = (newRow: GridRowModel) => {\r\n+    const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow, isNew: false };\r\n         setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n         return updatedRow;\r\n     };\r\n@@ -142,9 +142,9 @@\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n-    const cols: GridColDef = [{ field: 'id', headerName: 'ID', flex: 1, editable: true },\r\n+    const cols: GridColDef[] = [{ field: 'id', headerName: 'ID', flex: 1, editable: true },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n         {\r\n@@ -152,11 +152,10 @@\n             type: 'actions',\r\n             headerName: 'Actions',\r\n             width: 100,\r\n             cellClassName: 'actions',\r\n-            getActions: ({ id }) => {\r\n+            renderCell: ({ id }) => {\r\n                 const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n-\r\n                 if (isInEditMode) {\r\n                     return (\r\n                         <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                             <IconButton aria-label=\"save\" size=\"small\">\r\n@@ -230,8 +229,9 @@\n                     componentsProps={{\r\n                         toolbar: { setUsers, setRowModesModel },\r\n                     }}\r\n                     experimentalFeatures={{ newEditingApi: true }}\r\n+                    disableSelectionOnClick\r\n                 />\r\n             </Box>\r\n         </>\r\n     )\r\n"
                },
                {
                    "date": 1658815833989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n-                height: 411, width: '100%'\r\n+                height: 413, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658815842857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n-                height: 413, width: '100%'\r\n+                height: 410, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658815848626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n-                height: 410, width: '100%'\r\n+                height: 415, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658815854299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n-                height: 415, width: '100%'\r\n+                height: 405, width: '100%'\r\n             }}>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n"
                },
                {
                    "date": 1658816247112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,8 +153,10 @@\n             headerName: 'Actions',\r\n             width: 100,\r\n             cellClassName: 'actions',\r\n             renderCell: ({ id }) => {\r\n+                console.log('rowId:', id);\r\n+                \r\n                 const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n                 if (isInEditMode) {\r\n                     return (\r\n                         <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n"
                },
                {
                    "date": 1658816349627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n             headerName: 'Actions',\r\n             width: 100,\r\n             cellClassName: 'actions',\r\n             renderCell: ({ id }) => {\r\n-                console.log('rowId:', id);\r\n+                console.log('rowId:', users[id]);\r\n                 \r\n                 const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n                 if (isInEditMode) {\r\n                     return (\r\n"
                },
                {
                    "date": 1658816428461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n             cellClassName: 'actions',\r\n             renderCell: ({ id }) => {\r\n                 console.log('rowId:', users[id]);\r\n                 \r\n-                const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n+                const isInEditMode = users[id]?.isEdit === GridRowModes.Edit;\r\n                 if (isInEditMode) {\r\n                     return (\r\n                         <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                             <IconButton aria-label=\"save\" size=\"small\">\r\n"
                },
                {
                    "date": 1658816463974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,10 @@\n         event.defaultMuiPrevented = true;\r\n     };\r\n \r\n     const handleEditClick = (id) => () => {\r\n+        console.log('edit ID:', id);\r\n+        \r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n"
                },
                {
                    "date": 1658816490449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n             headerName: 'Actions',\r\n             width: 100,\r\n             cellClassName: 'actions',\r\n             renderCell: ({ id }) => {\r\n-                console.log('rowId:', users[id]);\r\n+                // console.log('rowId:', users[id]);\r\n                 \r\n                 const isInEditMode = users[id]?.isEdit === GridRowModes.Edit;\r\n                 if (isInEditMode) {\r\n                     return (\r\n"
                },
                {
                    "date": 1658816555550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,8 +158,10 @@\n             renderCell: ({ id }) => {\r\n                 // console.log('rowId:', users[id]);\r\n                 \r\n                 const isInEditMode = users[id]?.isEdit === GridRowModes.Edit;\r\n+                console.log('isInEditMode', isInEditMode);\r\n+                \r\n                 if (isInEditMode) {\r\n                     return (\r\n                         <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                             <IconButton aria-label=\"save\" size=\"small\">\r\n"
                },
                {
                    "date": 1658816627173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n             cellClassName: 'actions',\r\n             renderCell: ({ id }) => {\r\n                 // console.log('rowId:', users[id]);\r\n                 \r\n-                const isInEditMode = users[id]?.isEdit === GridRowModes.Edit;\r\n+                const isInEditMode = users[id]?.isEdit;\r\n                 console.log('isInEditMode', isInEditMode);\r\n                 \r\n                 if (isInEditMode) {\r\n                     return (\r\n"
                },
                {
                    "date": 1658816640552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n             cellClassName: 'actions',\r\n             renderCell: ({ id }) => {\r\n                 // console.log('rowId:', users[id]);\r\n                 \r\n-                const isInEditMode = users[id]?.isEdit;\r\n+                const isInEditMode = users[id]?.isEdit === true;\r\n                 console.log('isInEditMode', isInEditMode);\r\n                 \r\n                 if (isInEditMode) {\r\n                     return (\r\n"
                },
                {
                    "date": 1658816696882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n \r\n     const handleEditClick = (id) => () => {\r\n         console.log('edit ID:', id);\r\n         \r\n-        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n+        setRowModesModel({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n"
                },
                {
                    "date": 1658816922084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,14 +68,11 @@\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n     \r\n     // console.log('path', router.pathname)\r\n-    const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({})\r\n+    const [rowID, setRowID] = useState(-1)\r\n \r\n-    const handleRowEditStart = (\r\n-        params,\r\n-        event,\r\n-    ) => {\r\n+    const handleRowEditStart = (params, event) => {\r\n         event.defaultMuiPrevented = true;\r\n     };\r\n \r\n     const handleRowEditStop = (params, event) => {\r\n@@ -84,9 +81,9 @@\n \r\n     const handleEditClick = (id) => () => {\r\n         console.log('edit ID:', id);\r\n         \r\n-        setRowModesModel({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n+        setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n@@ -160,9 +157,9 @@\n                 \r\n                 const isInEditMode = users[id]?.isEdit === true;\r\n                 console.log('isInEditMode', isInEditMode);\r\n                 \r\n-                if (isInEditMode) {\r\n+                if (true) {\r\n                     return (\r\n                         <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                             <IconButton aria-label=\"save\" size=\"small\">\r\n                                 <EditIcon fontSize=\"inherit\" onClick={handleSaveClick(id)}/>\r\n"
                },
                {
                    "date": 1658817046585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,18 +85,18 @@\n         setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n-        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n+        setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n     };\r\n \r\n     const handleDeleteClick = (id) => () => {\r\n         setUsers(rows.filter((row) => row.id !== id));\r\n     };\r\n \r\n     const handleCancelClick = (id) => () => {\r\n-        setRowModesModel({\r\n-            ...rowModesModel,\r\n+        setRowID({\r\n+            ...users,\r\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n         });\r\n \r\n         const editedRow = rows.find((row) => row.id === id);\r\n@@ -221,18 +221,18 @@\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n-                    rowModesModel={rowModesModel}\r\n+                    // rowModesModel={rowModesModel}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n                     components={{\r\n                         Toolbar: EditToolbar,\r\n                     }}\r\n-                    componentsProps={{\r\n-                        toolbar: { setUsers, setRowModesModel },\r\n-                    }}\r\n+                    // componentsProps={{\r\n+                    //     toolbar: { setUsers, setRowModesModel },\r\n+                    // }}\r\n                     experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n             </Box>\r\n"
                },
                {
                    "date": 1658817073700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,10 @@\n                 \r\n                 const isInEditMode = users[id]?.isEdit === true;\r\n                 console.log('isInEditMode', isInEditMode);\r\n                 \r\n-                if (true) {\r\n+                if (                const isInEditMode = users[id]?.isEdit === true;\r\n+                    ) {\r\n                     return (\r\n                         <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                             <IconButton aria-label=\"save\" size=\"small\">\r\n                                 <EditIcon fontSize=\"inherit\" onClick={handleSaveClick(id)}/>\r\n"
                },
                {
                    "date": 1658817079215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,10 +157,9 @@\n                 \r\n                 const isInEditMode = users[id]?.isEdit === true;\r\n                 console.log('isInEditMode', isInEditMode);\r\n                 \r\n-                if (                const isInEditMode = users[id]?.isEdit === true;\r\n-                    ) {\r\n+                if (isInEditMode) {\r\n                     return (\r\n                         <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                             <IconButton aria-label=\"save\" size=\"small\">\r\n                                 <EditIcon fontSize=\"inherit\" onClick={handleSaveClick(id)}/>\r\n"
                },
                {
                    "date": 1658817482311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,10 +80,10 @@\n     };\r\n \r\n     const handleEditClick = (id) => () => {\r\n         console.log('edit ID:', id);\r\n-        \r\n-        setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n+        setRowID(id)\r\n+        setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n"
                },
                {
                    "date": 1658818120154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,11 @@\n \r\n     const handleEditClick = (id) => () => {\r\n         console.log('edit ID:', id);\r\n         setRowID(id)\r\n-        setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n+        getValue\r\n+\r\n+        // setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n@@ -151,12 +153,12 @@\n             type: 'actions',\r\n             headerName: 'Actions',\r\n             width: 100,\r\n             cellClassName: 'actions',\r\n-            renderCell: ({ id }) => {\r\n+            renderCell: (params) => {\r\n                 // console.log('rowId:', users[id]);\r\n                 \r\n-                const isInEditMode = users[id]?.isEdit === true;\r\n+                const isInEditMode = false;\r\n                 console.log('isInEditMode', isInEditMode);\r\n                 \r\n                 if (isInEditMode) {\r\n                     return (\r\n"
                },
                {
                    "date": 1658818161859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,10 @@\n             headerName: 'Actions',\r\n             width: 100,\r\n             cellClassName: 'actions',\r\n             renderCell: (params) => {\r\n-                // console.log('rowId:', users[id]);\r\n+                const id = params.id\r\n+                console.log('rowId:', users[params.]);\r\n                 \r\n                 const isInEditMode = false;\r\n                 console.log('isInEditMode', isInEditMode);\r\n                 \r\n"
                },
                {
                    "date": 1658818169395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n             width: 100,\r\n             cellClassName: 'actions',\r\n             renderCell: (params) => {\r\n                 const id = params.id\r\n-                console.log('rowId:', users[params.]);\r\n+                console.log('rowId:', users[is]);\r\n                 \r\n                 const isInEditMode = false;\r\n                 console.log('isInEditMode', isInEditMode);\r\n                 \r\n"
                },
                {
                    "date": 1658818175389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n             width: 100,\r\n             cellClassName: 'actions',\r\n             renderCell: (params) => {\r\n                 const id = params.id\r\n-                console.log('rowId:', users[is]);\r\n+                console.log('rowId:', users[id]);\r\n                 \r\n                 const isInEditMode = false;\r\n                 console.log('isInEditMode', isInEditMode);\r\n                 \r\n"
                },
                {
                    "date": 1658818188047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,8 +155,10 @@\n             width: 100,\r\n             cellClassName: 'actions',\r\n             renderCell: (params) => {\r\n                 const id = params.id\r\n+                console.log('params', params);\r\n+                \r\n                 console.log('rowId:', users[id]);\r\n                 \r\n                 const isInEditMode = false;\r\n                 console.log('isInEditMode', isInEditMode);\r\n"
                },
                {
                    "date": 1658818252472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,12 +166,12 @@\n                 if (isInEditMode) {\r\n                     return (\r\n                         <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                             <IconButton aria-label=\"save\" size=\"small\">\r\n-                                <EditIcon fontSize=\"inherit\" onClick={handleSaveClick(id)}/>\r\n+                                <EditIcon fontSize=\"inherit\" onClick={handleSaveClick(params)}/>\r\n                             </IconButton>\r\n                             <IconButton aria-label=\"cancel\" size=\"small\">\r\n-                                <DeleteIcon fontSize=\"inherit\" onClick={handleCancelClick(id)}/>\r\n+                                <DeleteIcon fontSize=\"inherit\" onClick={handleCancelClick(params)}/>\r\n                             </IconButton>\r\n                         </Stack>\r\n                         // <GridActionsCellItem\r\n                         //     icon={<SaveIcon />}\r\n@@ -189,12 +189,12 @@\n                 }\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"edit\" size=\"small\">\r\n-                            <EditIcon fontSize=\"inherit\" onClick={handleEditClick(id)}/>\r\n+                            <EditIcon fontSize=\"inherit\" onClick={handleEditClick(params)}/>\r\n                         </IconButton>\r\n                         <IconButton aria-label=\"delete\" size=\"small\">\r\n-                            <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(id)}/>\r\n+                            <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(params)}/>\r\n                         </IconButton>\r\n \r\n                         {/* <GridActionsCellItem\r\n                             icon={<EditIcon />}\r\n"
                },
                {
                    "date": 1658818278126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,12 +78,12 @@\n     const handleRowEditStop = (params, event) => {\r\n         event.defaultMuiPrevented = true;\r\n     };\r\n \r\n-    const handleEditClick = (id) => () => {\r\n-        console.log('edit ID:', id);\r\n+    const handleEditClick = (params) => () => {\r\n+        console.log('edit ID:', params);\r\n         setRowID(id)\r\n-        getValue\r\n+        // getValue\r\n \r\n         // setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n     };\r\n \r\n"
                },
                {
                    "date": 1658818506724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,10 @@\n     };\r\n \r\n     const handleEditClick = (params) => () => {\r\n         console.log('edit ID:', params);\r\n-        setRowID(id)\r\n+        params.getvalue('email')\r\n+        // setRowID(id)\r\n         // getValue\r\n \r\n         // setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n     };\r\n"
                },
                {
                    "date": 1658818526713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n     };\r\n \r\n     const handleEditClick = (params) => () => {\r\n         console.log('edit ID:', params);\r\n-        params.getvalue('email')\r\n+        params.getValue('email')\r\n         // setRowID(id)\r\n         // getValue\r\n \r\n         // setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n"
                },
                {
                    "date": 1658818542706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n     };\r\n \r\n     const handleEditClick = (params) => () => {\r\n         console.log('edit ID:', params);\r\n-        params.getValue('email')\r\n+        params.getValue(params.id, 'email')\r\n         // setRowID(id)\r\n         // getValue\r\n \r\n         // setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n"
                },
                {
                    "date": 1658818558720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n     };\r\n \r\n     const handleEditClick = (params) => () => {\r\n         console.log('edit ID:', params);\r\n-        params.getValue(params.id, 'email')\r\n+        console.log(params.getValue(params.id, 'email'))\r\n         // setRowID(id)\r\n         // getValue\r\n \r\n         // setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n"
                },
                {
                    "date": 1658818578701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n     };\r\n \r\n     const handleEditClick = (params) => () => {\r\n         console.log('edit ID:', params);\r\n-        console.log(params.getValue(params.id, 'email'))\r\n+        console.log(params.row)\r\n         // setRowID(id)\r\n         // getValue\r\n \r\n         // setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n"
                },
                {
                    "date": 1658818594969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n     };\r\n \r\n     const handleEditClick = (params) => () => {\r\n         console.log('edit ID:', params);\r\n-        console.log(params.row)\r\n+        console.log('>>>>>>>>',params.row)\r\n         // setRowID(id)\r\n         // getValue\r\n \r\n         // setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n"
                },
                {
                    "date": 1658818618189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,11 +156,11 @@\n             width: 100,\r\n             cellClassName: 'actions',\r\n             renderCell: (params) => {\r\n                 const id = params.id\r\n-                console.log('params', params);\r\n+                // console.log('params', params);\r\n                 \r\n-                console.log('rowId:', users[id]);\r\n+                // console.log('rowId:', users[id]);\r\n                 \r\n                 const isInEditMode = false;\r\n                 console.log('isInEditMode', isInEditMode);\r\n                 \r\n"
                },
                {
                    "date": 1658818741176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n     };\r\n \r\n     const handleEditClick = (params) => () => {\r\n         console.log('edit ID:', params);\r\n-        console.log('>>>>>>>>',params.row)\r\n+        console.log('>>>>>>>>',params.row.email)\r\n         // setRowID(id)\r\n         // getValue\r\n \r\n         // setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n"
                },
                {
                    "date": 1658818780918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n     };\r\n \r\n     const handleEditClick = (params) => () => {\r\n         console.log('edit ID:', params);\r\n-        console.log('>>>>>>>>',params.row.email)\r\n+        console.log('>>>>>>>>',params.isEditable)\r\n         // setRowID(id)\r\n         // getValue\r\n \r\n         // setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n"
                },
                {
                    "date": 1658818802721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,9 @@\n     };\r\n \r\n     const handleEditClick = (params) => () => {\r\n         console.log('edit ID:', params);\r\n+        params.isEditable = true\r\n         console.log('>>>>>>>>',params.isEditable)\r\n         // setRowID(id)\r\n         // getValue\r\n \r\n"
                },
                {
                    "date": 1658818874152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,12 +145,12 @@\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n-    const cols: GridColDef[] = [{ field: 'id', headerName: 'ID', flex: 1, editable: true },\r\n-        { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n-        { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n-        { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n+    const cols: GridColDef[] = [{ field: 'id', headerName: 'ID', flex: 1, },\r\n+        { field: 'firstName', headerName: 'First name', flex: 1, },\r\n+        { field: 'lastName', headerName: 'Last name', flex: 1, },\r\n+        { field: 'email', headerName: 'Email', flex: 1, },\r\n         {\r\n             field: 'actions',\r\n             type: 'actions',\r\n             headerName: 'Actions',\r\n"
                },
                {
                    "date": 1658819089281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,14 +80,14 @@\n     };\r\n \r\n     const handleEditClick = (params) => () => {\r\n         console.log('edit ID:', params);\r\n-        params.isEditable = true\r\n+        // params.isEditable = true\r\n         console.log('>>>>>>>>',params.isEditable)\r\n         // setRowID(id)\r\n         // getValue\r\n \r\n-        // setUsers({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n+        setUsers({ ...users, [params.id]: { mode: GridRowModes.Edit } });\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n"
                },
                {
                    "date": 1658819207639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,10 +84,11 @@\n         // params.isEditable = true\r\n         console.log('>>>>>>>>',params.isEditable)\r\n         // setRowID(id)\r\n         // getValue\r\n-\r\n-        setUsers({ ...users, [params.id]: { mode: GridRowModes.Edit } });\r\n+        const tmp = _.cloneDeep(users)\r\n+        tmp[params.id].mode = GridRowModes.Edit\r\n+        setUsers([...users, [params.id]: { mode: GridRowModes.Edit } ]);\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n"
                },
                {
                    "date": 1658819230905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n         // setRowID(id)\r\n         // getValue\r\n         const tmp = _.cloneDeep(users)\r\n         tmp[params.id].mode = GridRowModes.Edit\r\n-        setUsers([...users, [params.id]: { mode: GridRowModes.Edit } ]);\r\n+        setUsers(_.cloneDeep(tmp));\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n"
                },
                {
                    "date": 1658819273440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,10 @@\n         // setRowID(id)\r\n         // getValue\r\n         const tmp = _.cloneDeep(users)\r\n         tmp[params.id].mode = GridRowModes.Edit\r\n+        console.log('tmp', tmp);\r\n+        \r\n         setUsers(_.cloneDeep(tmp));\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n"
                },
                {
                    "date": 1658819471772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,12 +194,12 @@\n                 }\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"edit\" size=\"small\">\r\n-                            <EditIcon fontSize=\"inherit\" onClick={handleEditClick(params)}/>\r\n+                            <EditIcon fontSize=\"inherit\" onClick={handleEditClick(users, params)}/>\r\n                         </IconButton>\r\n                         <IconButton aria-label=\"delete\" size=\"small\">\r\n-                            <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(params)}/>\r\n+                            <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(users, params)}/>\r\n                         </IconButton>\r\n \r\n                         {/* <GridActionsCellItem\r\n                             icon={<EditIcon />}\r\n"
                },
                {
                    "date": 1658819782916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n     const handleRowEditStop = (params, event) => {\r\n         event.defaultMuiPrevented = true;\r\n     };\r\n \r\n-    const handleEditClick = (params) => () => {\r\n+    const handleEditClick = (users, params) => () => {\r\n         console.log('edit ID:', params);\r\n         // params.isEditable = true\r\n         console.log('>>>>>>>>',params.isEditable)\r\n         // setRowID(id)\r\n@@ -95,9 +95,9 @@\n     const handleSaveClick = (id) => () => {\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n     };\r\n \r\n-    const handleDeleteClick = (id) => () => {\r\n+    const handleDeleteClick = (users, params) => () => {\r\n         setUsers(rows.filter((row) => row.id !== id));\r\n     };\r\n \r\n     const handleCancelClick = (id) => () => {\r\n"
                },
                {
                    "date": 1658819791014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,9 @@\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n-                    editMode=\"row\"\r\n+                    // editMode=\"row\"\r\n                     // rowModesModel={rowModesModel}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n"
                },
                {
                    "date": 1658819802474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,9 @@\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n-                    // editMode=\"row\"\r\n+                    editMode=\"row\"\r\n                     // rowModesModel={rowModesModel}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n"
                },
                {
                    "date": 1658820138668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import _ from 'lodash'\r\n import { useEffect, useState } from 'react';\r\n-import { DataGrid, GridColDef, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n+import { DataGrid, GridColDef, GridRowModes, GridRowModesModel, GridRowsProp, } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n@@ -82,15 +82,16 @@\n     const handleEditClick = (users, params) => () => {\r\n         console.log('edit ID:', params);\r\n         // params.isEditable = true\r\n         console.log('>>>>>>>>',params.isEditable)\r\n-        // setRowID(id)\r\n-        // getValue\r\n-        const tmp = _.cloneDeep(users)\r\n-        tmp[params.id].mode = GridRowModes.Edit\r\n-        console.log('tmp', tmp);\r\n+        // // setRowID(id)\r\n+        // // getValue\r\n+        // const tmp = _.cloneDeep(users)\r\n+        // tmp[params.id].mode = GridRowModes.Edit\r\n+        // console.log('tmp', tmp);\r\n         \r\n-        setUsers(_.cloneDeep(tmp));\r\n+        // setUsers(_.cloneDeep(tmp));\r\n+        console.log(params.getValue(params.id, 'email'))\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n"
                },
                {
                    "date": 1658820244754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,10 +96,10 @@\n     const handleSaveClick = (id) => () => {\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n     };\r\n \r\n-    const handleDeleteClick = (users, params) => () => {\r\n-        setUsers(rows.filter((row) => row.id !== id));\r\n+    const handleDeleteClick = (users, id) => () => {\r\n+        setUsers(rows.filter((row) => row.id !== params.id));\r\n     };\r\n \r\n     const handleCancelClick = (id) => () => {\r\n         setRowID({\r\n@@ -195,12 +195,12 @@\n                 }\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"edit\" size=\"small\">\r\n-                            <EditIcon fontSize=\"inherit\" onClick={handleEditClick(users, params)}/>\r\n+                            <EditIcon fontSize=\"inherit\" onClick={handleEditClick(users, params.id)}/>\r\n                         </IconButton>\r\n                         <IconButton aria-label=\"delete\" size=\"small\">\r\n-                            <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(users, params)}/>\r\n+                            <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(users, params.id)}/>\r\n                         </IconButton>\r\n \r\n                         {/* <GridActionsCellItem\r\n                             icon={<EditIcon />}\r\n"
                },
                {
                    "date": 1658820289230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,8 +148,11 @@\n     if (status === 'false') {\r\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n+    \r\n+    const isInEditMode = false;\r\n+    console.log('isInEditMode', isInEditMode);\r\n \r\n     const cols: GridColDef[] = [{ field: 'id', headerName: 'ID', flex: 1, },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, },\r\n@@ -165,11 +168,10 @@\n                 // console.log('params', params);\r\n                 \r\n                 // console.log('rowId:', users[id]);\r\n                 \r\n-                const isInEditMode = false;\r\n-                console.log('isInEditMode', isInEditMode);\r\n                 \r\n+                \r\n                 if (isInEditMode) {\r\n                     return (\r\n                         <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                             <IconButton aria-label=\"save\" size=\"small\">\r\n"
                },
                {
                    "date": 1658820312728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n     };\r\n \r\n     const handleDeleteClick = (users, id) => () => {\r\n-        setUsers(rows.filter((row) => row.id !== params.id));\r\n+        setUsers(rows.filter((row) => row.id !== id));\r\n     };\r\n \r\n     const handleCancelClick = (id) => () => {\r\n         setRowID({\r\n@@ -148,9 +148,9 @@\n     if (status === 'false') {\r\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n-    \r\n+\r\n     const isInEditMode = false;\r\n     console.log('isInEditMode', isInEditMode);\r\n \r\n     const cols: GridColDef[] = [{ field: 'id', headerName: 'ID', flex: 1, },\r\n"
                },
                {
                    "date": 1658820342042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import _ from 'lodash'\r\n import { useEffect, useState } from 'react';\r\n-import { DataGrid, GridColDef, GridRowModes, GridRowModesModel, GridRowsProp, } from '@mui/x-data-grid';\r\n+import { DataGrid, GridColDef, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams} from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n"
                },
                {
                    "date": 1658820561926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,16 +89,15 @@\n         // tmp[params.id].mode = GridRowModes.Edit\r\n         // console.log('tmp', tmp);\r\n         \r\n         // setUsers(_.cloneDeep(tmp));\r\n-        console.log(params.getValue(params.id, 'email'))\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n     };\r\n \r\n-    const handleDeleteClick = (users, id) => () => {\r\n+    const handleDeleteClick = (id) => () => {\r\n         setUsers(rows.filter((row) => row.id !== id));\r\n     };\r\n \r\n     const handleCancelClick = (id) => () => {\r\n@@ -197,12 +196,12 @@\n                 }\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"edit\" size=\"small\">\r\n-                            <EditIcon fontSize=\"inherit\" onClick={handleEditClick(users, params.id)}/>\r\n+                            <EditIcon fontSize=\"inherit\" onClick={handleEditClick(params.id)}/>\r\n                         </IconButton>\r\n                         <IconButton aria-label=\"delete\" size=\"small\">\r\n-                            <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(users, params.id)}/>\r\n+                            <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(params.id)}/>\r\n                         </IconButton>\r\n \r\n                         {/* <GridActionsCellItem\r\n                             icon={<EditIcon />}\r\n"
                },
                {
                    "date": 1658820600081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,12 +78,11 @@\n     const handleRowEditStop = (params, event) => {\r\n         event.defaultMuiPrevented = true;\r\n     };\r\n \r\n-    const handleEditClick = (users, params) => () => {\r\n-        console.log('edit ID:', params);\r\n+    const handleEditClick = (id) => () => {\r\n+        console.log('edit ID:', id);\r\n         // params.isEditable = true\r\n-        console.log('>>>>>>>>',params.isEditable)\r\n         // // setRowID(id)\r\n         // // getValue\r\n         // const tmp = _.cloneDeep(users)\r\n         // tmp[params.id].mode = GridRowModes.Edit\r\n"
                },
                {
                    "date": 1658820831552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,9 @@\n         // tmp[params.id].mode = GridRowModes.Edit\r\n         // console.log('tmp', tmp);\r\n         \r\n         // setUsers(_.cloneDeep(tmp));\r\n+        setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n@@ -111,9 +112,9 @@\n         }\r\n     };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow, isNew: false };\r\n+        const updatedRow = { ...newRow};\r\n         setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n         return updatedRow;\r\n     };\r\n     // const fetchUsers = async () => {\r\n"
                },
                {
                    "date": 1658820859368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,8 +89,10 @@\n         // console.log('tmp', tmp);\r\n         \r\n         // setUsers(_.cloneDeep(tmp));\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n+        console.log(rowID);\r\n+        \r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n"
                },
                {
                    "date": 1658820889319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n     \r\n     // console.log('path', router.pathname)\r\n-    const [rowID, setRowID] = useState(-1)\r\n+    const [rowID, setRowID] = useState({})\r\n \r\n     const handleRowEditStart = (params, event) => {\r\n         event.defaultMuiPrevented = true;\r\n     };\r\n"
                },
                {
                    "date": 1658821114050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,8 +236,9 @@\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     // rowModesModel={rowModesModel}\r\n+                    rowModesModel={{ 1: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n                     components={{\r\n"
                },
                {
                    "date": 1658821295512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,11 +240,11 @@\n                     rowModesModel={{ 1: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    components={{\r\n-                        Toolbar: EditToolbar,\r\n-                    }}\r\n+                    // components={{\r\n+                    //     Toolbar: EditToolbar,\r\n+                    // }}\r\n                     // componentsProps={{\r\n                     //     toolbar: { setUsers, setRowModesModel },\r\n                     // }}\r\n                     experimentalFeatures={{ newEditingApi: true }}\r\n"
                },
                {
                    "date": 1658821335259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,9 +236,9 @@\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     // rowModesModel={rowModesModel}\r\n-                    rowModesModel={{ 1: { mode: GridRowModes.Edit } }}\r\n+                    rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n                     // components={{\r\n"
                },
                {
                    "date": 1658821394993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,15 +83,15 @@\n         console.log('edit ID:', id);\r\n         // params.isEditable = true\r\n         // // setRowID(id)\r\n         // // getValue\r\n-        // const tmp = _.cloneDeep(users)\r\n-        // tmp[params.id].mode = GridRowModes.Edit\r\n+        const tmp = _.cloneDeep(users)\r\n+        tmp[id].mode = GridRowModes.Edit\r\n         // console.log('tmp', tmp);\r\n         \r\n-        // setUsers(_.cloneDeep(tmp));\r\n+        setUsers(_.cloneDeep(tmp));\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n-        console.log(rowID);\r\n+        console.log(tmp);\r\n         \r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n"
                },
                {
                    "date": 1658821462382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n         // console.log('tmp', tmp);\r\n         \r\n         setUsers(_.cloneDeep(tmp));\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n-        console.log(tmp);\r\n+        console.log(users);\r\n         \r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n"
                },
                {
                    "date": 1658821514125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n         // // setRowID(id)\r\n         // // getValue\r\n         const tmp = _.cloneDeep(users)\r\n         tmp[id].mode = GridRowModes.Edit\r\n-        // console.log('tmp', tmp);\r\n+        console.log('tmp', tmp);\r\n         \r\n         setUsers(_.cloneDeep(tmp));\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n         console.log(users);\r\n"
                },
                {
                    "date": 1658822902171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import _ from 'lodash'\r\n import { useEffect, useState } from 'react';\r\n-import { DataGrid, GridColDef, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams} from '@mui/x-data-grid';\r\n+import { DataGrid, GridCellEditCommitParams, GridColDef, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n@@ -51,13 +51,9 @@\n         }));\r\n     };\r\n \r\n     return (\r\n-        <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-            <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\r\n-                Add record\r\n-            </Button>\r\n-        </Stack>\r\n+        \r\n     );\r\n }\r\n \r\n export default function userPage() {\r\n@@ -66,9 +62,9 @@\n     //   },)\r\n \r\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n-    \r\n+\r\n     // console.log('path', router.pathname)\r\n     const [rowID, setRowID] = useState({})\r\n \r\n     const handleRowEditStart = (params, event) => {\r\n@@ -86,13 +82,13 @@\n         // // getValue\r\n         const tmp = _.cloneDeep(users)\r\n         tmp[id].mode = GridRowModes.Edit\r\n         console.log('tmp', tmp);\r\n-        \r\n+\r\n         setUsers(_.cloneDeep(tmp));\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n         console.log(users);\r\n-        \r\n+\r\n     };\r\n \r\n     const handleSaveClick = (id) => () => {\r\n         setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n@@ -114,12 +110,23 @@\n         }\r\n     };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow};\r\n+        const updatedRow = { ...newRow };\r\n         setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n         return updatedRow;\r\n     };\r\n+\r\n+    const handleCommit = (e: GridCellEditCommitParams) => {\r\n+        const array = users.map(r => {\r\n+            if (r.id === e.id) {\r\n+                return {...r, [e.field]: e.value}\r\n+            } else {\r\n+                return {...r}\r\n+            }\r\n+        })\r\n+        setUsers(array)\r\n+    }\r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n     //     const data = await response.json()\r\n     //     setUsers(data)\r\n@@ -154,59 +161,59 @@\n     const isInEditMode = false;\r\n     console.log('isInEditMode', isInEditMode);\r\n \r\n     const cols: GridColDef[] = [{ field: 'id', headerName: 'ID', flex: 1, },\r\n-        { field: 'firstName', headerName: 'First name', flex: 1, },\r\n-        { field: 'lastName', headerName: 'Last name', flex: 1, },\r\n-        { field: 'email', headerName: 'Email', flex: 1, },\r\n-        {\r\n-            field: 'actions',\r\n-            type: 'actions',\r\n-            headerName: 'Actions',\r\n-            width: 100,\r\n-            cellClassName: 'actions',\r\n-            renderCell: (params) => {\r\n-                const id = params.id\r\n-                // console.log('params', params);\r\n-                \r\n-                // console.log('rowId:', users[id]);\r\n-                \r\n-                \r\n-                \r\n-                if (isInEditMode) {\r\n-                    return (\r\n-                        <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                            <IconButton aria-label=\"save\" size=\"small\">\r\n-                                <EditIcon fontSize=\"inherit\" onClick={handleSaveClick(params)}/>\r\n-                            </IconButton>\r\n-                            <IconButton aria-label=\"cancel\" size=\"small\">\r\n-                                <DeleteIcon fontSize=\"inherit\" onClick={handleCancelClick(params)}/>\r\n-                            </IconButton>\r\n-                        </Stack>\r\n-                        // <GridActionsCellItem\r\n-                        //     icon={<SaveIcon />}\r\n-                        //     label=\"Save\"\r\n-                        //     onClick={handleSaveClick(id)}\r\n-                        // />,\r\n-                        // <GridActionsCellItem\r\n-                        //     icon={<CancelIcon />}\r\n-                        //     label=\"Cancel\"\r\n-                        //     className=\"textPrimary\"\r\n-                        //     onClick={handleCancelClick(id)}\r\n-                        //     color=\"inherit\"\r\n-                        // />,\r\n-                    )\r\n-                }\r\n+    { field: 'firstName', headerName: 'First name', flex: 1, editable: true},\r\n+    { field: 'lastName', headerName: 'Last name', flex: 1, },\r\n+    { field: 'email', headerName: 'Email', flex: 1, },\r\n+    {\r\n+        field: 'actions',\r\n+        type: 'actions',\r\n+        headerName: 'Actions',\r\n+        width: 100,\r\n+        cellClassName: 'actions',\r\n+        renderCell: (params) => {\r\n+            const id = params.id\r\n+            // console.log('params', params);\r\n+\r\n+            // console.log('rowId:', users[id]);\r\n+\r\n+\r\n+\r\n+            if (isInEditMode) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                        <IconButton aria-label=\"edit\" size=\"small\">\r\n-                            <EditIcon fontSize=\"inherit\" onClick={handleEditClick(params.id)}/>\r\n+                        <IconButton aria-label=\"save\" size=\"small\">\r\n+                            <EditIcon fontSize=\"inherit\" onClick={handleSaveClick(params)} />\r\n                         </IconButton>\r\n-                        <IconButton aria-label=\"delete\" size=\"small\">\r\n-                            <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(params.id)}/>\r\n+                        <IconButton aria-label=\"cancel\" size=\"small\">\r\n+                            <DeleteIcon fontSize=\"inherit\" onClick={handleCancelClick(params)} />\r\n                         </IconButton>\r\n+                    </Stack>\r\n+                    // <GridActionsCellItem\r\n+                    //     icon={<SaveIcon />}\r\n+                    //     label=\"Save\"\r\n+                    //     onClick={handleSaveClick(id)}\r\n+                    // />,\r\n+                    // <GridActionsCellItem\r\n+                    //     icon={<CancelIcon />}\r\n+                    //     label=\"Cancel\"\r\n+                    //     className=\"textPrimary\"\r\n+                    //     onClick={handleCancelClick(id)}\r\n+                    //     color=\"inherit\"\r\n+                    // />,\r\n+                )\r\n+            }\r\n+            return (\r\n+                <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                    <IconButton aria-label=\"edit\" size=\"small\">\r\n+                        <EditIcon fontSize=\"inherit\" onClick={handleEditClick(params.id)} />\r\n+                    </IconButton>\r\n+                    <IconButton aria-label=\"delete\" size=\"small\">\r\n+                        <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(params.id)} />\r\n+                    </IconButton>\r\n \r\n-                        {/* <GridActionsCellItem\r\n+                    {/* <GridActionsCellItem\r\n                             icon={<EditIcon />}\r\n                             label=\"Edit\"\r\n                             className=\"textPrimary\"\r\n                             onClick={handleEditClick(id)}\r\n@@ -217,19 +224,24 @@\n                             label=\"Delete\"\r\n                             onClick={handleDeleteClick(id)}\r\n                             color=\"inherit\"\r\n                         />, */}\r\n-                    </Stack>\r\n-                )\r\n-            },\r\n+                </Stack>\r\n+            )\r\n         },\r\n+    },\r\n     ]\r\n \r\n     return (\r\n         <>\r\n             <Box sx={{\r\n                 height: 405, width: '100%'\r\n             }}>\r\n+                <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                    <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\r\n+                        Add record\r\n+                    </Button>\r\n+                </Stack>\r\n                 <DataGrid\r\n                     rows={rows}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n@@ -246,8 +258,9 @@\n                     // }}\r\n                     // componentsProps={{\r\n                     //     toolbar: { setUsers, setRowModesModel },\r\n                     // }}\r\n+                    onCellEditCommit={handleCommit}\r\n                     experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n             </Box>\r\n"
                },
                {
                    "date": 1658822939427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,25 +38,9 @@\n         newModel: (oldModel) => GridRowModesModel,\r\n     ) => void;\r\n }\r\n \r\n-function EditToolbar(props: EditToolbarProps) {\r\n-    const { setRows, setRowModesModel } = props;\r\n \r\n-    const handleClick = () => {\r\n-        const id = Date.now();\r\n-        setRows((oldRows) => [...oldRows, { id, firstName: '', lastName: '', email: '', isNew: true }]);\r\n-        setRowModesModel((oldModel) => ({\r\n-            ...oldModel,\r\n-            [id]: { mode: GridRowModes.Edit, fieldToFocus: 'name' },\r\n-        }));\r\n-    };\r\n-\r\n-    return (\r\n-        \r\n-    );\r\n-}\r\n-\r\n export default function userPage() {\r\n     // useEffect(() => {\r\n     //     document.title = 'User'\r\n     //   },)\r\n@@ -236,9 +220,9 @@\n             <Box sx={{\r\n                 height: 405, width: '100%'\r\n             }}>\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\r\n+                    <Button color=\"primary\" startIcon={<AddIcon />} >\r\n                         Add record\r\n                     </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n"
                },
                {
                    "date": 1658822969686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,10 +146,10 @@\n     console.log('isInEditMode', isInEditMode);\r\n \r\n     const cols: GridColDef[] = [{ field: 'id', headerName: 'ID', flex: 1, },\r\n     { field: 'firstName', headerName: 'First name', flex: 1, editable: true},\r\n-    { field: 'lastName', headerName: 'Last name', flex: 1, },\r\n-    { field: 'email', headerName: 'Email', flex: 1, },\r\n+    { field: 'lastName', headerName: 'Last name', flex: 1, editable: true},\r\n+    { field: 'email', headerName: 'Email', flex: 1, editable: true},\r\n     {\r\n         field: 'actions',\r\n         type: 'actions',\r\n         headerName: 'Actions',\r\n"
                },
                {
                    "date": 1658822991989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     // rowModesModel={rowModesModel}\r\n-                    rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n+                    // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n                     // components={{\r\n"
                },
                {
                    "date": 1658823028113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,8 +225,9 @@\n                         Add record\r\n                     </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n+                    autoHeight\r\n                     rows={rows}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n"
                },
                {
                    "date": 1658823149272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,10 @@\n                 return {...r}\r\n             }\r\n         })\r\n         setUsers(array)\r\n+        console.log('array', array[e.id]);\r\n+        \r\n     }\r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n     //     const data = await response.json()\r\n"
                },
                {
                    "date": 1658823186399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,10 @@\n         return updatedRow;\r\n     };\r\n \r\n     const handleCommit = (e: GridCellEditCommitParams) => {\r\n+        console.log('here');\r\n+        \r\n         const array = users.map(r => {\r\n             if (r.id === e.id) {\r\n                 return {...r, [e.field]: e.value}\r\n             } else {\r\n"
                },
                {
                    "date": 1658823218055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,17 +240,17 @@\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n-                    processRowUpdate={processRowUpdate}\r\n+                    // processRowUpdate={processRowUpdate}\r\n                     // components={{\r\n                     //     Toolbar: EditToolbar,\r\n                     // }}\r\n                     // componentsProps={{\r\n                     //     toolbar: { setUsers, setRowModesModel },\r\n                     // }}\r\n                     onCellEditCommit={handleCommit}\r\n-                    experimentalFeatures={{ newEditingApi: true }}\r\n+                    // experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658823299575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,14 +31,8 @@\n //     lastName: string,\r\n //     email: string,\r\n //     password: string\r\n // }\r\n-interface EditToolbarProps {\r\n-    setRows: (newRows: (oldRows) => GridRowsProp) => void;\r\n-    setRowModesModel: (\r\n-        newModel: (oldModel) => GridRowModesModel,\r\n-    ) => void;\r\n-}\r\n \r\n \r\n export default function userPage() {\r\n     // useEffect(() => {\r\n"
                },
                {
                    "date": 1658823325514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,14 +127,8 @@\n     //     fetchData()\r\n     //   }, [])\r\n \r\n     const rows = _.cloneDeep(users)\r\n-    const [rowSelectedId, setRowSelectedId] = useState()\r\n-    // console.log('/users', users);\r\n-    // const tmp = rows.find(ele => {\r\n-    //     return ele.isSignIn === true\r\n-    // })\r\n-    // console.log('status', status);\r\n \r\n     if (status === 'false') {\r\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n@@ -154,14 +148,9 @@\n         width: 100,\r\n         cellClassName: 'actions',\r\n         renderCell: (params) => {\r\n             const id = params.id\r\n-            // console.log('params', params);\r\n \r\n-            // console.log('rowId:', users[id]);\r\n-\r\n-\r\n-\r\n             if (isInEditMode) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"save\" size=\"small\">\r\n"
                },
                {
                    "date": 1658823563134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,56 +44,56 @@\n \r\n     // console.log('path', router.pathname)\r\n     const [rowID, setRowID] = useState({})\r\n \r\n-    const handleRowEditStart = (params, event) => {\r\n-        event.defaultMuiPrevented = true;\r\n-    };\r\n+    // const handleRowEditStart = (params, event) => {\r\n+    //     event.defaultMuiPrevented = true;\r\n+    // };\r\n \r\n-    const handleRowEditStop = (params, event) => {\r\n-        event.defaultMuiPrevented = true;\r\n-    };\r\n+    // const handleRowEditStop = (params, event) => {\r\n+    //     event.defaultMuiPrevented = true;\r\n+    // };\r\n \r\n-    const handleEditClick = (id) => () => {\r\n-        console.log('edit ID:', id);\r\n-        // params.isEditable = true\r\n-        // // setRowID(id)\r\n-        // // getValue\r\n-        const tmp = _.cloneDeep(users)\r\n-        tmp[id].mode = GridRowModes.Edit\r\n-        console.log('tmp', tmp);\r\n+    // const handleEditClick = (id) => () => {\r\n+    //     console.log('edit ID:', id);\r\n+    //     // params.isEditable = true\r\n+    //     // // setRowID(id)\r\n+    //     // // getValue\r\n+    //     const tmp = _.cloneDeep(users)\r\n+    //     tmp[id].mode = GridRowModes.Edit\r\n+    //     console.log('tmp', tmp);\r\n \r\n-        setUsers(_.cloneDeep(tmp));\r\n-        setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n-        console.log(users);\r\n+    //     setUsers(_.cloneDeep(tmp));\r\n+    //     setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n+    //     console.log(users);\r\n \r\n-    };\r\n+    // };\r\n \r\n-    const handleSaveClick = (id) => () => {\r\n-        setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n-    };\r\n+    // const handleSaveClick = (id) => () => {\r\n+    //     setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n+    // };\r\n \r\n-    const handleDeleteClick = (id) => () => {\r\n-        setUsers(rows.filter((row) => row.id !== id));\r\n-    };\r\n+    // const handleDeleteClick = (id) => () => {\r\n+    //     setUsers(rows.filter((row) => row.id !== id));\r\n+    // };\r\n \r\n-    const handleCancelClick = (id) => () => {\r\n-        setRowID({\r\n-            ...users,\r\n-            [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n-        });\r\n+    // const handleCancelClick = (id) => () => {\r\n+    //     setRowID({\r\n+    //         ...users,\r\n+    //         [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n+    //     });\r\n \r\n-        const editedRow = rows.find((row) => row.id === id);\r\n-        if (editedRow!.isNew) {\r\n-            setUsers(rows.filter((row) => row.id !== id));\r\n-        }\r\n-    };\r\n+    //     const editedRow = rows.find((row) => row.id === id);\r\n+    //     if (editedRow!.isNew) {\r\n+    //         setUsers(rows.filter((row) => row.id !== id));\r\n+    //     }\r\n+    // };\r\n \r\n-    const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow };\r\n-        setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n-        return updatedRow;\r\n-    };\r\n+    // const processRowUpdate = (newRow) => {\r\n+    //     const updatedRow = { ...newRow };\r\n+    //     setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+    //     return updatedRow;\r\n+    // };\r\n \r\n     const handleCommit = (e: GridCellEditCommitParams) => {\r\n         console.log('here');\r\n         \r\n@@ -153,12 +153,12 @@\n             if (isInEditMode) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"save\" size=\"small\">\r\n-                            <EditIcon fontSize=\"inherit\" onClick={handleSaveClick(params)} />\r\n+                            <EditIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                         <IconButton aria-label=\"cancel\" size=\"small\">\r\n-                            <DeleteIcon fontSize=\"inherit\" onClick={handleCancelClick(params)} />\r\n+                            <DeleteIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                     </Stack>\r\n                     // <GridActionsCellItem\r\n                     //     icon={<SaveIcon />}\r\n@@ -176,12 +176,12 @@\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                     <IconButton aria-label=\"edit\" size=\"small\">\r\n-                        <EditIcon fontSize=\"inherit\" onClick={handleEditClick(params.id)} />\r\n+                        <EditIcon fontSize=\"inherit\" onClick={} />\r\n                     </IconButton>\r\n                     <IconButton aria-label=\"delete\" size=\"small\">\r\n-                        <DeleteIcon fontSize=\"inherit\" onClick={handleDeleteClick(params.id)} />\r\n+                        <DeleteIcon fontSize=\"inherit\" onClick={} />\r\n                     </IconButton>\r\n \r\n                     {/* <GridActionsCellItem\r\n                             icon={<EditIcon />}\r\n"
                },
                {
                    "date": 1658823569279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,12 +176,12 @@\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                     <IconButton aria-label=\"edit\" size=\"small\">\r\n-                        <EditIcon fontSize=\"inherit\" onClick={} />\r\n+                        <EditIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n                     <IconButton aria-label=\"delete\" size=\"small\">\r\n-                        <DeleteIcon fontSize=\"inherit\" onClick={} />\r\n+                        <DeleteIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n \r\n                     {/* <GridActionsCellItem\r\n                             icon={<EditIcon />}\r\n"
                },
                {
                    "date": 1658823699763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import _ from 'lodash'\r\n import { useEffect, useState } from 'react';\r\n-import { DataGrid, GridCellEditCommitParams, GridColDef, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n+import { DataGrid, GridCellEditCommitParams, GridColDef, GridRowModel, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n@@ -42,9 +42,9 @@\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n \r\n     // console.log('path', router.pathname)\r\n-    const [rowID, setRowID] = useState({})\r\n+    const [rowID, setRowID] = useState<GridRowModel>(users)\r\n \r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n@@ -96,16 +96,16 @@\n \r\n     const handleCommit = (e: GridCellEditCommitParams) => {\r\n         console.log('here');\r\n         \r\n-        const array = users.map(r => {\r\n+        const array = rowID.map(r => {\r\n             if (r.id === e.id) {\r\n                 return {...r, [e.field]: e.value}\r\n             } else {\r\n                 return {...r}\r\n             }\r\n         })\r\n-        setUsers(array)\r\n+        setRowID(array)\r\n         console.log('array', array[e.id]);\r\n         \r\n     }\r\n     // const fetchUsers = async () => {\r\n"
                },
                {
                    "date": 1658823769003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,10 @@\n     const router = useRouter()\r\n \r\n     // console.log('path', router.pathname)\r\n     const [rowID, setRowID] = useState<GridRowModel>(users)\r\n-\r\n+    const isInEditMode = false;\r\n+    console.log('isInEditMode', isInEditMode);\r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n \r\n@@ -133,10 +134,9 @@\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n-    const isInEditMode = false;\r\n-    console.log('isInEditMode', isInEditMode);\r\n+    \r\n \r\n     const cols: GridColDef[] = [{ field: 'id', headerName: 'ID', flex: 1, },\r\n     { field: 'firstName', headerName: 'First name', flex: 1, editable: true},\r\n     { field: 'lastName', headerName: 'Last name', flex: 1, editable: true},\r\n"
                },
                {
                    "date": 1658823964321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,8 +234,11 @@\n                     onCellEditCommit={handleCommit}\r\n                     // experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n+                <div style={{width: '600px'}}>\r\n+                    {JSON.stringify(rowID)}\r\n+                </div>\r\n             </Box>\r\n         </>\r\n     )\r\n }\r\n"
                },
                {
                    "date": 1658824015760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n             } else {\r\n                 return {...r}\r\n             }\r\n         })\r\n-        setRowID(array)\r\n+        setRowID(_.cloneDeep(array))\r\n         console.log('array', array[e.id]);\r\n         \r\n     }\r\n     // const fetchUsers = async () => {\r\n"
                },
                {
                    "date": 1658824069282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,8 +212,9 @@\n                         Add record\r\n                     </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n+                    onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n                     rows={rows}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n@@ -230,9 +231,9 @@\n                     // }}\r\n                     // componentsProps={{\r\n                     //     toolbar: { setUsers, setRowModesModel },\r\n                     // }}\r\n-                    onCellEditCommit={handleCommit}\r\n+                    \r\n                     // experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n"
                },
                {
                    "date": 1658824137688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,9 +236,9 @@\n                     // experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n-                    {JSON.stringify(rowID)}\r\n+                    {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n     )\r\n"
                },
                {
                    "date": 1658824364117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,11 +216,11 @@\n                     onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n                     rows={rows}\r\n                     columns={cols}\r\n-                    pageSize={5}\r\n-                    rowsPerPageOptions={[5]}\r\n-                    checkboxSelection\r\n+                    // pageSize={5}\r\n+                    // rowsPerPageOptions={[5]}\r\n+                    // checkboxSelection\r\n                     editMode=\"row\"\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n@@ -233,9 +233,9 @@\n                     //     toolbar: { setUsers, setRowModesModel },\r\n                     // }}\r\n                     \r\n                     // experimentalFeatures={{ newEditingApi: true }}\r\n-                    disableSelectionOnClick\r\n+                    // disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     {JSON.stringify(users)}\r\n                 </div>\r\n"
                },
                {
                    "date": 1658824459435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n \r\n     // console.log('path', router.pathname)\r\n-    const [rowID, setRowID] = useState<GridRowModel>(users)\r\n+    const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     const isInEditMode = false;\r\n     console.log('isInEditMode', isInEditMode);\r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n"
                },
                {
                    "date": 1658827379395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n \r\n     const handleCommit = (e: GridCellEditCommitParams) => {\r\n         console.log('here');\r\n         \r\n-        const array = rowID.map(r => {\r\n+        const array = users.map(r => {\r\n             if (r.id === e.id) {\r\n                 return {...r, [e.field]: e.value}\r\n             } else {\r\n                 return {...r}\r\n@@ -136,9 +136,10 @@\n     }\r\n \r\n     \r\n \r\n-    const cols: GridColDef[] = [{ field: 'id', headerName: 'ID', flex: 1, },\r\n+    const cols: GridColDef[] = [\r\n+    { field: 'id', headerName: 'ID', flex: 1, },\r\n     { field: 'firstName', headerName: 'First name', flex: 1, editable: true},\r\n     { field: 'lastName', headerName: 'Last name', flex: 1, editable: true},\r\n     { field: 'email', headerName: 'Email', flex: 1, editable: true},\r\n     {\r\n"
                },
                {
                    "date": 1658827961761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import _ from 'lodash'\r\n-import { useEffect, useState } from 'react';\r\n-import { DataGrid, GridCellEditCommitParams, GridColDef, GridRowModel, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n+import { useCallback, useEffect, useState } from 'react';\r\n+import { DataGrid, GridCellEditCommitParams, GridColDef, GridEditRowsModel, GridRowModel, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n@@ -45,16 +45,21 @@\n     // console.log('path', router.pathname)\r\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     const isInEditMode = false;\r\n     console.log('isInEditMode', isInEditMode);\r\n-    // const handleRowEditStart = (params, event) => {\r\n-    //     event.defaultMuiPrevented = true;\r\n-    // };\r\n+    const handleRowEditStart = (params, event) => {\r\n+        event.defaultMuiPrevented = true;\r\n+    };\r\n \r\n-    // const handleRowEditStop = (params, event) => {\r\n-    //     event.defaultMuiPrevented = true;\r\n-    // };\r\n+    const handleRowEditStop = (params, event) => {\r\n+        event.defaultMuiPrevented = true;\r\n+    };\r\n \r\n+    const [editRowsModel, setEditRowsModel] = useState({});\r\n+    const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n+        setEditRowsModel(model);\r\n+      }, []);\r\n+\r\n     // const handleEditClick = (id) => () => {\r\n     //     console.log('edit ID:', id);\r\n     //     // params.isEditable = true\r\n     //     // // setRowID(id)\r\n@@ -221,8 +226,10 @@\n                     // pageSize={5}\r\n                     // rowsPerPageOptions={[5]}\r\n                     // checkboxSelection\r\n                     editMode=\"row\"\r\n+                    editRowsModel={editRowsModel}\r\n+                    onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1658828013813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n                     // experimentalFeatures={{ newEditingApi: true }}\r\n                     // disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n-                    {JSON.stringify(users)}\r\n+                    editRowsModel: {JSON.stringify(editRowsModel)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n     )\r\n"
                },
                {
                    "date": 1658828050682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,9 +218,9 @@\n                         Add record\r\n                     </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n-                    onCellEditCommit={handleCommit}\r\n+                    // onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n                     rows={rows}\r\n                     columns={cols}\r\n                     // pageSize={5}\r\n"
                },
                {
                    "date": 1658828825755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,9 @@\n                     rows={rows}\r\n                     columns={cols}\r\n                     // pageSize={5}\r\n                     // rowsPerPageOptions={[5]}\r\n-                    // checkboxSelection\r\n+                    checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // rowModesModel={rowModesModel}\r\n"
                },
                {
                    "date": 1658828840925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,9 +241,9 @@\n                     //     toolbar: { setUsers, setRowModesModel },\r\n                     // }}\r\n                     \r\n                     // experimentalFeatures={{ newEditingApi: true }}\r\n-                    // disableSelectionOnClick\r\n+                    disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)}\r\n                 </div>\r\n"
                },
                {
                    "date": 1658829336723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,11 +181,11 @@\n                 )\r\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    <IconButton aria-label=\"edit\" size=\"small\">\r\n+                    {/* <IconButton aria-label=\"edit\" size=\"small\">\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n-                    </IconButton>\r\n+                    </IconButton> */}\r\n                     <IconButton aria-label=\"delete\" size=\"small\">\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n \r\n"
                },
                {
                    "date": 1658829382026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,11 +77,11 @@\n     // const handleSaveClick = (id) => () => {\r\n     //     setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n     // };\r\n \r\n-    // const handleDeleteClick = (id) => () => {\r\n-    //     setUsers(rows.filter((row) => row.id !== id));\r\n-    // };\r\n+    const handleDeleteClick = (id) => () => {\r\n+        setUsers(rows.filter((row) => row.id !== id));\r\n+    };\r\n \r\n     // const handleCancelClick = (id) => () => {\r\n     //     setRowID({\r\n     //         ...users,\r\n@@ -184,9 +184,9 @@\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                     {/* <IconButton aria-label=\"edit\" size=\"small\">\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n                     </IconButton> */}\r\n-                    <IconButton aria-label=\"delete\" size=\"small\">\r\n+                    <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(id)}>\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n \r\n                     {/* <GridActionsCellItem\r\n"
                },
                {
                    "date": 1658829442382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,8 +245,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)}\r\n+                    users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n     )\r\n"
                },
                {
                    "date": 1658829485602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n                     // experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n-                    editRowsModel: {JSON.stringify(editRowsModel)}\r\n+                    editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658829553901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,10 +222,10 @@\n                     // onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n                     rows={rows}\r\n                     columns={cols}\r\n-                    // pageSize={5}\r\n-                    // rowsPerPageOptions={[5]}\r\n+                    pageSize={5}\r\n+                    rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n"
                },
                {
                    "date": 1658829592092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n         cellClassName: 'actions',\r\n         renderCell: (params) => {\r\n             const id = params.id\r\n \r\n-            if (isInEditMode) {\r\n+            if (true) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"save\" size=\"small\">\r\n                             <EditIcon fontSize=\"inherit\"  />\r\n"
                },
                {
                    "date": 1658829621370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n             if (true) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"save\" size=\"small\">\r\n-                            <EditIcon fontSize=\"inherit\"  />\r\n+                            <SaveIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                         <IconButton aria-label=\"cancel\" size=\"small\">\r\n                             <DeleteIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n"
                },
                {
                    "date": 1658829633160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n         cellClassName: 'actions',\r\n         renderCell: (params) => {\r\n             const id = params.id\r\n \r\n-            if (true) {\r\n+            if (false) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"save\" size=\"small\">\r\n                             <SaveIcon fontSize=\"inherit\"  />\r\n"
                },
                {
                    "date": 1658829670964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n         cellClassName: 'actions',\r\n         renderCell: (params) => {\r\n             const id = params.id\r\n \r\n-            if (false) {\r\n+            if (isInEditMode) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"save\" size=\"small\">\r\n                             <SaveIcon fontSize=\"inherit\"  />\r\n"
                },
                {
                    "date": 1658830484844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import _ from 'lodash'\r\n-import { useCallback, useEffect, useState } from 'react';\r\n+import { useCallback, useEffect, useMemo, useState } from 'react';\r\n import { DataGrid, GridCellEditCommitParams, GridColDef, GridEditRowsModel, GridRowModel, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n@@ -43,9 +43,10 @@\n     const router = useRouter()\r\n \r\n     // console.log('path', router.pathname)\r\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n-    const isInEditMode = false;\r\n+    const [isEdit, setIsEdit] = useState(false)\r\n+    const isInEditMode = useCallback(() => setIsEdit(isEdit), [isEdit])\r\n     console.log('isInEditMode', isInEditMode);\r\n     const handleRowEditStart = (params, event) => {\r\n         event.defaultMuiPrevented = true;\r\n     };\r\n@@ -56,9 +57,11 @@\n \r\n     const [editRowsModel, setEditRowsModel] = useState({});\r\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n         setEditRowsModel(model);\r\n-      }, []);\r\n+        setIsEdit(true);\r\n+      },\r\n+    [])\r\n \r\n     // const handleEditClick = (id) => () => {\r\n     //     console.log('edit ID:', id);\r\n     //     // params.isEditable = true\r\n"
                },
                {
                    "date": 1658830574341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \r\n     // console.log('path', router.pathname)\r\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     const [isEdit, setIsEdit] = useState(false)\r\n-    const isInEditMode = useCallback(() => setIsEdit(isEdit), [isEdit])\r\n+    const isInEditMode = isEdit\r\n     console.log('isInEditMode', isInEditMode);\r\n     const handleRowEditStart = (params, event) => {\r\n         event.defaultMuiPrevented = true;\r\n     };\r\n"
                },
                {
                    "date": 1658830718061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,12 @@\n         setEditRowsModel(model);\r\n         setIsEdit(true);\r\n       },\r\n     [])\r\n+    \r\n+    const handleEditRowsStop = () => {\r\n+        setIsEdit(false);\r\n+    }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n     //     console.log('edit ID:', id);\r\n     //     // params.isEditable = true\r\n@@ -231,8 +235,9 @@\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n+                    onRowEditStop={handleEditRowsStop}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1658830915312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n         setEditRowsModel(model);\r\n         setIsEdit(true);\r\n       },\r\n-    [])\r\n+    [isEdit])\r\n     \r\n     const handleEditRowsStop = () => {\r\n         setIsEdit(false);\r\n     }\r\n"
                },
                {
                    "date": 1658830965893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n \r\n     const [editRowsModel, setEditRowsModel] = useState({});\r\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n         setEditRowsModel(model);\r\n-        setIsEdit(true);\r\n+        \r\n       },\r\n     [isEdit])\r\n     \r\n     const handleEditRowsStop = () => {\r\n"
                },
                {
                    "date": 1658830978212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n       },\r\n     [isEdit])\r\n     \r\n     const handleEditRowsStop = () => {\r\n-        setIsEdit(false);\r\n+        setIsEdit(true);\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n     //     console.log('edit ID:', id);\r\n"
                },
                {
                    "date": 1658831036535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,14 +57,14 @@\n \r\n     const [editRowsModel, setEditRowsModel] = useState({});\r\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n         setEditRowsModel(model);\r\n-        \r\n+        setIsEdit(false)\r\n       },\r\n-    [isEdit])\r\n+    [])\r\n     \r\n     const handleEditRowsStop = () => {\r\n-        setIsEdit(true);\r\n+        setIsEdit(false);\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n     //     console.log('edit ID:', id);\r\n"
                },
                {
                    "date": 1658831229301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,16 +57,19 @@\n \r\n     const [editRowsModel, setEditRowsModel] = useState({});\r\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n         setEditRowsModel(model);\r\n-        setIsEdit(false)\r\n       },\r\n     [])\r\n     \r\n     const handleEditRowsStop = () => {\r\n         setIsEdit(false);\r\n     }\r\n \r\n+    const handleEditRowsStart = () => {\r\n+        setIsEdit(true);\r\n+    }\r\n+\r\n     // const handleEditClick = (id) => () => {\r\n     //     console.log('edit ID:', id);\r\n     //     // params.isEditable = true\r\n     //     // // setRowID(id)\r\n@@ -236,8 +239,9 @@\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n                     onRowEditStop={handleEditRowsStop}\r\n+                    onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1658831274330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,11 +191,11 @@\n                 )\r\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    {/* <IconButton aria-label=\"edit\" size=\"small\">\r\n+                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n-                    </IconButton> */}\r\n+                    </IconButton>\r\n                     <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(id)}>\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n \r\n"
                },
                {
                    "date": 1658831369653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,15 +46,16 @@\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     const [isEdit, setIsEdit] = useState(false)\r\n     const isInEditMode = isEdit\r\n     console.log('isInEditMode', isInEditMode);\r\n-    const handleRowEditStart = (params, event) => {\r\n-        event.defaultMuiPrevented = true;\r\n-    };\r\n+    \r\n+    // const handleRowEditStart = (params, event) => {\r\n+    //     event.defaultMuiPrevented = true;\r\n+    // };\r\n \r\n-    const handleRowEditStop = (params, event) => {\r\n-        event.defaultMuiPrevented = true;\r\n-    };\r\n+    // const handleRowEditStop = (params, event) => {\r\n+    //     event.defaultMuiPrevented = true;\r\n+    // };\r\n \r\n     const [editRowsModel, setEditRowsModel] = useState({});\r\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n         setEditRowsModel(model);\r\n"
                },
                {
                    "date": 1658831502253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     const [isEdit, setIsEdit] = useState(false)\r\n     const isInEditMode = isEdit\r\n     console.log('isInEditMode', isInEditMode);\r\n-    \r\n+\r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n \r\n@@ -192,11 +192,11 @@\n                 )\r\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart}>\r\n+                    {/* <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n-                    </IconButton>\r\n+                    </IconButton> */}\r\n                     <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(id)}>\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n \r\n"
                },
                {
                    "date": 1658831989295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,28 +104,28 @@\n     //         setUsers(rows.filter((row) => row.id !== id));\r\n     //     }\r\n     // };\r\n \r\n-    // const processRowUpdate = (newRow) => {\r\n-    //     const updatedRow = { ...newRow };\r\n-    //     setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n-    //     return updatedRow;\r\n-    // };\r\n+    const processRowUpdate = (newRow) => {\r\n+        const updatedRow = { ...newRow };\r\n+        setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+        return updatedRow;\r\n+    };\r\n \r\n-    const handleCommit = (e: GridCellEditCommitParams) => {\r\n-        console.log('here');\r\n+    // const handleCommit = (e: GridCellEditCommitParams) => {\r\n+    //     console.log('here');\r\n         \r\n-        const array = users.map(r => {\r\n-            if (r.id === e.id) {\r\n-                return {...r, [e.field]: e.value}\r\n-            } else {\r\n-                return {...r}\r\n-            }\r\n-        })\r\n-        setRowID(_.cloneDeep(array))\r\n-        console.log('array', array[e.id]);\r\n+    //     const array = users.map(r => {\r\n+    //         if (r.id === e.id) {\r\n+    //             return {...r, [e.field]: e.value}\r\n+    //         } else {\r\n+    //             return {...r}\r\n+    //         }\r\n+    //     })\r\n+    //     setRowID(_.cloneDeep(array))\r\n+    //     console.log('array', array[e.id]);\r\n         \r\n-    }\r\n+    // }\r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n     //     const data = await response.json()\r\n     //     setUsers(data)\r\n@@ -173,9 +173,9 @@\n                         <IconButton aria-label=\"save\" size=\"small\">\r\n                             <SaveIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                         <IconButton aria-label=\"cancel\" size=\"small\">\r\n-                            <DeleteIcon fontSize=\"inherit\"  />\r\n+                            <CancelIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                     </Stack>\r\n                     // <GridActionsCellItem\r\n                     //     icon={<SaveIcon />}\r\n@@ -245,9 +245,9 @@\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n-                    // processRowUpdate={processRowUpdate}\r\n+                    processRowUpdate={processRowUpdate}\r\n                     // components={{\r\n                     //     Toolbar: EditToolbar,\r\n                     // }}\r\n                     // componentsProps={{\r\n"
                },
                {
                    "date": 1658886284941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,9 +253,9 @@\n                     // componentsProps={{\r\n                     //     toolbar: { setUsers, setRowModesModel },\r\n                     // }}\r\n                     \r\n-                    // experimentalFeatures={{ newEditingApi: true }}\r\n+                    experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n"
                },
                {
                    "date": 1658887740848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     const [isEdit, setIsEdit] = useState(false)\r\n     const isInEditMode = isEdit\r\n     console.log('isInEditMode', isInEditMode);\r\n-\r\n+    const rows = _.cloneDeep(users)\r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n \r\n@@ -92,14 +92,11 @@\n     const handleDeleteClick = (id) => () => {\r\n         setUsers(rows.filter((row) => row.id !== id));\r\n     };\r\n \r\n-    // const handleCancelClick = (id) => () => {\r\n-    //     setRowID({\r\n-    //         ...users,\r\n-    //         [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n-    //     });\r\n-\r\n+    const handleCancelClick = () => {\r\n+        setIsEdit(false);\r\n+    }\r\n     //     const editedRow = rows.find((row) => row.id === id);\r\n     //     if (editedRow!.isNew) {\r\n     //         setUsers(rows.filter((row) => row.id !== id));\r\n     //     }\r\n@@ -143,9 +140,9 @@\n     //     }\r\n     //     fetchData()\r\n     //   }, [])\r\n \r\n-    const rows = _.cloneDeep(users)\r\n+    \r\n \r\n     if (status === 'false') {\r\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n@@ -169,12 +166,12 @@\n \r\n             if (isInEditMode) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                        <IconButton aria-label=\"save\" size=\"small\">\r\n+                        <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(id)}>\r\n                             <SaveIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n-                        <IconButton aria-label=\"cancel\" size=\"small\">\r\n+                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(id)}>\r\n                             <CancelIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                     </Stack>\r\n                     // <GridActionsCellItem\r\n"
                },
                {
                    "date": 1658887750093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(id)}>\r\n                             <SaveIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n-                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(id)}>\r\n+                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick()}>\r\n                             <CancelIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                     </Stack>\r\n                     // <GridActionsCellItem\r\n"
                },
                {
                    "date": 1658887843759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,11 +84,14 @@\n     //     console.log(users);\r\n \r\n     // };\r\n \r\n-    // const handleSaveClick = (id) => () => {\r\n-    //     setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n-    // };\r\n+    const handleSaveClick = (params) => () => {\r\n+        // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n+        console.log('params', params);\r\n+        \r\n+        // setUsers(rows.map((row) => (row.id === params.id ? updatedRow : row)));\r\n+    };\r\n \r\n     const handleDeleteClick = (id) => () => {\r\n         setUsers(rows.filter((row) => row.id !== id));\r\n     };\r\n@@ -166,12 +169,12 @@\n \r\n             if (isInEditMode) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                        <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(id)}>\r\n+                        <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n                             <SaveIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n-                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick()}>\r\n+                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick}>\r\n                             <CancelIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                     </Stack>\r\n                     // <GridActionsCellItem\r\n"
                },
                {
                    "date": 1658888109060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     const handleSaveClick = (params) => () => {\r\n         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n         console.log('params', params);\r\n         \r\n-        // setUsers(rows.map((row) => (row.id === params.id ? updatedRow : row)));\r\n+        setUsers(rows.map((row) => (row.id === params.row.id ? updatedRow : row)));\r\n     };\r\n \r\n     const handleDeleteClick = (id) => () => {\r\n         setUsers(rows.filter((row) => row.id !== id));\r\n@@ -106,9 +106,9 @@\n     // };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n-        setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+        // setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n         return updatedRow;\r\n     };\r\n \r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n"
                },
                {
                    "date": 1658888178672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     const handleSaveClick = (params) => () => {\r\n         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n         console.log('params', params);\r\n         \r\n-        setUsers(rows.map((row) => (row.id === params.row.id ? updatedRow : row)));\r\n+        // setUsers(rows.map((row) => (row.id === params.row.id ? params : row)));\r\n     };\r\n \r\n     const handleDeleteClick = (id) => () => {\r\n         setUsers(rows.filter((row) => row.id !== id));\r\n"
                },
                {
                    "date": 1658888374914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,9 @@\n     };\r\n \r\n     const handleCancelClick = () => {\r\n         setIsEdit(false);\r\n+        return users\r\n     }\r\n     //     const editedRow = rows.find((row) => row.id === id);\r\n     //     if (editedRow!.isNew) {\r\n     //         setUsers(rows.filter((row) => row.id !== id));\r\n"
                },
                {
                    "date": 1658888555230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n     };\r\n \r\n     const handleCancelClick = () => {\r\n         setIsEdit(false);\r\n-        return users\r\n+        \r\n     }\r\n     //     const editedRow = rows.find((row) => row.id === id);\r\n     //     if (editedRow!.isNew) {\r\n     //         setUsers(rows.filter((row) => row.id !== id));\r\n@@ -108,8 +108,10 @@\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n         // setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+        console.log('updateRow', updatedRow);\r\n+        \r\n         return updatedRow;\r\n     };\r\n \r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n"
                },
                {
                    "date": 1658888691947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n     // };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n-        // setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+        setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n         console.log('updateRow', updatedRow);\r\n         \r\n         return updatedRow;\r\n     };\r\n"
                },
                {
                    "date": 1658888811667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,10 +107,10 @@\n     // };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n+        console.log('updateRow', updatedRow);\r\n         setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n-        console.log('updateRow', updatedRow);\r\n         \r\n         return updatedRow;\r\n     };\r\n \r\n"
                },
                {
                    "date": 1658888854546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n         console.log('updateRow', updatedRow);\r\n-        setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+        // setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n         \r\n         return updatedRow;\r\n     };\r\n \r\n"
                },
                {
                    "date": 1658888960554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n     };\r\n \r\n     const handleCancelClick = () => {\r\n         setIsEdit(false);\r\n-        \r\n+        return users\r\n     }\r\n     //     const editedRow = rows.find((row) => row.id === id);\r\n     //     if (editedRow!.isNew) {\r\n     //         setUsers(rows.filter((row) => row.id !== id));\r\n"
                },
                {
                    "date": 1658889597966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,12 +26,12 @@\n import { useRouter } from 'next/router';\r\n \r\n // interface userList {\r\n //     is: number,\r\n-//     firstName: string,\r\n-//     lastName: string,\r\n-//     email: string,\r\n-//     password: string\r\n+    // firstName: string,\r\n+    // lastName: string,\r\n+    // email: string,\r\n+    // password: string\r\n // }\r\n \r\n \r\n export default function userPage() {\r\n@@ -46,9 +46,9 @@\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     const [isEdit, setIsEdit] = useState(false)\r\n     const isInEditMode = isEdit\r\n     console.log('isInEditMode', isInEditMode);\r\n-    const rows = _.cloneDeep(users)\r\n+    const [usersClone, setUsersClone] = useState(_.cloneDeep(users))\r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n \r\n@@ -60,8 +60,18 @@\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n         setEditRowsModel(model);\r\n       },\r\n     [])\r\n+\r\n+    const handleAddRow = () => {\r\n+        setUsersClone((prevUsersClone) => [...prevUsersClone, {\r\n+            id: Date.now(),\r\n+            firstName: '',\r\n+            lastName: '',\r\n+            email: '',\r\n+            password: 'Abc@1234',\r\n+        }]);\r\n+    }\r\n     \r\n     const handleEditRowsStop = () => {\r\n         setIsEdit(false);\r\n     }\r\n@@ -88,29 +98,29 @@\n     const handleSaveClick = (params) => () => {\r\n         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n         console.log('params', params);\r\n         \r\n-        // setUsers(rows.map((row) => (row.id === params.row.id ? params : row)));\r\n+        // setUsers(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n     };\r\n \r\n     const handleDeleteClick = (id) => () => {\r\n-        setUsers(rows.filter((row) => row.id !== id));\r\n+        setUsers(usersClone.filter((row) => row.id !== id));\r\n     };\r\n \r\n     const handleCancelClick = () => {\r\n         setIsEdit(false);\r\n         return users\r\n     }\r\n-    //     const editedRow = rows.find((row) => row.id === id);\r\n+    //     const editedRow = usersClone.find((row) => row.id === id);\r\n     //     if (editedRow!.isNew) {\r\n-    //         setUsers(rows.filter((row) => row.id !== id));\r\n+    //         setUsers(usersClone.filter((row) => row.id !== id));\r\n     //     }\r\n     // };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n         console.log('updateRow', updatedRow);\r\n-        // setUsers(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+        // setUsers(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n         \r\n         return updatedRow;\r\n     };\r\n \r\n@@ -234,9 +244,9 @@\n                 </Stack>\r\n                 <DataGrid\r\n                     // onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n-                    rows={rows}\r\n+                    usersClone={usersClone}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1658889668905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n     const handleSaveClick = (params) => () => {\r\n         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n         console.log('params', params);\r\n         \r\n-        // setUsers(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n+        setUsers(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n     };\r\n \r\n     const handleDeleteClick = (id) => () => {\r\n         setUsers(usersClone.filter((row) => row.id !== id));\r\n"
                },
                {
                    "date": 1658889691191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n                 </Stack>\r\n                 <DataGrid\r\n                     // onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n-                    usersClone={usersClone}\r\n+                    rows={usersClone}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1658889720309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,9 @@\n             <Box sx={{\r\n                 height: 405, width: '100%'\r\n             }}>\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    <Button color=\"primary\" startIcon={<AddIcon />} >\r\n+                    <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                         Add record\r\n                     </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n"
                },
                {
                    "date": 1658890068080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n         console.log('updateRow', updatedRow);\r\n-        // setUsers(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+        setUsersClone(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n         \r\n         return updatedRow;\r\n     };\r\n \r\n"
                },
                {
                    "date": 1658890088300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,8 +271,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n+                    usersLcone: {JSON.stringify(usersCLone)}\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658890097787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersLcone: {JSON.stringify(usersCLone)}\r\n+                    usersClone: {JSON.stringify(usersClone)}\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658890104704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {JSON.stringify(usersClone)}\r\n+                    usersClone: {JSON.stringify(usersClone)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658890219613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n     const handleSaveClick = (params) => () => {\r\n         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n         console.log('params', params);\r\n         \r\n-        setUsers(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n+        setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n     };\r\n \r\n     const handleDeleteClick = (id) => () => {\r\n         setUsers(usersClone.filter((row) => row.id !== id));\r\n"
                },
                {
                    "date": 1658890276899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n                     usersClone: {JSON.stringify(usersClone)} <br></br>\r\n-                    users: {JSON.stringify(users)}\r\n+                    {/* users: {JSON.stringify(users)} */}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n     )\r\n"
                },
                {
                    "date": 1658890308219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {JSON.stringify(usersClone)} <br></br>\r\n+                    usersClone: {usersClone} <br></br>\r\n                     {/* users: {JSON.stringify(users)} */}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658890315318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {usersClone} <br></br>\r\n+                    usersClone: {...usersClone} <br></br>\r\n                     {/* users: {JSON.stringify(users)} */}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658890326768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {...usersClone} <br></br>\r\n+                    usersClone: {JSON.stringify(usersClone)} <br></br>\r\n                     {/* users: {JSON.stringify(users)} */}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658890365451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n \r\n             if (isInEditMode) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                        <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n+                        <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick}>\r\n                             <SaveIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                         <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick}>\r\n                             <CancelIcon fontSize=\"inherit\"  />\r\n"
                },
                {
                    "date": 1658890419379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,16 +94,16 @@\n     //     console.log(users);\r\n \r\n     // };\r\n \r\n-    const handleSaveClick = (params) => () => {\r\n+    const handleSaveClick = (params) => {\r\n         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n         console.log('params', params);\r\n         \r\n         setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n     };\r\n \r\n-    const handleDeleteClick = (id) => () => {\r\n+    const handleDeleteClick = (id) => {\r\n         setUsers(usersClone.filter((row) => row.id !== id));\r\n     };\r\n \r\n     const handleCancelClick = () => {\r\n"
                },
                {
                    "date": 1658890446284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n         \r\n         setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n     };\r\n \r\n-    const handleDeleteClick = (id) => {\r\n+    const handleDeleteClick = (id) => () => {\r\n         setUsers(usersClone.filter((row) => row.id !== id));\r\n     };\r\n \r\n     const handleCancelClick = () => {\r\n"
                },
                {
                    "date": 1658890526213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n     //     console.log(users);\r\n \r\n     // };\r\n \r\n-    const handleSaveClick = (params) => {\r\n+    const handleSaveClick = (params) => () => {\r\n         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n         console.log('params', params);\r\n         \r\n         setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n@@ -182,9 +182,9 @@\n \r\n             if (isInEditMode) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                        <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick}>\r\n+                        <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n                             <SaveIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                         <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick}>\r\n                             <CancelIcon fontSize=\"inherit\"  />\r\n"
                },
                {
                    "date": 1658890598108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {JSON.stringify(usersClone)} <br></br>\r\n+                    usersClone: {JSON.parse(JSON.stringify(usersClone))} <br></br>\r\n                     {/* users: {JSON.stringify(users)} */}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658890615804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {JSON.parse(JSON.stringify(usersClone))} <br></br>\r\n+                    usersClone: {JSON.parse(JSON.stringify([usersClone]))} <br></br>\r\n                     {/* users: {JSON.stringify(users)} */}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658890652837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {JSON.parse(JSON.stringify([usersClone]))} <br></br>\r\n+                    usersClone: {JSON.parse(JSON.stringify({usersClone}))} <br></br>\r\n                     {/* users: {JSON.stringify(users)} */}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658890680091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {JSON.parse(JSON.stringify({usersClone}))} <br></br>\r\n+                    usersClone: {JSON.parse(JSON.stringify(usersClone))} <br></br>\r\n                     {/* users: {JSON.stringify(users)} */}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658890741052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,10 +271,10 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {JSON.parse(JSON.stringify(usersClone))} <br></br>\r\n-                    {/* users: {JSON.stringify(users)} */}\r\n+                    {/* usersClone: {JSON.parse(JSON.stringify(usersClone))} <br></br> */}\r\n+                    users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n     )\r\n"
                },
                {
                    "date": 1658890794012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,10 @@\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     const [isEdit, setIsEdit] = useState(false)\r\n     const isInEditMode = isEdit\r\n     console.log('isInEditMode', isInEditMode);\r\n-    const [usersClone, setUsersClone] = useState(_.cloneDeep(users))\r\n+    const [usersClone, setUsersClone] = useState([])\r\n+    setUsersClone(_.cloneDeep(users))\r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n \r\n"
                },
                {
                    "date": 1658890927340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,9 @@\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     const [isEdit, setIsEdit] = useState(false)\r\n     const isInEditMode = isEdit\r\n     console.log('isInEditMode', isInEditMode);\r\n-    const [usersClone, setUsersClone] = useState([])\r\n-    setUsersClone(_.cloneDeep(users))\r\n+    let usersClone = _.cloneDeep(users)\r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n \r\n@@ -63,15 +62,15 @@\n       },\r\n     [])\r\n \r\n     const handleAddRow = () => {\r\n-        setUsersClone((prevUsersClone) => [...prevUsersClone, {\r\n+        usersClone.unshift({\r\n             id: Date.now(),\r\n             firstName: '',\r\n             lastName: '',\r\n             email: '',\r\n             password: 'Abc@1234',\r\n-        }]);\r\n+        });\r\n     }\r\n     \r\n     const handleEditRowsStop = () => {\r\n         setIsEdit(false);\r\n"
                },
                {
                    "date": 1658891061951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,10 @@\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     const [isEdit, setIsEdit] = useState(false)\r\n     const isInEditMode = isEdit\r\n     console.log('isInEditMode', isInEditMode);\r\n-    let usersClone = _.cloneDeep(users)\r\n+    const [usersClone, setUsersClone] = useState([])\r\n+    setUsersClone(_.cloneDeep(users))\r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n \r\n@@ -62,15 +63,15 @@\n       },\r\n     [])\r\n \r\n     const handleAddRow = () => {\r\n-        usersClone.unshift({\r\n+        setUsersClone((prevUsersClone) => [{\r\n             id: Date.now(),\r\n             firstName: '',\r\n             lastName: '',\r\n             email: '',\r\n             password: 'Abc@1234',\r\n-        });\r\n+        }, ...prevUsersClone]);\r\n     }\r\n     \r\n     const handleEditRowsStop = () => {\r\n         setIsEdit(false);\r\n"
                },
                {
                    "date": 1658891085347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,10 @@\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     const [isEdit, setIsEdit] = useState(false)\r\n     const isInEditMode = isEdit\r\n     console.log('isInEditMode', isInEditMode);\r\n-    const [usersClone, setUsersClone] = useState([])\r\n-    setUsersClone(_.cloneDeep(users))\r\n+    const [usersClone, setUsersClone] = useState(_.cloneDeep(users))\r\n+\r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n \r\n"
                },
                {
                    "date": 1658891196457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    {/* usersClone: {JSON.parse(JSON.stringify(usersClone))} <br></br> */}\r\n+                    usersClone: {JSON.parse(JSON.stringify(usersClone))} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658891204314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {JSON.parse(JSON.stringify(usersClone))} <br></br>\r\n+                    usersClone: JSON.stringify(usersClone)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658891247084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n         setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n     };\r\n \r\n     const handleDeleteClick = (id) => () => {\r\n-        setUsers(usersClone.filter((row) => row.id !== id));\r\n+        setUsersClone(usersClone.filter((row) => row.id !== id));\r\n     };\r\n \r\n     const handleCancelClick = () => {\r\n         setIsEdit(false);\r\n@@ -272,9 +272,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: JSON.stringify(usersClone)} <br></br>\r\n+                    usersClone: {JSON.stringify(usersClone)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658891570989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     const [isEdit, setIsEdit] = useState(false)\r\n     const isInEditMode = isEdit\r\n     console.log('isInEditMode', isInEditMode);\r\n-    const [usersClone, setUsersClone] = useState(_.cloneDeep(users))\r\n+    const [usersClone, setUsersClone] = useState(_.clone(users))\r\n \r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n"
                },
                {
                    "date": 1658891690784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {JSON.stringify(usersClone)} <br></br>\r\n+                    usersClone: {usersClone} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658891700020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {usersClone} <br></br>\r\n+                    usersClone: {[usersClone]} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658891711121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {[usersClone]} <br></br>\r\n+                    usersClone: {{usersClone}} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658891735351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {{usersClone}} <br></br>\r\n+                    usersClone: {usersClone} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658891869861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {usersClone} <br></br>\r\n+                    usersClone: {usersClone.map(e => <div>{e}</div>)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658891909433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {usersClone.map(e => <div>{e}</div>)} <br></br>\r\n+                    usersClone: {usersClone.map(e => <div>{e.id}</div>)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658892124725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {usersClone.map(e => <div>{e.id}</div>)} <br></br>\r\n+                    usersClone: {usersClone.map(e => <div>{JSON.stringify(e)}</div>)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1658894276315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n     [])\r\n \r\n     const handleAddRow = () => {\r\n         setUsersClone((prevUsersClone) => [{\r\n-            id: Date.now(),\r\n+            id: null,\r\n             firstName: '',\r\n             lastName: '',\r\n             email: '',\r\n             password: 'Abc@1234',\r\n@@ -106,11 +106,26 @@\n     const handleDeleteClick = (id) => () => {\r\n         setUsersClone(usersClone.filter((row) => row.id !== id));\r\n     };\r\n \r\n-    const handleCancelClick = () => {\r\n-        setIsEdit(false);\r\n-        return users\r\n+    const handleCancelClick = (params) => () => {\r\n+        // setIsEdit(false);\r\n+        // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n+        // return users\r\n+\r\n+        const rowId = params.id\r\n+        \r\n+        if (usersClone[rowId].id === null) {\r\n+            usersClone.splice(rowId, 1);\r\n+        } else {\r\n+            const oldRow = users.find(\r\n+            (e) => e.id === rowId\r\n+            );\r\n+            console.log(\"oldRow\", oldRow);\r\n+            usersClone[rowId] = _.cloneDeep(oldRow);\r\n+            usersClone[rowId].isEdit = false;\r\n+        }\r\n+        \r\n     }\r\n     //     const editedRow = usersClone.find((row) => row.id === id);\r\n     //     if (editedRow!.isNew) {\r\n     //         setUsers(usersClone.filter((row) => row.id !== id));\r\n@@ -180,15 +195,15 @@\n         cellClassName: 'actions',\r\n         renderCell: (params) => {\r\n             const id = params.id\r\n \r\n-            if (isInEditMode) {\r\n+            if (usersClone[id].isEdit) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n                             <SaveIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n-                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick}>\r\n+                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(params)}>\r\n                             <CancelIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                     </Stack>\r\n                     // <GridActionsCellItem\r\n@@ -253,10 +268,10 @@\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n-                    onRowEditStop={handleEditRowsStop}\r\n-                    onRowEditStart={handleEditRowsStart}\r\n+                    // onRowEditStop={handleEditRowsStop}\r\n+                    // onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1658896424236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n         if (usersClone[rowId].id === null) {\r\n             usersClone.splice(rowId, 1);\r\n         } else {\r\n             const oldRow = users.find(\r\n-            (e) => e.id === rowId\r\n+                (e) => e.id === rowId\r\n             );\r\n             console.log(\"oldRow\", oldRow);\r\n             usersClone[rowId] = _.cloneDeep(oldRow);\r\n             usersClone[rowId].isEdit = false;\r\n@@ -139,8 +139,12 @@\n         \r\n         return updatedRow;\r\n     };\r\n \r\n+    const handleDoubleClick = (params) => () => {\r\n+        usersClone[params.id]\r\n+    }\r\n+\r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n     //     console.log('here');\r\n         \r\n     //     const array = users.map(r => {\r\n@@ -275,8 +279,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n+                    onRowDoubleClick={handleDoubleClick}\r\n                     // components={{\r\n                     //     Toolbar: EditToolbar,\r\n                     // }}\r\n                     // componentsProps={{\r\n"
                },
                {
                    "date": 1658902368185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,10 +272,10 @@\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n-                    // onRowEditStop={handleEditRowsStop}\r\n-                    // onRowEditStart={handleEditRowsStart}\r\n+                    onRowEditStop={handleEditRowsStop}\r\n+                    onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1658902798456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,13 @@\n     const handleEditRowsStop = () => {\r\n         setIsEdit(false);\r\n     }\r\n \r\n-    const handleEditRowsStart = () => {\r\n-        setIsEdit(true);\r\n+    const handleEditRowsStart = (id) => {\r\n+        // setIsEdit(true);\r\n+        setUsersClone(usersClone.map(e => {\r\n+            e.id === id? {...e, isEdit: true}: e\r\n+        }))\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n     //     console.log('edit ID:', id);\r\n"
                },
                {
                    "date": 1658902851935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n     const handleEditRowsStop = () => {\r\n         setIsEdit(false);\r\n     }\r\n \r\n-    const handleEditRowsStart = (id) => {\r\n+    const handleEditRowsStart = (id) => () => {\r\n         // setIsEdit(true);\r\n         setUsersClone(usersClone.map(e => {\r\n             e.id === id? {...e, isEdit: true}: e\r\n         }))\r\n@@ -228,11 +228,11 @@\n                 )\r\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    {/* <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart}>\r\n+                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(id)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n-                    </IconButton> */}\r\n+                    </IconButton>\r\n                     <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(id)}>\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n \r\n"
                },
                {
                    "date": 1658902886443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,9 +228,9 @@\n                 )\r\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(id)}>\r\n+                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n                     <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(id)}>\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n"
                },
                {
                    "date": 1658902901340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,11 +228,11 @@\n                 )\r\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n+                    {/* <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n-                    </IconButton>\r\n+                    </IconButton> */}\r\n                     <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(id)}>\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n \r\n"
                },
                {
                    "date": 1658902929709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,12 +76,12 @@\n     const handleEditRowsStop = () => {\r\n         setIsEdit(false);\r\n     }\r\n \r\n-    const handleEditRowsStart = (id) => () => {\r\n+    const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n         setUsersClone(usersClone.map(e => {\r\n-            e.id === id? {...e, isEdit: true}: e\r\n+            e.id === params.id? {...e, isEdit: true}: e\r\n         }))\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n@@ -228,11 +228,11 @@\n                 )\r\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    {/* <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n+                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n-                    </IconButton> */}\r\n+                    </IconButton>\r\n                     <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(id)}>\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n \r\n"
                },
                {
                    "date": 1658903007847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,10 +275,10 @@\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n-                    onRowEditStop={handleEditRowsStop}\r\n-                    onRowEditStart={handleEditRowsStart}\r\n+                    // onRowEditStop={handleEditRowsStop}\r\n+                    // onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1658903135402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,8 +107,9 @@\n     };\r\n \r\n     const handleDeleteClick = (id) => () => {\r\n         setUsersClone(usersClone.filter((row) => row.id !== id));\r\n+        setUsers(_.cloneDeep(usersClone))\r\n     };\r\n \r\n     const handleCancelClick = (params) => () => {\r\n         // setIsEdit(false);\r\n"
                },
                {
                    "date": 1658903320820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n //     GridRowModel,\r\n // } from '@mui/x-data-grid-pro';\r\n import { useAppContext } from '../../context/AppContext';\r\n import { useRouter } from 'next/router';\r\n+import { idID } from '@mui/material/locale';\r\n \r\n // interface userList {\r\n //     is: number,\r\n     // firstName: string,\r\n@@ -72,9 +73,9 @@\n             password: 'Abc@1234',\r\n         }, ...prevUsersClone]);\r\n     }\r\n     \r\n-    const handleEditRowsStop = () => {\r\n+    const handleEditRowsStop = (params) => () => {\r\n         setIsEdit(false);\r\n     }\r\n \r\n     const handleEditRowsStart = (params) => () => {\r\n@@ -229,9 +230,9 @@\n                 )\r\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n+                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(id)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n                     <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(id)}>\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n@@ -276,10 +277,10 @@\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n-                    // onRowEditStop={handleEditRowsStop}\r\n-                    // onRowEditStart={handleEditRowsStart}\r\n+                    onRowEditStop={(params) => handleEditRowsStop(params)}\r\n+                    onRowEditStart={(params) => handleEditRowsStart(params)}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1658903424306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,10 @@\n         width: 100,\r\n         cellClassName: 'actions',\r\n         renderCell: (params) => {\r\n             const id = params.id\r\n-\r\n+            console.log('params', params);\r\n+            \r\n             if (usersClone[id].isEdit) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n"
                },
                {
                    "date": 1658903647062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,9 @@\n         renderCell: (params) => {\r\n             const id = params.id\r\n             console.log('params', params);\r\n             \r\n-            if (usersClone[id].isEdit) {\r\n+            if (params.row.isEdit) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n                             <SaveIcon fontSize=\"inherit\"  />\r\n"
                },
                {
                    "date": 1658903680867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,10 +278,10 @@\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n-                    onRowEditStop={(params) => handleEditRowsStop(params)}\r\n-                    onRowEditStart={(params) => handleEditRowsStart(params)}\r\n+                    onRowEditStop={handleEditRowsStop}\r\n+                    onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1658903724726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,9 @@\n                 )\r\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(id)}>\r\n+                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params.row.id)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n                     <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(id)}>\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n"
                },
                {
                    "date": 1658903742520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,9 @@\n                 )\r\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params.row.id)}>\r\n+                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n                     <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(id)}>\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n"
                },
                {
                    "date": 1658903769845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n \r\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n         setUsersClone(usersClone.map(e => {\r\n-            e.id === params.id? {...e, isEdit: true}: e\r\n+            e.id === params.row.id? {...e, isEdit: true}: e\r\n         }))\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n"
                },
                {
                    "date": 1658903779480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n \r\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n         setUsersClone(usersClone.map(e => {\r\n-            e.id === params.row.id? {...e, isEdit: true}: e\r\n+            e.id === params.row.idq? {...e, isEdit: true}: e\r\n         }))\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n"
                },
                {
                    "date": 1658903787051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n \r\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n         setUsersClone(usersClone.map(e => {\r\n-            e.id === params.row.idq? {...e, isEdit: true}: e\r\n+            e.id === params.row.id? {...e, isEdit: true}: e\r\n         }))\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n"
                },
                {
                    "date": 1658903833722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,8 +79,10 @@\n     }\r\n \r\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n+        console.log('params', params);\r\n+        \r\n         setUsersClone(usersClone.map(e => {\r\n             e.id === params.row.id? {...e, isEdit: true}: e\r\n         }))\r\n     }\r\n@@ -203,9 +205,9 @@\n         width: 100,\r\n         cellClassName: 'actions',\r\n         renderCell: (params) => {\r\n             const id = params.id\r\n-            console.log('params', params);\r\n+            // console.log('params', params);\r\n             \r\n             if (params.row.isEdit) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n"
                },
                {
                    "date": 1658903957236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,10 @@\n     const isInEditMode = isEdit\r\n     console.log('isInEditMode', isInEditMode);\r\n     const [usersClone, setUsersClone] = useState(_.clone(users))\r\n \r\n+    console.log('clone', usersClone);\r\n+    \r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n \r\n"
                },
                {
                    "date": 1658904026137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,10 @@\n         console.log('params', params);\r\n         \r\n         setUsersClone(usersClone.map(e => {\r\n             e.id === params.row.id? {...e, isEdit: true}: e\r\n+            console.log('e', e);\r\n+            \r\n         }))\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n"
                },
                {
                    "date": 1658904129719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,11 +82,11 @@\n \r\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n         console.log('params', params);\r\n-        \r\n+        params.isEdit = true\r\n         setUsersClone(usersClone.map(e => {\r\n-            e.id === params.row.id? {...e, isEdit: true}: e\r\n+            e.id === params.row.id? params: e\r\n             console.log('e', e);\r\n             \r\n         }))\r\n     }\r\n"
                },
                {
                    "date": 1658904149709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \r\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n         console.log('params', params);\r\n-        params.isEdit = true\r\n+        params.row.isEdit = true\r\n         setUsersClone(usersClone.map(e => {\r\n             e.id === params.row.id? params: e\r\n             console.log('e', e);\r\n             \r\n"
                },
                {
                    "date": 1658904198671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                     <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n-                    <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(id)}>\r\n+                    <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(params)}>\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n \r\n                     {/* <GridActionsCellItem\r\n"
                },
                {
                    "date": 1658904281656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n         console.log('params', params);\r\n         params.row.isEdit = true\r\n-        setUsersClone(usersClone.map(e => {\r\n+        setUsersClone(users.map(e => {\r\n             e.id === params.row.id? params: e\r\n             console.log('e', e);\r\n             \r\n         }))\r\n"
                },
                {
                    "date": 1658904831291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,14 +82,11 @@\n \r\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n         console.log('params', params);\r\n-        params.row.isEdit = true\r\n-        setUsersClone(users.map(e => {\r\n-            e.id === params.row.id? params: e\r\n-            console.log('e', e);\r\n-            \r\n-        }))\r\n+        // params.row.isEdit = true\r\n+        // setUsersClone()\r\n+        usersClone[params.id].isEdit = true\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n     //     console.log('edit ID:', id);\r\n"
                },
                {
                    "date": 1658905009644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,11 +127,11 @@\n         } else {\r\n             const oldRow = users.find(\r\n                 (e) => e.id === rowId\r\n             );\r\n-            console.log(\"oldRow\", oldRow);\r\n-            usersClone[rowId] = _.cloneDeep(oldRow);\r\n-            usersClone[rowId].isEdit = false;\r\n+            console.log(\"oldRow\", usersClone[rowId]);\r\n+            // usersClone[rowId] = _.cloneDeep(oldRow);\r\n+            // usersClone[rowId].isEdit = false;\r\n         }\r\n         \r\n     }\r\n     //     const editedRow = usersClone.find((row) => row.id === id);\r\n"
                },
                {
                    "date": 1658905117320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n         // setIsEdit(false);\r\n         // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n         // return users\r\n \r\n-        const rowId = params.id\r\n+        const rowId = params.row.id\r\n         \r\n         if (usersClone[rowId].id === null) {\r\n             usersClone.splice(rowId, 1);\r\n         } else {\r\n"
                },
                {
                    "date": 1658905136515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,11 +127,11 @@\n         } else {\r\n             const oldRow = users.find(\r\n                 (e) => e.id === rowId\r\n             );\r\n+            usersClone[rowId].isEdit = false;\r\n             console.log(\"oldRow\", usersClone[rowId]);\r\n             // usersClone[rowId] = _.cloneDeep(oldRow);\r\n-            // usersClone[rowId].isEdit = false;\r\n         }\r\n         \r\n     }\r\n     //     const editedRow = usersClone.find((row) => row.id === id);\r\n"
                },
                {
                    "date": 1658905294153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,9 @@\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n                     onRowEditStop={handleEditRowsStop}\r\n                     onRowEditStart={handleEditRowsStart}\r\n-                    // rowModesModel={rowModesModel}\r\n+                    rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n"
                },
                {
                    "date": 1658905328903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,9 @@\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n                     onRowEditStop={handleEditRowsStop}\r\n                     onRowEditStart={handleEditRowsStart}\r\n-                    rowModesModel={rowModesModel}\r\n+                    // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n"
                },
                {
                    "date": 1658905342932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,10 +281,10 @@\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n-                    onRowEditStop={handleEditRowsStop}\r\n-                    onRowEditStart={handleEditRowsStart}\r\n+                    // onRowEditStop={handleEditRowsStop}\r\n+                    // onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1658905490725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n     [])\r\n \r\n     const handleAddRow = () => {\r\n         setUsersClone((prevUsersClone) => [{\r\n-            id: null,\r\n+            id: Date.now(),\r\n             firstName: '',\r\n             lastName: '',\r\n             email: '',\r\n             password: 'Abc@1234',\r\n"
                },
                {
                    "date": 1658905696857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,12 @@\n         // setIsEdit(true);\r\n         console.log('params', params);\r\n         // params.row.isEdit = true\r\n         // setUsersClone()\r\n-        usersClone[params.id].isEdit = true\r\n+        // usersClone[params.id].isEdit = true\r\n+        usersClone.map(e => {\r\n+            e.id === params.id? {...e, isEdit: true}: e\r\n+        })\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n     //     console.log('edit ID:', id);\r\n"
                },
                {
                    "date": 1658906037303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,15 +81,17 @@\n     }\r\n \r\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n+        params.row.isEdit = true\r\n         console.log('params', params);\r\n-        // params.row.isEdit = true\r\n         // setUsersClone()\r\n         // usersClone[params.id].isEdit = true\r\n-        usersClone.map(e => {\r\n-            e.id === params.id? {...e, isEdit: true}: e\r\n-        })\r\n+        // usersClone.map(e => {\r\n+        //     e.id === params.id? params : e\r\n+        // })\r\n+        usersClone[params.id] = _.cloneDeep(params);\r\n+        // usersClone[params.id].isEdit = false;\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n     //     console.log('edit ID:', id);\r\n"
                },
                {
                    "date": 1658906073156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,10 +88,10 @@\n         // usersClone[params.id].isEdit = true\r\n         // usersClone.map(e => {\r\n         //     e.id === params.id? params : e\r\n         // })\r\n-        usersClone[params.id] = _.cloneDeep(params);\r\n-        // usersClone[params.id].isEdit = false;\r\n+        // usersClone[params.id] = _.cloneDeep(params);\r\n+        usersClone[params.id].isEdit = false;\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n     //     console.log('edit ID:', id);\r\n"
                },
                {
                    "date": 1658906098282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n         // usersClone.map(e => {\r\n         //     e.id === params.id? params : e\r\n         // })\r\n         // usersClone[params.id] = _.cloneDeep(params);\r\n-        usersClone[params.id].isEdit = false;\r\n+        usersClone[params.id].isEdit = true;\r\n     }\r\n \r\n     // const handleEditClick = (id) => () => {\r\n     //     console.log('edit ID:', id);\r\n"
                },
                {
                    "date": 1658906179494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n         // setIsEdit(false);\r\n         // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n         // return users\r\n \r\n-        const rowId = params.row.id\r\n+        const rowId = params.id\r\n         \r\n         if (usersClone[rowId].id === null) {\r\n             usersClone.splice(rowId, 1);\r\n         } else {\r\n"
                },
                {
                    "date": 1658906391831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,17 +124,17 @@\n         // setIsEdit(false);\r\n         // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n         // return users\r\n \r\n-        const rowId = params.id\r\n-        \r\n+        const rowId = params.row.id\r\n+        params.row.isEdit = false\r\n         if (usersClone[rowId].id === null) {\r\n             usersClone.splice(rowId, 1);\r\n         } else {\r\n-            const oldRow = users.find(\r\n-                (e) => e.id === rowId\r\n-            );\r\n-            usersClone[rowId].isEdit = false;\r\n+            // const oldRow = users.find(\r\n+            //     (e) => e.id === rowId\r\n+            // );\r\n+            usersClone[params.id].isEdit = false;\r\n             console.log(\"oldRow\", usersClone[rowId]);\r\n             // usersClone[rowId] = _.cloneDeep(oldRow);\r\n         }\r\n         \r\n"
                },
                {
                    "date": 1658906432392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,10 @@\n             // );\r\n             usersClone[params.id].isEdit = false;\r\n             console.log(\"oldRow\", usersClone[rowId]);\r\n             // usersClone[rowId] = _.cloneDeep(oldRow);\r\n+            console.log('<><><>', usersClone);\r\n+            \r\n         }\r\n         \r\n     }\r\n     //     const editedRow = usersClone.find((row) => row.id === id);\r\n"
                },
                {
                    "date": 1658906460665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,11 +135,11 @@\n             // );\r\n             usersClone[params.id].isEdit = false;\r\n             console.log(\"oldRow\", usersClone[rowId]);\r\n             // usersClone[rowId] = _.cloneDeep(oldRow);\r\n-            console.log('<><><>', usersClone);\r\n             \r\n         }\r\n+        console.log('<><><>', usersClone);\r\n         \r\n     }\r\n     //     const editedRow = usersClone.find((row) => row.id === id);\r\n     //     if (editedRow!.isNew) {\r\n"
                },
                {
                    "date": 1658906521931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n         width: 100,\r\n         cellClassName: 'actions',\r\n         renderCell: (params) => {\r\n             const id = params.id\r\n-            // console.log('params', params);\r\n+            console.log('params', params);\r\n             \r\n             if (params.row.isEdit) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n"
                },
                {
                    "date": 1658906596082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,9 @@\n         renderCell: (params) => {\r\n             const id = params.id\r\n             console.log('params', params);\r\n             \r\n-            if (params.row.isEdit) {\r\n+            if (params.row?.isEdit) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n                             <SaveIcon fontSize=\"inherit\"  />\r\n"
                },
                {
                    "date": 1658906688064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,11 +213,11 @@\n         width: 100,\r\n         cellClassName: 'actions',\r\n         renderCell: (params) => {\r\n             const id = params.id\r\n-            console.log('params', params);\r\n+            console.log('params', params.row.id, params.row.isEdit);\r\n             \r\n-            if (params.row?.isEdit) {\r\n+            if (params.row.isEdit) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n                             <SaveIcon fontSize=\"inherit\"  />\r\n"
                },
                {
                    "date": 1658906810158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,21 +124,18 @@\n         // setIsEdit(false);\r\n         // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n         // return users\r\n \r\n-        const rowId = params.row.id\r\n-        params.row.isEdit = false\r\n-        if (usersClone[rowId].id === null) {\r\n-            usersClone.splice(rowId, 1);\r\n-        } else {\r\n-            // const oldRow = users.find(\r\n-            //     (e) => e.id === rowId\r\n-            // );\r\n-            usersClone[params.id].isEdit = false;\r\n-            console.log(\"oldRow\", usersClone[rowId]);\r\n-            // usersClone[rowId] = _.cloneDeep(oldRow);\r\n-            \r\n-        }\r\n+        // const rowId = params.row.id\r\n+        // params.row.isEdit = false\r\n+\r\n+        // const oldRow = users.find(\r\n+        //     (e) => e.id === rowId\r\n+        // );\r\n+        usersClone[params.id].isEdit = false;\r\n+        console.log(\"oldRow\", usersClone[rowId]);\r\n+        // usersClone[rowId] = _.cloneDeep(oldRow);\r\n+        \r\n         console.log('<><><>', usersClone);\r\n         \r\n     }\r\n     //     const editedRow = usersClone.find((row) => row.id === id);\r\n"
                },
                {
                    "date": 1658906945797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,14 +124,16 @@\n         // setIsEdit(false);\r\n         // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n         // return users\r\n \r\n-        // const rowId = params.row.id\r\n+        const rowId = params.row.id\r\n         // params.row.isEdit = false\r\n \r\n         // const oldRow = users.find(\r\n         //     (e) => e.id === rowId\r\n         // );\r\n+        console.log('params', params);\r\n+        \r\n         usersClone[params.id].isEdit = false;\r\n         console.log(\"oldRow\", usersClone[rowId]);\r\n         // usersClone[rowId] = _.cloneDeep(oldRow);\r\n         \r\n"
                },
                {
                    "date": 1658907008750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n         // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n         // return users\r\n \r\n         const rowId = params.row.id\r\n-        // params.row.isEdit = false\r\n+        params.row.isEdit = false\r\n \r\n         // const oldRow = users.find(\r\n         //     (e) => e.id === rowId\r\n         // );\r\n"
                },
                {
                    "date": 1658907120193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,19 +126,19 @@\n         // return users\r\n \r\n         const rowId = params.row.id\r\n         params.row.isEdit = false\r\n+        console.log('params', params);\r\n \r\n         // const oldRow = users.find(\r\n         //     (e) => e.id === rowId\r\n         // );\r\n-        console.log('params', params);\r\n         \r\n         usersClone[params.id].isEdit = false;\r\n-        console.log(\"oldRow\", usersClone[rowId]);\r\n+        // console.log(\"oldRow\", usersClone[rowId]);\r\n         // usersClone[rowId] = _.cloneDeep(oldRow);\r\n         \r\n-        console.log('<><><>', usersClone);\r\n+        // console.log('<><><>', usersClone);\r\n         \r\n     }\r\n     //     const editedRow = usersClone.find((row) => row.id === id);\r\n     //     if (editedRow!.isNew) {\r\n"
                },
                {
                    "date": 1658907435460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,9 +293,9 @@\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n-                    processRowUpdate={processRowUpdate}\r\n+                    // processRowUpdate={processRowUpdate}\r\n                     onRowDoubleClick={handleDoubleClick}\r\n                     // components={{\r\n                     //     Toolbar: EditToolbar,\r\n                     // }}\r\n"
                },
                {
                    "date": 1658907586303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,9 +286,9 @@\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n-                    onEditRowsModelChange={handleEditRowsModelChange}\r\n+                    // onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // onRowEditStop={handleEditRowsStop}\r\n                     // onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n"
                },
                {
                    "date": 1658907598366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,9 +286,9 @@\n                     rowsPerPageOptions={[5]}\r\n                     checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n-                    // onEditRowsModelChange={handleEditRowsModelChange}\r\n+                    onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // onRowEditStop={handleEditRowsStop}\r\n                     // onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n"
                },
                {
                    "date": 1658907607461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,9 +293,9 @@\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n-                    // processRowUpdate={processRowUpdate}\r\n+                    processRowUpdate={processRowUpdate}\r\n                     onRowDoubleClick={handleDoubleClick}\r\n                     // components={{\r\n                     //     Toolbar: EditToolbar,\r\n                     // }}\r\n"
                },
                {
                    "date": 1658907840211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n                         Add record\r\n                     </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n-                    // onCellEditCommit={handleCommit}\r\n+                    onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n                     rows={usersClone}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n"
                },
                {
                    "date": 1658911178759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,10 @@\n //     GridRowModel,\r\n // } from '@mui/x-data-grid-pro';\r\n import { useAppContext } from '../../context/AppContext';\r\n import { useRouter } from 'next/router';\r\n-import { idID } from '@mui/material/locale';\r\n \r\n+\r\n // interface userList {\r\n //     is: number,\r\n     // firstName: string,\r\n     // lastName: string,\r\n@@ -277,9 +277,9 @@\n                         Add record\r\n                     </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n-                    onCellEditCommit={handleCommit}\r\n+                    // onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n                     rows={usersClone}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n"
                },
                {
                    "date": 1658912402562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,292 +34,290 @@\n     // password: string\r\n // }\r\n \r\n \r\n-export default function userPage() {\r\n-    // useEffect(() => {\r\n-    //     document.title = 'User'\r\n-    //   },)\r\n+// export default function userPage() {\r\n+//     // useEffect(() => {\r\n+//     //     document.title = 'User'\r\n+//     //   },)\r\n \r\n-    const [users, setUsers, status] = useAppContext()\r\n-    const router = useRouter()\r\n+//     const [users, setUsers, status] = useAppContext()\r\n+//     const router = useRouter()\r\n \r\n-    // console.log('path', router.pathname)\r\n-    const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n-    const [isEdit, setIsEdit] = useState(false)\r\n-    const isInEditMode = isEdit\r\n-    console.log('isInEditMode', isInEditMode);\r\n-    const [usersClone, setUsersClone] = useState(_.clone(users))\r\n+//     // console.log('path', router.pathname)\r\n+//     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n+//     const [isEdit, setIsEdit] = useState(false)\r\n+//     const isInEditMode = isEdit\r\n+//     console.log('isInEditMode', isInEditMode);\r\n+//     const [usersClone, setUsersClone] = useState(_.clone(users))\r\n \r\n-    console.log('clone', usersClone);\r\n+//     console.log('clone', usersClone);\r\n     \r\n-    // const handleRowEditStart = (params, event) => {\r\n-    //     event.defaultMuiPrevented = true;\r\n-    // };\r\n+//     // const handleRowEditStart = (params, event) => {\r\n+//     //     event.defaultMuiPrevented = true;\r\n+//     // };\r\n \r\n-    // const handleRowEditStop = (params, event) => {\r\n-    //     event.defaultMuiPrevented = true;\r\n-    // };\r\n+//     // const handleRowEditStop = (params, event) => {\r\n+//     //     event.defaultMuiPrevented = true;\r\n+//     // };\r\n \r\n-    const [editRowsModel, setEditRowsModel] = useState({});\r\n-    const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n-        setEditRowsModel(model);\r\n-      },\r\n-    [])\r\n+//     const [editRowsModel, setEditRowsModel] = useState({});\r\n+//     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n+//         setEditRowsModel(model);\r\n+//       },\r\n+//     [])\r\n \r\n-    const handleAddRow = () => {\r\n-        setUsersClone((prevUsersClone) => [{\r\n-            id: Date.now(),\r\n-            firstName: '',\r\n-            lastName: '',\r\n-            email: '',\r\n-            password: 'Abc@1234',\r\n-        }, ...prevUsersClone]);\r\n-    }\r\n+//     const handleAddRow = () => {\r\n+//         setUsersClone((prevUsersClone) => [{\r\n+//             id: Date.now(),\r\n+//             firstName: '',\r\n+//             lastName: '',\r\n+//             email: '',\r\n+//             password: 'Abc@1234',\r\n+//         }, ...prevUsersClone]);\r\n+//     }\r\n     \r\n-    const handleEditRowsStop = (params) => () => {\r\n-        setIsEdit(false);\r\n-    }\r\n+//     const handleEditRowsStop = (params) => () => {\r\n+//         setIsEdit(false);\r\n+//     }\r\n \r\n-    const handleEditRowsStart = (params) => () => {\r\n-        // setIsEdit(true);\r\n-        params.row.isEdit = true\r\n-        console.log('params', params);\r\n-        // setUsersClone()\r\n-        // usersClone[params.id].isEdit = true\r\n-        // usersClone.map(e => {\r\n-        //     e.id === params.id? params : e\r\n-        // })\r\n-        // usersClone[params.id] = _.cloneDeep(params);\r\n-        usersClone[params.id].isEdit = true;\r\n-    }\r\n+//     const handleEditRowsStart = (params) => () => {\r\n+//         // setIsEdit(true);\r\n+//         params.row.isEdit = true\r\n+//         console.log('params', params);\r\n+//         // setUsersClone()\r\n+//         // usersClone[params.id].isEdit = true\r\n+//         // usersClone.map(e => {\r\n+//         //     e.id === params.id? params : e\r\n+//         // })\r\n+//         // usersClone[params.id] = _.cloneDeep(params);\r\n+//         usersClone[params.id].isEdit = true;\r\n+//     }\r\n \r\n-    // const handleEditClick = (id) => () => {\r\n-    //     console.log('edit ID:', id);\r\n-    //     // params.isEditable = true\r\n-    //     // // setRowID(id)\r\n-    //     // // getValue\r\n-    //     const tmp = _.cloneDeep(users)\r\n-    //     tmp[id].mode = GridRowModes.Edit\r\n-    //     console.log('tmp', tmp);\r\n+//     // const handleEditClick = (id) => () => {\r\n+//     //     console.log('edit ID:', id);\r\n+//     //     // params.isEditable = true\r\n+//     //     // // setRowID(id)\r\n+//     //     // // getValue\r\n+//     //     const tmp = _.cloneDeep(users)\r\n+//     //     tmp[id].mode = GridRowModes.Edit\r\n+//     //     console.log('tmp', tmp);\r\n \r\n-    //     setUsers(_.cloneDeep(tmp));\r\n-    //     setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n-    //     console.log(users);\r\n+//     //     setUsers(_.cloneDeep(tmp));\r\n+//     //     setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n+//     //     console.log(users);\r\n \r\n-    // };\r\n+//     // };\r\n \r\n-    const handleSaveClick = (params) => () => {\r\n-        // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n-        console.log('params', params);\r\n+//     const handleSaveClick = (params) => () => {\r\n+//         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n+//         console.log('params', params);\r\n         \r\n-        setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n-    };\r\n+//         setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n+//     };\r\n \r\n-    const handleDeleteClick = (id) => () => {\r\n-        setUsersClone(usersClone.filter((row) => row.id !== id));\r\n-        setUsers(_.cloneDeep(usersClone))\r\n-    };\r\n+//     const handleDeleteClick = (id) => () => {\r\n+//         setUsersClone(usersClone.filter((row) => row.id !== id));\r\n+//         setUsers(_.cloneDeep(usersClone))\r\n+//     };\r\n \r\n-    const handleCancelClick = (params) => () => {\r\n-        // setIsEdit(false);\r\n-        // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n-        // return users\r\n+//     const handleCancelClick = (params) => () => {\r\n+//         // setIsEdit(false);\r\n+//         // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n+//         // return users\r\n \r\n-        const rowId = params.row.id\r\n-        params.row.isEdit = false\r\n-        console.log('params', params);\r\n+//         const rowId = params.row.id\r\n+//         params.row.isEdit = false\r\n+//         console.log('params', params);\r\n \r\n-        // const oldRow = users.find(\r\n-        //     (e) => e.id === rowId\r\n-        // );\r\n+//         // const oldRow = users.find(\r\n+//         //     (e) => e.id === rowId\r\n+//         // );\r\n         \r\n-        usersClone[params.id].isEdit = false;\r\n-        // console.log(\"oldRow\", usersClone[rowId]);\r\n-        // usersClone[rowId] = _.cloneDeep(oldRow);\r\n+//         usersClone[params.id].isEdit = false;\r\n+//         // console.log(\"oldRow\", usersClone[rowId]);\r\n+//         // usersClone[rowId] = _.cloneDeep(oldRow);\r\n         \r\n-        // console.log('<><><>', usersClone);\r\n+//         // console.log('<><><>', usersClone);\r\n         \r\n-    }\r\n-    //     const editedRow = usersClone.find((row) => row.id === id);\r\n-    //     if (editedRow!.isNew) {\r\n-    //         setUsers(usersClone.filter((row) => row.id !== id));\r\n-    //     }\r\n-    // };\r\n+//     }\r\n+//     //     const editedRow = usersClone.find((row) => row.id === id);\r\n+//     //     if (editedRow!.isNew) {\r\n+//     //         setUsers(usersClone.filter((row) => row.id !== id));\r\n+//     //     }\r\n+//     // };\r\n \r\n-    const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow };\r\n-        console.log('updateRow', updatedRow);\r\n-        setUsersClone(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+//     const processRowUpdate = (newRow) => {\r\n+//         const updatedRow = { ...newRow };\r\n+//         console.log('updateRow', updatedRow);\r\n+//         setUsersClone(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n         \r\n-        return updatedRow;\r\n-    };\r\n+//         return updatedRow;\r\n+//     };\r\n \r\n-    const handleDoubleClick = (params) => () => {\r\n-        usersClone[params.id]\r\n-    }\r\n+//     const handleDoubleClick = (params) => () => {\r\n+//         usersClone[params.id]\r\n+//     }\r\n \r\n-    // const handleCommit = (e: GridCellEditCommitParams) => {\r\n-    //     console.log('here');\r\n+//     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n+//     //     console.log('here');\r\n         \r\n-    //     const array = users.map(r => {\r\n-    //         if (r.id === e.id) {\r\n-    //             return {...r, [e.field]: e.value}\r\n-    //         } else {\r\n-    //             return {...r}\r\n-    //         }\r\n-    //     })\r\n-    //     setRowID(_.cloneDeep(array))\r\n-    //     console.log('array', array[e.id]);\r\n+//     //     const array = users.map(r => {\r\n+//     //         if (r.id === e.id) {\r\n+//     //             return {...r, [e.field]: e.value}\r\n+//     //         } else {\r\n+//     //             return {...r}\r\n+//     //         }\r\n+//     //     })\r\n+//     //     setRowID(_.cloneDeep(array))\r\n+//     //     console.log('array', array[e.id]);\r\n         \r\n-    // }\r\n-    // const fetchUsers = async () => {\r\n-    //     const response = await fetch('/api/User')\r\n-    //     const data = await response.json()\r\n-    //     setUsers(data)\r\n-    //     // console.clear();\r\n-    //     // console.log(\"data\", data);\r\n+//     // }\r\n+//     // const fetchUsers = async () => {\r\n+//     //     const response = await fetch('/api/User')\r\n+//     //     const data = await response.json()\r\n+//     //     setUsers(data)\r\n+//     //     // console.clear();\r\n+//     //     // console.log(\"data\", data);\r\n \r\n-    // }\r\n+//     // }\r\n \r\n-    // useEffect(() => {\r\n-    //     async function fetchData() {\r\n-    //       const res = await fetch('/api/User')\r\n-    //       const result: userList[] = await res.json()\r\n-    //     //   console.log(\"data\", result);\r\n-    //       setUsers(result)\r\n-    //     }\r\n-    //     fetchData()\r\n-    //   }, [])\r\n+//     // useEffect(() => {\r\n+//     //     async function fetchData() {\r\n+//     //       const res = await fetch('/api/User')\r\n+//     //       const result: userList[] = await res.json()\r\n+//     //     //   console.log(\"data\", result);\r\n+//     //       setUsers(result)\r\n+//     //     }\r\n+//     //     fetchData()\r\n+//     //   }, [])\r\n \r\n     \r\n \r\n-    if (status === 'false') {\r\n-        // router.push('/user/sign-in')\r\n-        console.log('not sign in')\r\n-    }\r\n\\ No newline at end of file\n+//     if (status === 'false') {\r\n+//         // router.push('/user/sign-in')\r\n+//         console.log('not sign in')\r\n+//     }\r\n \r\n     \r\n \r\n-    const cols: GridColDef[] = [\r\n-    { field: 'id', headerName: 'ID', flex: 1, },\r\n-    { field: 'firstName', headerName: 'First name', flex: 1, editable: true},\r\n-    { field: 'lastName', headerName: 'Last name', flex: 1, editable: true},\r\n-    { field: 'email', headerName: 'Email', flex: 1, editable: true},\r\n-    {\r\n-        field: 'actions',\r\n-        type: 'actions',\r\n-        headerName: 'Actions',\r\n-        width: 100,\r\n-        cellClassName: 'actions',\r\n-        renderCell: (params) => {\r\n-            const id = params.id\r\n-            console.log('params', params.row.id, params.row.isEdit);\r\n+//     const cols: GridColDef[] = [\r\n+//     { field: 'id', headerName: 'ID', flex: 1, },\r\n+//     { field: 'firstName', headerName: 'First name', flex: 1, editable: true},\r\n+//     { field: 'lastName', headerName: 'Last name', flex: 1, editable: true},\r\n+//     { field: 'email', headerName: 'Email', flex: 1, editable: true},\r\n+//     {\r\n+//         field: 'actions',\r\n+//         type: 'actions',\r\n+//         headerName: 'Actions',\r\n+//         width: 100,\r\n+//         cellClassName: 'actions',\r\n+//         renderCell: (params) => {\r\n+//             const id = params.id\r\n+//             console.log('params', params.row.id, params.row.isEdit);\r\n             \r\n-            if (params.row.isEdit) {\r\n-                return (\r\n-                    <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                        <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n-                            <SaveIcon fontSize=\"inherit\"  />\r\n-                        </IconButton>\r\n-                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(params)}>\r\n-                            <CancelIcon fontSize=\"inherit\"  />\r\n-                        </IconButton>\r\n-                    </Stack>\r\n-                    // <GridActionsCellItem\r\n-                    //     icon={<SaveIcon />}\r\n-                    //     label=\"Save\"\r\n-                    //     onClick={handleSaveClick(id)}\r\n-                    // />,\r\n-                    // <GridActionsCellItem\r\n-                    //     icon={<CancelIcon />}\r\n-                    //     label=\"Cancel\"\r\n-                    //     className=\"textPrimary\"\r\n-                    //     onClick={handleCancelClick(id)}\r\n-                    //     color=\"inherit\"\r\n-                    // />,\r\n-                )\r\n-            }\r\n-            return (\r\n-                <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n-                        <EditIcon fontSize=\"inherit\"  />\r\n-                    </IconButton>\r\n-                    <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(params)}>\r\n-                        <DeleteIcon fontSize=\"inherit\"  />\r\n-                    </IconButton>\r\n+//             if (params.row.isEdit) {\r\n+//                 return (\r\n+//                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+//                         <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n+//                             <SaveIcon fontSize=\"inherit\"  />\r\n+//                         </IconButton>\r\n+//                         <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(params)}>\r\n+//                             <CancelIcon fontSize=\"inherit\"  />\r\n+//                         </IconButton>\r\n+//                     </Stack>\r\n+//                     // <GridActionsCellItem\r\n+//                     //     icon={<SaveIcon />}\r\n+//                     //     label=\"Save\"\r\n+//                     //     onClick={handleSaveClick(id)}\r\n+//                     // />,\r\n+//                     // <GridActionsCellItem\r\n+//                     //     icon={<CancelIcon />}\r\n+//                     //     label=\"Cancel\"\r\n+//                     //     className=\"textPrimary\"\r\n+//                     //     onClick={handleCancelClick(id)}\r\n+//                     //     color=\"inherit\"\r\n+//                     // />,\r\n+//                 )\r\n+//             }\r\n+//             return (\r\n+//                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+//                     <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n+//                         <EditIcon fontSize=\"inherit\"  />\r\n+//                     </IconButton>\r\n+//                     <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(params)}>\r\n+//                         <DeleteIcon fontSize=\"inherit\"  />\r\n+//                     </IconButton>\r\n \r\n-                    {/* <GridActionsCellItem\r\n-                            icon={<EditIcon />}\r\n-                            label=\"Edit\"\r\n-                            className=\"textPrimary\"\r\n-                            onClick={handleEditClick(id)}\r\n-                            color=\"inherit\"\r\n-                        />,\r\n-                        <GridActionsCellItem\r\n-                            icon={<DeleteIcon />}\r\n-                            label=\"Delete\"\r\n-                            onClick={handleDeleteClick(id)}\r\n-                            color=\"inherit\"\r\n-                        />, */}\r\n-                </Stack>\r\n-            )\r\n-        },\r\n-    },\r\n-    ]\r\n+//                     {/* <GridActionsCellItem\r\n+//                             icon={<EditIcon />}\r\n+//                             label=\"Edit\"\r\n+//                             className=\"textPrimary\"\r\n+//                             onClick={handleEditClick(id)}\r\n+//                             color=\"inherit\"\r\n+//                         />,\r\n+//                         <GridActionsCellItem\r\n+//                             icon={<DeleteIcon />}\r\n+//                             label=\"Delete\"\r\n+//                             onClick={handleDeleteClick(id)}\r\n+//                             color=\"inherit\"\r\n+//                         />, */}\r\n+//                 </Stack>\r\n+//             )\r\n+//         },\r\n+//     },\r\n+//     ]\r\n \r\n-    return (\r\n-        <>\r\n-            <Box sx={{\r\n-                height: 405, width: '100%'\r\n-            }}>\r\n-                <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n-                        Add record\r\n-                    </Button>\r\n-                </Stack>\r\n-                <DataGrid\r\n-                    // onCellEditCommit={handleCommit}\r\n-                    autoHeight\r\n-                    rows={usersClone}\r\n-                    columns={cols}\r\n-                    pageSize={5}\r\n-                    rowsPerPageOptions={[5]}\r\n-                    checkboxSelection\r\n-                    editMode=\"row\"\r\n-                    editRowsModel={editRowsModel}\r\n-                    onEditRowsModelChange={handleEditRowsModelChange}\r\n-                    // onRowEditStop={handleEditRowsStop}\r\n-                    // onRowEditStart={handleEditRowsStart}\r\n-                    // rowModesModel={rowModesModel}\r\n-                    // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n-                    // onRowEditStart={handleRowEditStart}\r\n-                    // onRowEditStop={handleRowEditStop}\r\n-                    processRowUpdate={processRowUpdate}\r\n-                    onRowDoubleClick={handleDoubleClick}\r\n-                    // components={{\r\n-                    //     Toolbar: EditToolbar,\r\n-                    // }}\r\n-                    // componentsProps={{\r\n-                    //     toolbar: { setUsers, setRowModesModel },\r\n-                    // }}\r\n+//     return (\r\n+//         <>\r\n+//             <Box sx={{\r\n+//                 height: 405, width: '100%'\r\n+//             }}>\r\n+//                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+//                     <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+//                         Add record\r\n+//                     </Button>\r\n+//                 </Stack>\r\n+//                 <DataGrid\r\n+//                     // onCellEditCommit={handleCommit}\r\n+//                     autoHeight\r\n+//                     rows={usersClone}\r\n+//                     columns={cols}\r\n+//                     pageSize={5}\r\n+//                     rowsPerPageOptions={[5]}\r\n+//                     checkboxSelection\r\n+//                     editMode=\"row\"\r\n+//                     editRowsModel={editRowsModel}\r\n+//                     onEditRowsModelChange={handleEditRowsModelChange}\r\n+//                     // onRowEditStop={handleEditRowsStop}\r\n+//                     // onRowEditStart={handleEditRowsStart}\r\n+//                     // rowModesModel={rowModesModel}\r\n+//                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n+//                     // onRowEditStart={handleRowEditStart}\r\n+//                     // onRowEditStop={handleRowEditStop}\r\n+//                     processRowUpdate={processRowUpdate}\r\n+//                     onRowDoubleClick={handleDoubleClick}\r\n+//                     // components={{\r\n+//                     //     Toolbar: EditToolbar,\r\n+//                     // }}\r\n+//                     // componentsProps={{\r\n+//                     //     toolbar: { setUsers, setRowModesModel },\r\n+//                     // }}\r\n                     \r\n-                    experimentalFeatures={{ newEditingApi: true }}\r\n-                    disableSelectionOnClick\r\n-                />\r\n-                <div style={{width: '600px'}}>\r\n-                    editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {usersClone.map(e => <div>{JSON.stringify(e)}</div>)} <br></br>\r\n-                    users: {JSON.stringify(users)}\r\n-                </div>\r\n-            </Box>\r\n-        </>\r\n-    )\r\n-}\r\n+//                     experimentalFeatures={{ newEditingApi: true }}\r\n+//                     disableSelectionOnClick\r\n+//                 />\r\n+//                 <div style={{width: '600px'}}>\r\n+//                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n+//                     usersClone: {usersClone.map(e => <div>{JSON.stringify(e)}</div>)} <br></br>\r\n+//                     users: {JSON.stringify(users)}\r\n+//                 </div>\r\n+//             </Box>\r\n+//         </>\r\n+//     )\r\n+// }\r\n \r\n-// userPage.getLayout = function getLayout(page) {\r\n-//     return (\r\n-//         <Layout pageTitle={'User'}>\r\n-//             {page}\r\n-//         </Layout>\r\n-//     )\r\n-// }\n+import MaterialTable from 'material-table'\r\n+\r\n+export default function userPage() {\r\n+    const [users, setUsers, status] = useAppContext()\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1658917242977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,290 +34,284 @@\n     // password: string\r\n // }\r\n \r\n \r\n-// export default function userPage() {\r\n-//     // useEffect(() => {\r\n-//     //     document.title = 'User'\r\n-//     //   },)\r\n+export default function userPage() {\r\n+    // useEffect(() => {\r\n+    //     document.title = 'User'\r\n+    //   },)\r\n \r\n-//     const [users, setUsers, status] = useAppContext()\r\n-//     const router = useRouter()\r\n+    const [users, setUsers, status] = useAppContext()\r\n+    const router = useRouter()\r\n \r\n-//     // console.log('path', router.pathname)\r\n-//     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n-//     const [isEdit, setIsEdit] = useState(false)\r\n-//     const isInEditMode = isEdit\r\n-//     console.log('isInEditMode', isInEditMode);\r\n-//     const [usersClone, setUsersClone] = useState(_.clone(users))\r\n+    // console.log('path', router.pathname)\r\n+    const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n+    const [isEdit, setIsEdit] = useState(false)\r\n+    const isInEditMode = isEdit\r\n+    console.log('isInEditMode', isInEditMode);\r\n+    const [usersClone, setUsersClone] = useState(_.clone(users))\r\n \r\n-//     console.log('clone', usersClone);\r\n+    console.log('clone', usersClone);\r\n     \r\n-//     // const handleRowEditStart = (params, event) => {\r\n-//     //     event.defaultMuiPrevented = true;\r\n-//     // };\r\n+    // const handleRowEditStart = (params, event) => {\r\n+    //     event.defaultMuiPrevented = true;\r\n+    // };\r\n \r\n-//     // const handleRowEditStop = (params, event) => {\r\n-//     //     event.defaultMuiPrevented = true;\r\n-//     // };\r\n+    // const handleRowEditStop = (params, event) => {\r\n+    //     event.defaultMuiPrevented = true;\r\n+    // };\r\n \r\n-//     const [editRowsModel, setEditRowsModel] = useState({});\r\n-//     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n-//         setEditRowsModel(model);\r\n-//       },\r\n-//     [])\r\n+    const [editRowsModel, setEditRowsModel] = useState({});\r\n+    const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n+        setEditRowsModel(model);\r\n+      },\r\n+    [])\r\n \r\n-//     const handleAddRow = () => {\r\n-//         setUsersClone((prevUsersClone) => [{\r\n-//             id: Date.now(),\r\n-//             firstName: '',\r\n-//             lastName: '',\r\n-//             email: '',\r\n-//             password: 'Abc@1234',\r\n-//         }, ...prevUsersClone]);\r\n-//     }\r\n+    const handleAddRow = () => {\r\n+        setUsersClone((prevUsersClone) => [{\r\n+            id: Date.now(),\r\n+            firstName: '',\r\n+            lastName: '',\r\n+            email: '',\r\n+            password: 'Abc@1234',\r\n+        }, ...prevUsersClone]);\r\n+    }\r\n     \r\n-//     const handleEditRowsStop = (params) => () => {\r\n-//         setIsEdit(false);\r\n-//     }\r\n+    const handleEditRowsStop = (params) => () => {\r\n+        setIsEdit(false);\r\n+    }\r\n \r\n-//     const handleEditRowsStart = (params) => () => {\r\n-//         // setIsEdit(true);\r\n-//         params.row.isEdit = true\r\n-//         console.log('params', params);\r\n-//         // setUsersClone()\r\n-//         // usersClone[params.id].isEdit = true\r\n-//         // usersClone.map(e => {\r\n-//         //     e.id === params.id? params : e\r\n-//         // })\r\n-//         // usersClone[params.id] = _.cloneDeep(params);\r\n-//         usersClone[params.id].isEdit = true;\r\n-//     }\r\n+    const handleEditRowsStart = (params) => () => {\r\n+        // setIsEdit(true);\r\n+        params.row.isEdit = true\r\n+        console.log('params', params);\r\n+        // setUsersClone()\r\n+        // usersClone[params.id].isEdit = true\r\n+        // usersClone.map(e => {\r\n+        //     e.id === params.id? params : e\r\n+        // })\r\n+        // usersClone[params.id] = _.cloneDeep(params);\r\n+        usersClone[params.id].isEdit = true;\r\n+    }\r\n \r\n-//     // const handleEditClick = (id) => () => {\r\n-//     //     console.log('edit ID:', id);\r\n-//     //     // params.isEditable = true\r\n-//     //     // // setRowID(id)\r\n-//     //     // // getValue\r\n-//     //     const tmp = _.cloneDeep(users)\r\n-//     //     tmp[id].mode = GridRowModes.Edit\r\n-//     //     console.log('tmp', tmp);\r\n+    // const handleEditClick = (id) => () => {\r\n+    //     console.log('edit ID:', id);\r\n+    //     // params.isEditable = true\r\n+    //     // // setRowID(id)\r\n+    //     // // getValue\r\n+    //     const tmp = _.cloneDeep(users)\r\n+    //     tmp[id].mode = GridRowModes.Edit\r\n+    //     console.log('tmp', tmp);\r\n \r\n-//     //     setUsers(_.cloneDeep(tmp));\r\n-//     //     setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n-//     //     console.log(users);\r\n+    //     setUsers(_.cloneDeep(tmp));\r\n+    //     setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n+    //     console.log(users);\r\n \r\n-//     // };\r\n+    // };\r\n \r\n-//     const handleSaveClick = (params) => () => {\r\n-//         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n-//         console.log('params', params);\r\n+    const handleSaveClick = (params) => () => {\r\n+        // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n+        console.log('params', params);\r\n         \r\n-//         setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n-//     };\r\n+        setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n+    };\r\n \r\n-//     const handleDeleteClick = (id) => () => {\r\n-//         setUsersClone(usersClone.filter((row) => row.id !== id));\r\n-//         setUsers(_.cloneDeep(usersClone))\r\n-//     };\r\n+    const handleDeleteClick = (id) => () => {\r\n+        setUsersClone(usersClone.filter((row) => row.id !== id));\r\n+        setUsers(_.cloneDeep(usersClone))\r\n+    };\r\n \r\n-//     const handleCancelClick = (params) => () => {\r\n-//         // setIsEdit(false);\r\n-//         // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n-//         // return users\r\n+    const handleCancelClick = (params) => () => {\r\n+        // setIsEdit(false);\r\n+        // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n+        // return users\r\n \r\n-//         const rowId = params.row.id\r\n-//         params.row.isEdit = false\r\n-//         console.log('params', params);\r\n+        const rowId = params.row.id\r\n+        params.row.isEdit = false\r\n+        console.log('params', params);\r\n \r\n-//         // const oldRow = users.find(\r\n-//         //     (e) => e.id === rowId\r\n-//         // );\r\n+        // const oldRow = users.find(\r\n+        //     (e) => e.id === rowId\r\n+        // );\r\n         \r\n-//         usersClone[params.id].isEdit = false;\r\n-//         // console.log(\"oldRow\", usersClone[rowId]);\r\n-//         // usersClone[rowId] = _.cloneDeep(oldRow);\r\n+        usersClone[params.id].isEdit = false;\r\n+        // console.log(\"oldRow\", usersClone[rowId]);\r\n+        // usersClone[rowId] = _.cloneDeep(oldRow);\r\n         \r\n-//         // console.log('<><><>', usersClone);\r\n+        // console.log('<><><>', usersClone);\r\n         \r\n-//     }\r\n-//     //     const editedRow = usersClone.find((row) => row.id === id);\r\n-//     //     if (editedRow!.isNew) {\r\n-//     //         setUsers(usersClone.filter((row) => row.id !== id));\r\n-//     //     }\r\n-//     // };\r\n+    }\r\n+    //     const editedRow = usersClone.find((row) => row.id === id);\r\n+    //     if (editedRow!.isNew) {\r\n+    //         setUsers(usersClone.filter((row) => row.id !== id));\r\n+    //     }\r\n+    // };\r\n \r\n-//     const processRowUpdate = (newRow) => {\r\n-//         const updatedRow = { ...newRow };\r\n-//         console.log('updateRow', updatedRow);\r\n-//         setUsersClone(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+    const processRowUpdate = (newRow) => {\r\n+        const updatedRow = { ...newRow };\r\n+        console.log('updateRow', updatedRow);\r\n+        setUsersClone(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n         \r\n-//         return updatedRow;\r\n-//     };\r\n+        return updatedRow;\r\n+    };\r\n \r\n-//     const handleDoubleClick = (params) => () => {\r\n-//         usersClone[params.id]\r\n-//     }\r\n+    const handleDoubleClick = (params) => () => {\r\n+        usersClone[params.id]\r\n+    }\r\n \r\n-//     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n-//     //     console.log('here');\r\n+    // const handleCommit = (e: GridCellEditCommitParams) => {\r\n+    //     console.log('here');\r\n         \r\n-//     //     const array = users.map(r => {\r\n-//     //         if (r.id === e.id) {\r\n-//     //             return {...r, [e.field]: e.value}\r\n-//     //         } else {\r\n-//     //             return {...r}\r\n-//     //         }\r\n-//     //     })\r\n-//     //     setRowID(_.cloneDeep(array))\r\n-//     //     console.log('array', array[e.id]);\r\n+    //     const array = users.map(r => {\r\n+    //         if (r.id === e.id) {\r\n+    //             return {...r, [e.field]: e.value}\r\n+    //         } else {\r\n+    //             return {...r}\r\n+    //         }\r\n+    //     })\r\n+    //     setRowID(_.cloneDeep(array))\r\n+    //     console.log('array', array[e.id]);\r\n         \r\n-//     // }\r\n-//     // const fetchUsers = async () => {\r\n-//     //     const response = await fetch('/api/User')\r\n-//     //     const data = await response.json()\r\n-//     //     setUsers(data)\r\n-//     //     // console.clear();\r\n-//     //     // console.log(\"data\", data);\r\n+    // }\r\n+    // const fetchUsers = async () => {\r\n+    //     const response = await fetch('/api/User')\r\n+    //     const data = await response.json()\r\n+    //     setUsers(data)\r\n+    //     // console.clear();\r\n+    //     // console.log(\"data\", data);\r\n \r\n-//     // }\r\n+    // }\r\n \r\n-//     // useEffect(() => {\r\n-//     //     async function fetchData() {\r\n-//     //       const res = await fetch('/api/User')\r\n-//     //       const result: userList[] = await res.json()\r\n-//     //     //   console.log(\"data\", result);\r\n-//     //       setUsers(result)\r\n-//     //     }\r\n-//     //     fetchData()\r\n-//     //   }, [])\r\n+    // useEffect(() => {\r\n+    //     async function fetchData() {\r\n+    //       const res = await fetch('/api/User')\r\n+    //       const result: userList[] = await res.json()\r\n+    //     //   console.log(\"data\", result);\r\n+    //       setUsers(result)\r\n+    //     }\r\n+    //     fetchData()\r\n+    //   }, [])\r\n \r\n     \r\n \r\n-//     if (status === 'false') {\r\n-//         // router.push('/user/sign-in')\r\n\\ No newline at end of file\n-//         console.log('not sign in')\r\n-//     }\r\n+    if (status === 'false') {\r\n+        // router.push('/user/sign-in')\r\n+        console.log('not sign in')\r\n+    }\r\n \r\n     \r\n \r\n-//     const cols: GridColDef[] = [\r\n-//     { field: 'id', headerName: 'ID', flex: 1, },\r\n-//     { field: 'firstName', headerName: 'First name', flex: 1, editable: true},\r\n-//     { field: 'lastName', headerName: 'Last name', flex: 1, editable: true},\r\n-//     { field: 'email', headerName: 'Email', flex: 1, editable: true},\r\n-//     {\r\n-//         field: 'actions',\r\n-//         type: 'actions',\r\n-//         headerName: 'Actions',\r\n-//         width: 100,\r\n-//         cellClassName: 'actions',\r\n-//         renderCell: (params) => {\r\n-//             const id = params.id\r\n-//             console.log('params', params.row.id, params.row.isEdit);\r\n+    const cols: GridColDef[] = [\r\n+    { field: 'id', headerName: 'ID', flex: 1, },\r\n+    { field: 'firstName', headerName: 'First name', flex: 1, editable: true},\r\n+    { field: 'lastName', headerName: 'Last name', flex: 1, editable: true},\r\n+    { field: 'email', headerName: 'Email', flex: 1, editable: true},\r\n+    {\r\n+        field: 'actions',\r\n+        type: 'actions',\r\n+        headerName: 'Actions',\r\n+        width: 100,\r\n+        cellClassName: 'actions',\r\n+        renderCell: (params) => {\r\n+            const id = params.id\r\n+            console.log('params', params.row.id, params.row.isEdit);\r\n             \r\n-//             if (params.row.isEdit) {\r\n-//                 return (\r\n-//                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-//                         <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n-//                             <SaveIcon fontSize=\"inherit\"  />\r\n-//                         </IconButton>\r\n-//                         <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(params)}>\r\n-//                             <CancelIcon fontSize=\"inherit\"  />\r\n-//                         </IconButton>\r\n-//                     </Stack>\r\n-//                     // <GridActionsCellItem\r\n-//                     //     icon={<SaveIcon />}\r\n-//                     //     label=\"Save\"\r\n-//                     //     onClick={handleSaveClick(id)}\r\n-//                     // />,\r\n-//                     // <GridActionsCellItem\r\n-//                     //     icon={<CancelIcon />}\r\n-//                     //     label=\"Cancel\"\r\n-//                     //     className=\"textPrimary\"\r\n-//                     //     onClick={handleCancelClick(id)}\r\n-//                     //     color=\"inherit\"\r\n-//                     // />,\r\n-//                 )\r\n-//             }\r\n-//             return (\r\n-//                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-//                     <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n-//                         <EditIcon fontSize=\"inherit\"  />\r\n-//                     </IconButton>\r\n-//                     <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(params)}>\r\n-//                         <DeleteIcon fontSize=\"inherit\"  />\r\n-//                     </IconButton>\r\n+            if (params.row.isEdit) {\r\n+                return (\r\n+                    <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                        <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n+                            <SaveIcon fontSize=\"inherit\"  />\r\n+                        </IconButton>\r\n+                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(params)}>\r\n+                            <CancelIcon fontSize=\"inherit\"  />\r\n+                        </IconButton>\r\n+                    </Stack>\r\n+                    // <GridActionsCellItem\r\n+                    //     icon={<SaveIcon />}\r\n+                    //     label=\"Save\"\r\n+                    //     onClick={handleSaveClick(id)}\r\n+                    // />,\r\n+                    // <GridActionsCellItem\r\n+                    //     icon={<CancelIcon />}\r\n+                    //     label=\"Cancel\"\r\n+                    //     className=\"textPrimary\"\r\n+                    //     onClick={handleCancelClick(id)}\r\n+                    //     color=\"inherit\"\r\n+                    // />,\r\n+                )\r\n+            }\r\n+            return (\r\n+                <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n+                        <EditIcon fontSize=\"inherit\"  />\r\n+                    </IconButton>\r\n+                    <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(params)}>\r\n+                        <DeleteIcon fontSize=\"inherit\"  />\r\n+                    </IconButton>\r\n \r\n-//                     {/* <GridActionsCellItem\r\n-//                             icon={<EditIcon />}\r\n-//                             label=\"Edit\"\r\n-//                             className=\"textPrimary\"\r\n-//                             onClick={handleEditClick(id)}\r\n-//                             color=\"inherit\"\r\n-//                         />,\r\n-//                         <GridActionsCellItem\r\n-//                             icon={<DeleteIcon />}\r\n-//                             label=\"Delete\"\r\n-//                             onClick={handleDeleteClick(id)}\r\n-//                             color=\"inherit\"\r\n-//                         />, */}\r\n-//                 </Stack>\r\n-//             )\r\n-//         },\r\n-//     },\r\n-//     ]\r\n+                    {/* <GridActionsCellItem\r\n+                            icon={<EditIcon />}\r\n+                            label=\"Edit\"\r\n+                            className=\"textPrimary\"\r\n+                            onClick={handleEditClick(id)}\r\n+                            color=\"inherit\"\r\n+                        />,\r\n+                        <GridActionsCellItem\r\n+                            icon={<DeleteIcon />}\r\n+                            label=\"Delete\"\r\n+                            onClick={handleDeleteClick(id)}\r\n+                            color=\"inherit\"\r\n+                        />, */}\r\n+                </Stack>\r\n+            )\r\n+        },\r\n+    },\r\n+    ]\r\n \r\n-//     return (\r\n-//         <>\r\n-//             <Box sx={{\r\n-//                 height: 405, width: '100%'\r\n-//             }}>\r\n-//                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-//                     <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n-//                         Add record\r\n-//                     </Button>\r\n-//                 </Stack>\r\n-//                 <DataGrid\r\n-//                     // onCellEditCommit={handleCommit}\r\n-//                     autoHeight\r\n-//                     rows={usersClone}\r\n-//                     columns={cols}\r\n-//                     pageSize={5}\r\n-//                     rowsPerPageOptions={[5]}\r\n-//                     checkboxSelection\r\n-//                     editMode=\"row\"\r\n-//                     editRowsModel={editRowsModel}\r\n-//                     onEditRowsModelChange={handleEditRowsModelChange}\r\n-//                     // onRowEditStop={handleEditRowsStop}\r\n-//                     // onRowEditStart={handleEditRowsStart}\r\n-//                     // rowModesModel={rowModesModel}\r\n-//                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n-//                     // onRowEditStart={handleRowEditStart}\r\n-//                     // onRowEditStop={handleRowEditStop}\r\n-//                     processRowUpdate={processRowUpdate}\r\n-//                     onRowDoubleClick={handleDoubleClick}\r\n-//                     // components={{\r\n-//                     //     Toolbar: EditToolbar,\r\n-//                     // }}\r\n-//                     // componentsProps={{\r\n-//                     //     toolbar: { setUsers, setRowModesModel },\r\n-//                     // }}\r\n+    return (\r\n+        <>\r\n+            <Box sx={{\r\n+                height: 405, width: '100%'\r\n+            }}>\r\n+                <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                    <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                        Add record\r\n+                    </Button>\r\n+                </Stack>\r\n+                <DataGrid\r\n+                    // onCellEditCommit={handleCommit}\r\n+                    autoHeight\r\n+                    rows={usersClone}\r\n+                    columns={cols}\r\n+                    pageSize={5}\r\n+                    rowsPerPageOptions={[5]}\r\n+                    checkboxSelection\r\n+                    editMode=\"row\"\r\n+                    editRowsModel={editRowsModel}\r\n+                    onEditRowsModelChange={handleEditRowsModelChange}\r\n+                    // onRowEditStop={handleEditRowsStop}\r\n+                    // onRowEditStart={handleEditRowsStart}\r\n+                    // rowModesModel={rowModesModel}\r\n+                    // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n+                    // onRowEditStart={handleRowEditStart}\r\n+                    // onRowEditStop={handleRowEditStop}\r\n+                    processRowUpdate={processRowUpdate}\r\n+                    onRowDoubleClick={handleDoubleClick}\r\n+                    // components={{\r\n+                    //     Toolbar: EditToolbar,\r\n+                    // }}\r\n+                    // componentsProps={{\r\n+                    //     toolbar: { setUsers, setRowModesModel },\r\n+                    // }}\r\n                     \r\n-//                     experimentalFeatures={{ newEditingApi: true }}\r\n-//                     disableSelectionOnClick\r\n-//                 />\r\n-//                 <div style={{width: '600px'}}>\r\n-//                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-//                     usersClone: {usersClone.map(e => <div>{JSON.stringify(e)}</div>)} <br></br>\r\n-//                     users: {JSON.stringify(users)}\r\n-//                 </div>\r\n-//             </Box>\r\n-//         </>\r\n-//     )\r\n-// }\r\n-\r\n-import MaterialTable from 'material-table'\r\n-\r\n-export default function userPage() {\r\n-    const [users, setUsers, status] = useAppContext()\r\n-}\n+                    experimentalFeatures={{ newEditingApi: true }}\r\n+                    disableSelectionOnClick\r\n+                />\r\n+                <div style={{width: '600px'}}>\r\n+                    editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n+                    usersClone: {usersClone.map(e => <div>{JSON.stringify(e)}</div>)} <br></br>\r\n+                    users: {JSON.stringify(users)}\r\n+                </div>\r\n+            </Box>\r\n+        </>\r\n+    )\r\n+}\r\n"
                },
                {
                    "date": 1658917340115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,9 @@\n                     rows={usersClone}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n-                    checkboxSelection\r\n+                    // checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // onRowEditStop={handleEditRowsStop}\r\n"
                },
                {
                    "date": 1658917760976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n \r\n     const handleSaveClick = (params) => () => {\r\n         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n         console.log('params', params);\r\n-        \r\n+        const tmp = _.cloneDeep(usersClone)\r\n         setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n     };\r\n \r\n     const handleDeleteClick = (id) => () => {\r\n@@ -240,11 +240,11 @@\n                 )\r\n             }\r\n             return (\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n+                    {/* <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n-                    </IconButton>\r\n+                    </IconButton> */}\r\n                     <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(params)}>\r\n                         <DeleteIcon fontSize=\"inherit\"  />\r\n                     </IconButton>\r\n \r\n@@ -287,10 +287,10 @@\n                     // checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n-                    // onRowEditStop={handleEditRowsStop}\r\n-                    // onRowEditStart={handleEditRowsStart}\r\n+                    onRowEditStop={handleEditRowsStop}\r\n+                    onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1658917790704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n         }, ...prevUsersClone]);\r\n     }\r\n     \r\n     const handleEditRowsStop = (params) => () => {\r\n-        setIsEdit(false);\r\n+        usersClone[params.id].isEdit = false;\r\n     }\r\n \r\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n"
                },
                {
                    "date": 1658918489153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,10 +287,10 @@\n                     // checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n-                    onRowEditStop={handleEditRowsStop}\r\n-                    onRowEditStart={handleEditRowsStart}\r\n+                    // onRowEditStop={handleEditRowsStop}\r\n+                    // onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1658918527528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    onRowDoubleClick={handleDoubleClick}\r\n+                    // onRowDoubleClick={handleDoubleClick}\r\n                     // components={{\r\n                     //     Toolbar: EditToolbar,\r\n                     // }}\r\n                     // componentsProps={{\r\n"
                },
                {
                    "date": 1659058485573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,10 +114,10 @@\n         const tmp = _.cloneDeep(usersClone)\r\n         setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n     };\r\n \r\n-    const handleDeleteClick = (id) => () => {\r\n-        setUsersClone(usersClone.filter((row) => row.id !== id));\r\n+    const handleDeleteClick = (params) => () => {\r\n+        setUsersClone(usersClone.filter((row) => row.id !== params.id));\r\n         setUsers(_.cloneDeep(usersClone))\r\n     };\r\n \r\n     const handleCancelClick = (params) => () => {\r\n"
                },
                {
                    "date": 1659058533456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n     };\r\n \r\n     const handleDeleteClick = (params) => () => {\r\n         setUsersClone(usersClone.filter((row) => row.id !== params.id));\r\n-        setUsers(_.cloneDeep(usersClone))\r\n+        setUsers(users.filter((row) => row.id !== params.id))\r\n     };\r\n \r\n     const handleCancelClick = (params) => () => {\r\n         // setIsEdit(false);\r\n"
                },
                {
                    "date": 1659058621149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n         setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n     };\r\n \r\n     const handleDeleteClick = (params) => () => {\r\n-        setUsersClone(usersClone.filter((row) => row.id !== params.id));\r\n+        setUsersClone(usersClone.filter((row) => row.id !== params.id))\r\n         setUsers(users.filter((row) => row.id !== params.id))\r\n     };\r\n \r\n     const handleCancelClick = (params) => () => {\r\n@@ -275,8 +275,11 @@\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                     <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                         Add record\r\n                     </Button>\r\n+                    <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                        Save\r\n+                    </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n                     // onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n"
                },
                {
                    "date": 1659058643647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,9 +275,9 @@\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                     <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                         Add record\r\n                     </Button>\r\n-                    <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                    <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleAddRow}>\r\n                         Save\r\n                     </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n"
                },
                {
                    "date": 1659059587024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,12 +107,12 @@\n     //     console.log(users);\r\n \r\n     // };\r\n \r\n-    const handleSaveClick = (params) => () => {\r\n+    const handleSave = (params) => () => {\r\n         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n         console.log('params', params);\r\n-        const tmp = _.cloneDeep(usersClone)\r\n+        const tmp = _.cloneDeep(usersClone);\r\n         setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n     };\r\n \r\n     const handleDeleteClick = (params) => () => {\r\n@@ -216,16 +216,16 @@\n             console.log('params', params.row.id, params.row.isEdit);\r\n             \r\n             if (params.row.isEdit) {\r\n                 return (\r\n-                    <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                        <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n-                            <SaveIcon fontSize=\"inherit\"  />\r\n-                        </IconButton>\r\n-                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(params)}>\r\n-                            <CancelIcon fontSize=\"inherit\"  />\r\n-                        </IconButton>\r\n-                    </Stack>\r\n+                    // <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                    //     <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n+                    //         <SaveIcon fontSize=\"inherit\"  />\r\n+                    //     </IconButton>\r\n+                    //     <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(params)}>\r\n+                    //         <CancelIcon fontSize=\"inherit\"  />\r\n+                    //     </IconButton>\r\n+                    // </Stack>\r\n                     // <GridActionsCellItem\r\n                     //     icon={<SaveIcon />}\r\n                     //     label=\"Save\"\r\n                     //     onClick={handleSaveClick(id)}\r\n@@ -275,9 +275,9 @@\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                     <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                         Add record\r\n                     </Button>\r\n-                    <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleAddRow}>\r\n+                    <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSave}>\r\n                         Save\r\n                     </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n"
                },
                {
                    "date": 1659059608562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,12 +220,12 @@\n                     // <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                     //     <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n                     //         <SaveIcon fontSize=\"inherit\"  />\r\n                     //     </IconButton>\r\n-                    //     <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(params)}>\r\n-                    //         <CancelIcon fontSize=\"inherit\"  />\r\n-                    //     </IconButton>\r\n-                    // </Stack>\r\n+                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(params)}>\r\n+                            <CancelIcon fontSize=\"inherit\"  />\r\n+                        </IconButton>\r\n+                    </Stack>\r\n                     // <GridActionsCellItem\r\n                     //     icon={<SaveIcon />}\r\n                     //     label=\"Save\"\r\n                     //     onClick={handleSaveClick(id)}\r\n"
                },
                {
                    "date": 1659059621356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,12 +216,12 @@\n             console.log('params', params.row.id, params.row.isEdit);\r\n             \r\n             if (params.row.isEdit) {\r\n                 return (\r\n-                    // <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    //     <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n+                    <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                    {/* //     <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n                     //         <SaveIcon fontSize=\"inherit\"  />\r\n-                    //     </IconButton>\r\n+                    //     </IconButton> */}\r\n                         <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(params)}>\r\n                             <CancelIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                     </Stack>\r\n"
                },
                {
                    "date": 1659063118983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n //     GridRowModel,\r\n // } from '@mui/x-data-grid-pro';\r\n import { useAppContext } from '../../context/AppContext';\r\n import { useRouter } from 'next/router';\r\n+import { users } from '../../.history/context/AppContext_20220725084624';\r\n \r\n \r\n // interface userList {\r\n //     is: number,\r\n@@ -78,11 +79,14 @@\n     \r\n     const handleEditRowsStop = (params) => () => {\r\n         usersClone[params.id].isEdit = false;\r\n     }\r\n-\r\n+    const [editRow, setEditRow] = useState([])\r\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n+\r\n+        // setEditRow(prevState => [...prevState, params])\r\n+\r\n         params.row.isEdit = true\r\n         console.log('params', params);\r\n         // setUsersClone()\r\n         // usersClone[params.id].isEdit = true\r\n@@ -111,9 +115,10 @@\n     const handleSave = (params) => () => {\r\n         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n         console.log('params', params);\r\n         const tmp = _.cloneDeep(usersClone);\r\n-        setUsersClone(usersClone.map((row) => (row.id === params.row.id ? params : row)));\r\n+        setUsers(usersClone.map((cloneRow) => users.map(row => {\r\n+            return cloneRow.id === row.id? _.cloneDeep(cloneRow) : [_.cloneDeep(cloneRow), ...users] })));\r\n     };\r\n \r\n     const handleDeleteClick = (params) => () => {\r\n         setUsersClone(usersClone.filter((row) => row.id !== params.id))\r\n@@ -290,10 +295,10 @@\n                     // checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n-                    // onRowEditStop={handleEditRowsStop}\r\n-                    // onRowEditStart={handleEditRowsStart}\r\n+                    onRowEditStop={handleEditRowsStop}\r\n+                    onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1659063511074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,14 +111,15 @@\n     //     console.log(users);\r\n \r\n     // };\r\n \r\n-    const handleSave = (params) => () => {\r\n+    const handleSaveClick = () => {\r\n         // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n-        console.log('params', params);\r\n-        const tmp = _.cloneDeep(usersClone);\r\n-        setUsers(usersClone.map((cloneRow) => users.map(row => {\r\n-            return cloneRow.id === row.id? _.cloneDeep(cloneRow) : [_.cloneDeep(cloneRow), ...users] })));\r\n+        // console.log('params', params);\r\n+        // const tmp = _.cloneDeep(usersClone);\r\n+        // setUsers(usersClone.map((cloneRow) => users.map(row => {\r\n+        //     return cloneRow.id === row.id? _.cloneDeep(cloneRow) : [_.cloneDeep(cloneRow), ...users] })));\r\n+        setUsers(_.cloneDeep(usersClone))\r\n     };\r\n \r\n     const handleDeleteClick = (params) => () => {\r\n         setUsersClone(usersClone.filter((row) => row.id !== params.id))\r\n@@ -280,9 +281,9 @@\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                     <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                         Add record\r\n                     </Button>\r\n-                    <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSave}>\r\n+                    <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n                         Save\r\n                     </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n"
                },
                {
                    "date": 1659063621895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,21 +126,24 @@\n         setUsers(users.filter((row) => row.id !== params.id))\r\n     };\r\n \r\n     const handleCancelClick = (params) => () => {\r\n+\r\n+        setUsersClone(_.cloneDeep(users))\r\n+\r\n         // setIsEdit(false);\r\n         // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n         // return users\r\n \r\n-        const rowId = params.row.id\r\n-        params.row.isEdit = false\r\n-        console.log('params', params);\r\n+        // const rowId = params.row.id\r\n+        // params.row.isEdit = false\r\n+        // console.log('params', params);\r\n \r\n-        // const oldRow = users.find(\r\n-        //     (e) => e.id === rowId\r\n-        // );\r\n+        // // const oldRow = users.find(\r\n+        // //     (e) => e.id === rowId\r\n+        // // );\r\n         \r\n-        usersClone[params.id].isEdit = false;\r\n+        // usersClone[params.id].isEdit = false;\r\n         // console.log(\"oldRow\", usersClone[rowId]);\r\n         // usersClone[rowId] = _.cloneDeep(oldRow);\r\n         \r\n         // console.log('<><><>', usersClone);\r\n@@ -284,8 +287,11 @@\n                     </Button>\r\n                     <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n                         Save\r\n                     </Button>\r\n+                    <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick}>\r\n+                            <CancelIcon fontSize=\"inherit\"  />\r\n+                    </IconButton>\r\n                 </Stack>\r\n                 <DataGrid\r\n                     // onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n"
                },
                {
                    "date": 1659063660176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,11 +287,11 @@\n                     </Button>\r\n                     <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n                         Save\r\n                     </Button>\r\n-                    <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick}>\r\n-                            <CancelIcon fontSize=\"inherit\"  />\r\n-                    </IconButton>\r\n+                    <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleCancelClick}>\r\n+                        Cancel\r\n+                    </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n                     // onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n"
                },
                {
                    "date": 1659063672308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,9 @@\n                     </Button>\r\n                     <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n                         Save\r\n                     </Button>\r\n-                    <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleCancelClick}>\r\n+                    <Button color=\"primary\" startIcon={<CancelIcon />} onClick={handleCancelClick}>\r\n                         Cancel\r\n                     </Button>\r\n                 </Stack>\r\n                 <DataGrid\r\n"
                },
                {
                    "date": 1659063720588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n         setUsersClone(usersClone.filter((row) => row.id !== params.id))\r\n         setUsers(users.filter((row) => row.id !== params.id))\r\n     };\r\n \r\n-    const handleCancelClick = (params) => () => {\r\n+    const handleCancelClick = () => {\r\n \r\n         setUsersClone(_.cloneDeep(users))\r\n \r\n         // setIsEdit(false);\r\n"
                },
                {
                    "date": 1659063730758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                     {/* //     <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n                     //         <SaveIcon fontSize=\"inherit\"  />\r\n                     //     </IconButton> */}\r\n-                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick(params)}>\r\n+                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick}>\r\n                             <CancelIcon fontSize=\"inherit\"  />\r\n                         </IconButton>\r\n                     </Stack>\r\n                     // <GridActionsCellItem\r\n"
                },
                {
                    "date": 1659063816819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,10 +302,10 @@\n                     // checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n-                    onRowEditStop={handleEditRowsStop}\r\n-                    onRowEditStart={handleEditRowsStart}\r\n+                    // onRowEditStop={handleEditRowsStop}\r\n+                    // onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1659065299009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n     };\r\n \r\n     const handleDeleteClick = (params) => () => {\r\n         setUsersClone(usersClone.filter((row) => row.id !== params.id))\r\n-        setUsers(users.filter((row) => row.id !== params.id))\r\n+        // setUsers(users.filter((row) => row.id !== params.id))\r\n     };\r\n \r\n     const handleCancelClick = () => {\r\n \r\n"
                },
                {
                    "date": 1659065507140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,12 +156,12 @@\n     // };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n-        console.log('updateRow', updatedRow);\r\n+        // console.log('updateRow', updatedRow);\r\n         setUsersClone(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n         \r\n-        return updatedRow;\r\n+        // return updatedRow;\r\n     };\r\n \r\n     const handleDoubleClick = (params) => () => {\r\n         usersClone[params.id]\r\n"
                },
                {
                    "date": 1659065541182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n         const updatedRow = { ...newRow };\r\n         // console.log('updateRow', updatedRow);\r\n         setUsersClone(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n         \r\n-        // return updatedRow;\r\n+        return updatedRow;\r\n     };\r\n \r\n     const handleDoubleClick = (params) => () => {\r\n         usersClone[params.id]\r\n"
                },
                {
                    "date": 1659065623002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,9 +221,9 @@\n         width: 100,\r\n         cellClassName: 'actions',\r\n         renderCell: (params) => {\r\n             const id = params.id\r\n-            console.log('params', params.row.id, params.row.isEdit);\r\n+            // console.log('params', params.row.id, params.row.isEdit);\r\n             \r\n             if (params.row.isEdit) {\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n"
                },
                {
                    "date": 1659065690492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,9 +322,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {usersClone.map(e => <div>{JSON.stringify(e)}</div>)} <br></br>\r\n+                    usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n         </>\r\n"
                },
                {
                    "date": 1659067040746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,11 +299,12 @@\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     // checkboxSelection\r\n-                    editMode=\"row\"\r\n+                    editMode=\"cell\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n+                    // onRowEditCommit={handleRowEditCommit}\r\n                     // onRowEditStop={handleEditRowsStop}\r\n                     // onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n"
                },
                {
                    "date": 1659067215177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,8 +118,9 @@\n         // const tmp = _.cloneDeep(usersClone);\r\n         // setUsers(usersClone.map((cloneRow) => users.map(row => {\r\n         //     return cloneRow.id === row.id? _.cloneDeep(cloneRow) : [_.cloneDeep(cloneRow), ...users] })));\r\n         setUsers(_.cloneDeep(usersClone))\r\n+        setUsers(_.cloneDeep(usersClone))\r\n     };\r\n \r\n     const handleDeleteClick = (params) => () => {\r\n         setUsersClone(usersClone.filter((row) => row.id !== params.id))\r\n"
                },
                {
                    "date": 1659067288342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,10 +117,10 @@\n         // console.log('params', params);\r\n         // const tmp = _.cloneDeep(usersClone);\r\n         // setUsers(usersClone.map((cloneRow) => users.map(row => {\r\n         //     return cloneRow.id === row.id? _.cloneDeep(cloneRow) : [_.cloneDeep(cloneRow), ...users] })));\r\n-        setUsers(_.cloneDeep(usersClone))\r\n-        setUsers(_.cloneDeep(usersClone))\r\n+        const tmp = _.cloneDeep(usersClone)\r\n+        setUsers(tmp)\r\n     };\r\n \r\n     const handleDeleteClick = (params) => () => {\r\n         setUsersClone(usersClone.filter((row) => row.id !== params.id))\r\n"
                },
                {
                    "date": 1659067314162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n         // const tmp = _.cloneDeep(usersClone);\r\n         // setUsers(usersClone.map((cloneRow) => users.map(row => {\r\n         //     return cloneRow.id === row.id? _.cloneDeep(cloneRow) : [_.cloneDeep(cloneRow), ...users] })));\r\n         const tmp = _.cloneDeep(usersClone)\r\n-        setUsers(tmp)\r\n+        setUsers(_.cloneDeep(tmp))\r\n     };\r\n \r\n     const handleDeleteClick = (params) => () => {\r\n         setUsersClone(usersClone.filter((row) => row.id !== params.id))\r\n"
                },
                {
                    "date": 1659074612064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -323,9 +323,9 @@\n                     experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n-                    editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n+                    editRowsModel: {editRowsModel} <br></br>\r\n                     usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n"
                },
                {
                    "date": 1659074625294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -323,9 +323,9 @@\n                     experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{width: '600px'}}>\r\n-                    editRowsModel: {editRowsModel} <br></br>\r\n+                    editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n                     usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n"
                },
                {
                    "date": 1659074805867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,10 @@\n         return updatedRow;\r\n     };\r\n \r\n     const handleDoubleClick = (params) => () => {\r\n-        usersClone[params.id]\r\n+        console.log('params', params);\r\n+        \r\n     }\r\n \r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n     //     console.log('here');\r\n@@ -311,9 +312,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    // onRowDoubleClick={handleDoubleClick}\r\n+                    onRowDoubleClick={handleDoubleClick}\r\n                     // components={{\r\n                     //     Toolbar: EditToolbar,\r\n                     // }}\r\n                     // componentsProps={{\r\n"
                },
                {
                    "date": 1659075040546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,11 +84,12 @@\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n \r\n         // setEditRow(prevState => [...prevState, params])\r\n-\r\n+        console.log('start edit');\r\n+        \r\n         params.row.isEdit = true\r\n-        console.log('params', params);\r\n+        // console.log('params', params);\r\n         // setUsersClone()\r\n         // usersClone[params.id].isEdit = true\r\n         // usersClone.map(e => {\r\n         //     e.id === params.id? params : e\r\n@@ -305,10 +306,10 @@\n                     editMode=\"cell\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // onRowEditCommit={handleRowEditCommit}\r\n-                    // onRowEditStop={handleEditRowsStop}\r\n-                    // onRowEditStart={handleEditRowsStart}\r\n+                    onRowEditStop={handleEditRowsStop}\r\n+                    onRowEditStart={handleEditRowsStart}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1659075057794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,10 @@\n         }, ...prevUsersClone]);\r\n     }\r\n     \r\n     const handleEditRowsStop = (params) => () => {\r\n+        console.log('stop edit');\r\n+        \r\n         usersClone[params.id].isEdit = false;\r\n     }\r\n     const [editRow, setEditRow] = useState([])\r\n     const handleEditRowsStart = (params) => () => {\r\n"
                },
                {
                    "date": 1659075085076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,9 +304,9 @@\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     // checkboxSelection\r\n-                    editMode=\"cell\"\r\n+                    editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // onRowEditCommit={handleRowEditCommit}\r\n                     onRowEditStop={handleEditRowsStop}\r\n"
                },
                {
                    "date": 1659075145442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,10 +308,10 @@\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // onRowEditCommit={handleRowEditCommit}\r\n-                    onRowEditStop={handleEditRowsStop}\r\n-                    onRowEditStart={handleEditRowsStart}\r\n+                    onRowEditStop={() =>{console.log('stop edit')}}\r\n+                    onRowEditStart={() =>{console.log('statrt edit')}}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1659075198696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,9 @@\n                     rowsPerPageOptions={[5]}\r\n                     // checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n-                    onEditRowsModelChange={handleEditRowsModelChange}\r\n+                    onEditRowsModelChange={() =>{console.log('edit')}}\r\n                     // onRowEditCommit={handleRowEditCommit}\r\n                     onRowEditStop={() =>{console.log('stop edit')}}\r\n                     onRowEditStart={() =>{console.log('statrt edit')}}\r\n                     // rowModesModel={rowModesModel}\r\n"
                },
                {
                    "date": 1659075247478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,13 +305,13 @@\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     // checkboxSelection\r\n                     editMode=\"row\"\r\n-                    editRowsModel={editRowsModel}\r\n-                    onEditRowsModelChange={() =>{console.log('edit')}}\r\n+                    editRowsModel={() =>{console.log('edit')}}\r\n+                    onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // onRowEditCommit={handleRowEditCommit}\r\n                     onRowEditStop={() =>{console.log('stop edit')}}\r\n-                    onRowEditStart={() =>{console.log('statrt edit')}}\r\n+                    onRowEditStart={() =>{console.log('start edit')}}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n"
                },
                {
                    "date": 1659075292849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,9 +305,9 @@\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     // checkboxSelection\r\n                     editMode=\"row\"\r\n-                    editRowsModel={() =>{console.log('edit')}}\r\n+                    editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // onRowEditCommit={handleRowEditCommit}\r\n                     onRowEditStop={() =>{console.log('stop edit')}}\r\n                     onRowEditStart={() =>{console.log('start edit')}}\r\n"
                },
                {
                    "date": 1659076117882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n import { DataGrid, GridCellEditCommitParams, GridColDef, GridEditRowsModel, GridRowModel, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n-import { Box, IconButton, Stack } from '@mui/material';\r\n+import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n import DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\n@@ -28,12 +28,12 @@\n \r\n \r\n // interface userList {\r\n //     is: number,\r\n-    // firstName: string,\r\n-    // lastName: string,\r\n-    // email: string,\r\n-    // password: string\r\n+// firstName: string,\r\n+// lastName: string,\r\n+// email: string,\r\n+// password: string\r\n // }\r\n \r\n \r\n export default function userPage() {\r\n@@ -51,9 +51,10 @@\n     console.log('isInEditMode', isInEditMode);\r\n     const [usersClone, setUsersClone] = useState(_.clone(users))\r\n \r\n     console.log('clone', usersClone);\r\n-    \r\n+\r\n+    let openDialog = false\r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n \r\n@@ -63,10 +64,10 @@\n \r\n     const [editRowsModel, setEditRowsModel] = useState({});\r\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n         setEditRowsModel(model);\r\n-      },\r\n-    [])\r\n+    },\r\n+        [])\r\n \r\n     const handleAddRow = () => {\r\n         setUsersClone((prevUsersClone) => [{\r\n             id: Date.now(),\r\n@@ -75,21 +76,21 @@\n             email: '',\r\n             password: 'Abc@1234',\r\n         }, ...prevUsersClone]);\r\n     }\r\n-    \r\n+\r\n     const handleEditRowsStop = (params) => () => {\r\n         console.log('stop edit');\r\n-        \r\n+\r\n         usersClone[params.id].isEdit = false;\r\n     }\r\n     const [editRow, setEditRow] = useState([])\r\n     const handleEditRowsStart = (params) => () => {\r\n         // setIsEdit(true);\r\n \r\n         // setEditRow(prevState => [...prevState, params])\r\n         console.log('start edit');\r\n-        \r\n+\r\n         params.row.isEdit = true\r\n         // console.log('params', params);\r\n         // setUsersClone()\r\n         // usersClone[params.id].isEdit = true\r\n@@ -144,15 +145,15 @@\n \r\n         // // const oldRow = users.find(\r\n         // //     (e) => e.id === rowId\r\n         // // );\r\n-        \r\n+\r\n         // usersClone[params.id].isEdit = false;\r\n         // console.log(\"oldRow\", usersClone[rowId]);\r\n         // usersClone[rowId] = _.cloneDeep(oldRow);\r\n-        \r\n+\r\n         // console.log('<><><>', usersClone);\r\n-        \r\n+\r\n     }\r\n     //     const editedRow = usersClone.find((row) => row.id === id);\r\n     //     if (editedRow!.isNew) {\r\n     //         setUsers(usersClone.filter((row) => row.id !== id));\r\n@@ -162,20 +163,20 @@\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n         // console.log('updateRow', updatedRow);\r\n         setUsersClone(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n-        \r\n+\r\n         return updatedRow;\r\n     };\r\n \r\n     const handleDoubleClick = (params) => () => {\r\n         console.log('params', params);\r\n-        \r\n+\r\n     }\r\n \r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n     //     console.log('here');\r\n-        \r\n+\r\n     //     const array = users.map(r => {\r\n     //         if (r.id === e.id) {\r\n     //             return {...r, [e.field]: e.value}\r\n     //         } else {\r\n@@ -183,9 +184,9 @@\n     //         }\r\n     //     })\r\n     //     setRowID(_.cloneDeep(array))\r\n     //     console.log('array', array[e.id]);\r\n-        \r\n+\r\n     // }\r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n     //     const data = await response.json()\r\n@@ -204,66 +205,66 @@\n     //     }\r\n     //     fetchData()\r\n     //   }, [])\r\n \r\n-    \r\n \r\n+\r\n     if (status === 'false') {\r\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n-    \r\n \r\n+\r\n     const cols: GridColDef[] = [\r\n-    { field: 'id', headerName: 'ID', flex: 1, },\r\n-    { field: 'firstName', headerName: 'First name', flex: 1, editable: true},\r\n-    { field: 'lastName', headerName: 'Last name', flex: 1, editable: true},\r\n-    { field: 'email', headerName: 'Email', flex: 1, editable: true},\r\n-    {\r\n-        field: 'actions',\r\n-        type: 'actions',\r\n-        headerName: 'Actions',\r\n-        width: 100,\r\n-        cellClassName: 'actions',\r\n-        renderCell: (params) => {\r\n-            const id = params.id\r\n-            // console.log('params', params.row.id, params.row.isEdit);\r\n-            \r\n-            if (params.row.isEdit) {\r\n+        { field: 'id', headerName: 'ID', flex: 1, },\r\n+        { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n+        { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n+        { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n+        {\r\n+            field: 'actions',\r\n+            type: 'actions',\r\n+            headerName: 'Actions',\r\n+            width: 100,\r\n+            cellClassName: 'actions',\r\n+            renderCell: (params) => {\r\n+                const id = params.id\r\n+                // console.log('params', params.row.id, params.row.isEdit);\r\n+\r\n+                if (params.row.isEdit) {\r\n+                    return (\r\n+                        <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                            {/* //     <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n+                    //         <SaveIcon fontSize=\"inherit\"  />\r\n+                    //     </IconButton> */}\r\n+                            <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick}>\r\n+                                <CancelIcon fontSize=\"inherit\" />\r\n+                            </IconButton>\r\n+                        </Stack>\r\n+                        // <GridActionsCellItem\r\n+                        //     icon={<SaveIcon />}\r\n+                        //     label=\"Save\"\r\n+                        //     onClick={handleSaveClick(id)}\r\n+                        // />,\r\n+                        // <GridActionsCellItem\r\n+                        //     icon={<CancelIcon />}\r\n+                        //     label=\"Cancel\"\r\n+                        //     className=\"textPrimary\"\r\n+                        //     onClick={handleCancelClick(id)}\r\n+                        //     color=\"inherit\"\r\n+                        // />,\r\n+                    )\r\n+                }\r\n                 return (\r\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    {/* //     <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n-                    //         <SaveIcon fontSize=\"inherit\"  />\r\n-                    //     </IconButton> */}\r\n-                        <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick}>\r\n-                            <CancelIcon fontSize=\"inherit\"  />\r\n-                        </IconButton>\r\n-                    </Stack>\r\n-                    // <GridActionsCellItem\r\n-                    //     icon={<SaveIcon />}\r\n-                    //     label=\"Save\"\r\n-                    //     onClick={handleSaveClick(id)}\r\n-                    // />,\r\n-                    // <GridActionsCellItem\r\n-                    //     icon={<CancelIcon />}\r\n-                    //     label=\"Cancel\"\r\n-                    //     className=\"textPrimary\"\r\n-                    //     onClick={handleCancelClick(id)}\r\n-                    //     color=\"inherit\"\r\n-                    // />,\r\n-                )\r\n-            }\r\n-            return (\r\n-                <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                    {/* <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n+                        {/* <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n                     </IconButton> */}\r\n-                    <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(params)}>\r\n-                        <DeleteIcon fontSize=\"inherit\"  />\r\n-                    </IconButton>\r\n+                        <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(params)}>\r\n+                            <DeleteIcon fontSize=\"inherit\" />\r\n+                        </IconButton>\r\n \r\n-                    {/* <GridActionsCellItem\r\n+                        {/* <GridActionsCellItem\r\n                             icon={<EditIcon />}\r\n                             label=\"Edit\"\r\n                             className=\"textPrimary\"\r\n                             onClick={handleEditClick(id)}\r\n@@ -274,12 +275,12 @@\n                             label=\"Delete\"\r\n                             onClick={handleDeleteClick(id)}\r\n                             color=\"inherit\"\r\n                         />, */}\r\n-                </Stack>\r\n-            )\r\n+                    </Stack>\r\n+                )\r\n+            },\r\n         },\r\n-    },\r\n     ]\r\n \r\n     return (\r\n         <>\r\n@@ -303,15 +304,15 @@\n                     rows={usersClone}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n-                    // checkboxSelection\r\n+                    checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // onRowEditCommit={handleRowEditCommit}\r\n-                    onRowEditStop={() =>{console.log('stop edit')}}\r\n-                    onRowEditStart={() =>{console.log('start edit')}}\r\n+                    onRowEditStop={() => { console.log('stop edit') }}\r\n+                    onRowEditStart={() => { console.log('start edit') }}\r\n                     // rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n@@ -322,17 +323,41 @@\n                     // }}\r\n                     // componentsProps={{\r\n                     //     toolbar: { setUsers, setRowModesModel },\r\n                     // }}\r\n-                    \r\n+\r\n                     experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n-                <div style={{width: '600px'}}>\r\n+                <div style={{ width: '600px' }}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n                     usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n+            <Dialog\r\n+                open={openDialog}\r\n+                onClose={handleCloseDialog}\r\n+            >\r\n+                <DialogTitle>Delete</DialogTitle>\r\n+                <DialogContent>\r\n+                    <DialogContentText>Are you sure?</DialogContentText>\r\n+                </DialogContent>\r\n+                <DialogActions>\r\n+                    <Button\r\n+                        variant=\"outlined\"\r\n+                        onClick={handleDeleteClick}\r\n+                    >\r\n+                        Yes\r\n+                    </Button>\r\n+                    <Button\r\n+                        variant=\"outlined\"\r\n+                        color=\"error\"\r\n+                        onClick={handleCloseDialog}\r\n+                    >\r\n+                        No\r\n+                    </Button>\r\n+                </DialogActions>\r\n+            </Dialog>\r\n         </>\r\n     )\r\n }\r\n"
                },
                {
                    "date": 1659076162765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,8 +172,11 @@\n         console.log('params', params);\r\n \r\n     }\r\n \r\n+    const handleCloseDialog = () => {\r\n+        openDialog = false\r\n+    }\r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n     //     console.log('here');\r\n \r\n     //     const array = users.map(r => {\r\n"
                },
                {
                    "date": 1659076247747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n // } from '@mui/x-data-grid-pro';\r\n import { useAppContext } from '../../context/AppContext';\r\n import { useRouter } from 'next/router';\r\n import { users } from '../../.history/context/AppContext_20220725084624';\r\n+import handler from '../../.history/pages/api/index_20220715154918';\r\n \r\n \r\n // interface userList {\r\n //     is: number,\r\n@@ -172,8 +173,12 @@\n         console.log('params', params);\r\n \r\n     }\r\n \r\n+    const handleOpenDialog = () => {\r\n+        openDialog = true\r\n+    }\r\n+    \r\n     const handleCloseDialog = () => {\r\n         openDialog = false\r\n     }\r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n@@ -261,9 +266,9 @@\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         {/* <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n                     </IconButton> */}\r\n-                        <IconButton aria-label=\"delete\" size=\"small\" onClick={handleDeleteClick(params)}>\r\n+                        <IconButton aria-label=\"delete\" size=\"small\" onClick={handleOpenDialog}>\r\n                             <DeleteIcon fontSize=\"inherit\" />\r\n                         </IconButton>\r\n \r\n                         {/* <GridActionsCellItem\r\n"
                },
                {
                    "date": 1659076276674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n \r\n     const handleOpenDialog = () => {\r\n         openDialog = true\r\n     }\r\n-    \r\n+\r\n     const handleCloseDialog = () => {\r\n         openDialog = false\r\n     }\r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n@@ -342,9 +342,9 @@\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n             <Dialog\r\n-                open={openDialog}\r\n+                open={true}\r\n                 onClose={handleCloseDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n                 <DialogContent>\r\n"
                },
                {
                    "date": 1659076407664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,12 +175,15 @@\n     }\r\n \r\n     const handleOpenDialog = () => {\r\n         openDialog = true\r\n+        console.log('openDialog', openDialog);\r\n+        \r\n     }\r\n \r\n     const handleCloseDialog = () => {\r\n         openDialog = false\r\n+        console.log('openDialog', openDialog);\r\n     }\r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n     //     console.log('here');\r\n \r\n"
                },
                {
                    "date": 1659076450250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -345,9 +345,9 @@\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n             <Dialog\r\n-                open={true}\r\n+                open={openDialog}\r\n                 onClose={handleCloseDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n                 <DialogContent>\r\n"
                },
                {
                    "date": 1659076530919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,9 @@\n                 </div>\r\n             </Box>\r\n             <Dialog\r\n                 open={openDialog}\r\n-                onClose={handleCloseDialog}\r\n+                // onClose={handleCloseDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n                 <DialogContent>\r\n                     <DialogContentText>Are you sure?</DialogContentText>\r\n"
                },
                {
                    "date": 1659076558002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,9 @@\n                 </div>\r\n             </Box>\r\n             <Dialog\r\n                 open={openDialog}\r\n-                // onClose={handleCloseDialog}\r\n+                onClose={handleCloseDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n                 <DialogContent>\r\n                     <DialogContentText>Are you sure?</DialogContentText>\r\n"
                },
                {
                    "date": 1659076585793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     const [usersClone, setUsersClone] = useState(_.clone(users))\r\n \r\n     console.log('clone', usersClone);\r\n \r\n-    let openDialog = false\r\n+    let openDialog = null\r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n \r\n"
                },
                {
                    "date": 1659076689902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     const [usersClone, setUsersClone] = useState(_.clone(users))\r\n \r\n     console.log('clone', usersClone);\r\n \r\n-    let openDialog = null\r\n+    const [openDialog, setOpenDialog] = useState(false)\r\n     // const handleRowEditStart = (params, event) => {\r\n     //     event.defaultMuiPrevented = true;\r\n     // };\r\n \r\n@@ -174,15 +174,15 @@\n \r\n     }\r\n \r\n     const handleOpenDialog = () => {\r\n-        openDialog = true\r\n+        setOpenDialog(true)\r\n         console.log('openDialog', openDialog);\r\n         \r\n     }\r\n \r\n     const handleCloseDialog = () => {\r\n-        openDialog = false\r\n+        setOpenDialog(false)\r\n         console.log('openDialog', openDialog);\r\n     }\r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n     //     console.log('here');\r\n"
                },
                {
                    "date": 1659076765810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,8 +127,10 @@\n         setUsers(_.cloneDeep(tmp))\r\n     };\r\n \r\n     const handleDeleteClick = (params) => () => {\r\n+        console.log('params', params);\r\n+        \r\n         setUsersClone(usersClone.filter((row) => row.id !== params.id))\r\n         // setUsers(users.filter((row) => row.id !== params.id))\r\n     };\r\n \r\n"
                },
                {
                    "date": 1659077030165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,10 +177,8 @@\n     }\r\n \r\n     const handleOpenDialog = () => {\r\n         setOpenDialog(true)\r\n-        console.log('openDialog', openDialog);\r\n-        \r\n     }\r\n \r\n     const handleCloseDialog = () => {\r\n         setOpenDialog(false)\r\n"
                },
                {
                    "date": 1659078358355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,9 +327,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    onRowDoubleClick={handleDoubleClick}\r\n+                    onRowDoubleClick={()=>handleDoubleClick}\r\n                     // components={{\r\n                     //     Toolbar: EditToolbar,\r\n                     // }}\r\n                     // componentsProps={{\r\n"
                },
                {
                    "date": 1659078390577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,9 +327,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    onRowDoubleClick={()=>handleDoubleClick}\r\n+                    onRowDoubleClick={handleDoubleClick}\r\n                     // components={{\r\n                     //     Toolbar: EditToolbar,\r\n                     // }}\r\n                     // componentsProps={{\r\n"
                },
                {
                    "date": 1659078576881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,9 +327,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    onRowDoubleClick={handleDoubleClick}\r\n+                    onRowDoubleClick={handleDoubleClick([usersClone, setUsersClone, users, setUsers])}\r\n                     // components={{\r\n                     //     Toolbar: EditToolbar,\r\n                     // }}\r\n                     // componentsProps={{\r\n"
                },
                {
                    "date": 1659078633000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,9 +327,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     // onRowEditStart={handleRowEditStart}\r\n                     // onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    onRowDoubleClick={handleDoubleClick([usersClone, setUsersClone, users, setUsers])}\r\n+                    onRowDoubleClick={handleDoubleClick}\r\n                     // components={{\r\n                     //     Toolbar: EditToolbar,\r\n                     // }}\r\n                     // componentsProps={{\r\n@@ -355,9 +355,9 @@\n                 </DialogContent>\r\n                 <DialogActions>\r\n                     <Button\r\n                         variant=\"outlined\"\r\n-                        onClick={handleDeleteClick}\r\n+                        onClick={handleDeleteClick([usersClone, setUsersClone, users, setUsers])}\r\n                     >\r\n                         Yes\r\n                     </Button>\r\n                     <Button\r\n"
                },
                {
                    "date": 1659078730840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,9 +355,9 @@\n                 </DialogContent>\r\n                 <DialogActions>\r\n                     <Button\r\n                         variant=\"outlined\"\r\n-                        onClick={handleDeleteClick([usersClone, setUsersClone, users, setUsers])}\r\n+                        onClick={handleDeleteClick([users, setUsers])}\r\n                     >\r\n                         Yes\r\n                     </Button>\r\n                     <Button\r\n"
                },
                {
                    "date": 1659079267986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         {/* <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n                     </IconButton> */}\r\n-                        <IconButton aria-label=\"delete\" size=\"small\" onClick={handleOpenDialog}>\r\n+                        <IconButton aria-label=\"delete\" size=\"small\" onClick={() => handleOpenDialog(id)}>\r\n                             <DeleteIcon fontSize=\"inherit\" />\r\n                         </IconButton>\r\n \r\n                         {/* <GridActionsCellItem\r\n@@ -336,9 +336,9 @@\n                     //     toolbar: { setUsers, setRowModesModel },\r\n                     // }}\r\n \r\n                     experimentalFeatures={{ newEditingApi: true }}\r\n-                    disableSelectionOnClick\r\n+                    // disableSelectionOnClick\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n                     usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br>\r\n"
                },
                {
                    "date": 1659079294418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,9 +336,9 @@\n                     //     toolbar: { setUsers, setRowModesModel },\r\n                     // }}\r\n \r\n                     experimentalFeatures={{ newEditingApi: true }}\r\n-                    // disableSelectionOnClick\r\n+                    disableSelectionOnClick\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n                     usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br>\r\n"
                },
                {
                    "date": 1659079535434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,9 +355,9 @@\n                 </DialogContent>\r\n                 <DialogActions>\r\n                     <Button\r\n                         variant=\"outlined\"\r\n-                        onClick={handleDeleteClick([users, setUsers])}\r\n+                        onClick={handleDeleteClick}\r\n                     >\r\n                         Yes\r\n                     </Button>\r\n                     <Button\r\n"
                },
                {
                    "date": 1659079544892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n                     <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                         {/* <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n                         <EditIcon fontSize=\"inherit\"  />\r\n                     </IconButton> */}\r\n-                        <IconButton aria-label=\"delete\" size=\"small\" onClick={() => handleOpenDialog(id)}>\r\n+                        <IconButton aria-label=\"delete\" size=\"small\" onClick={() => handleOpenDialog}>\r\n                             <DeleteIcon fontSize=\"inherit\" />\r\n                         </IconButton>\r\n \r\n                         {/* <GridActionsCellItem\r\n"
                },
                {
                    "date": 1659082293245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n-import { DataGrid, GridCellEditCommitParams, GridColDef, GridEditRowsModel, GridRowModel, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n+import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridEditRowsModel, GridRowModel, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n@@ -353,14 +353,13 @@\n                 <DialogContent>\r\n                     <DialogContentText>Are you sure?</DialogContentText>\r\n                 </DialogContent>\r\n                 <DialogActions>\r\n-                    <Button\r\n-                        variant=\"outlined\"\r\n+                    <GridActionsCellItem\r\n+                        label=\"Save\"\r\n+                        showInMenu={true}\r\n                         onClick={handleDeleteClick}\r\n-                    >\r\n-                        Yes\r\n-                    </Button>\r\n+                    />\r\n                     <Button\r\n                         variant=\"outlined\"\r\n                         color=\"error\"\r\n                         onClick={handleCloseDialog}\r\n"
                },
                {
                    "date": 1659084196442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n-import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridEditRowsModel, GridRowModel, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n+import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n@@ -46,30 +46,31 @@\n     const router = useRouter()\r\n \r\n     // console.log('path', router.pathname)\r\n     const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n-    const [isEdit, setIsEdit] = useState(false)\r\n-    const isInEditMode = isEdit\r\n-    console.log('isInEditMode', isInEditMode);\r\n+    // const [isEdit, setIsEdit] = useState(false)\r\n+    // const isInEditMode = isEdit\r\n+    // console.log('isInEditMode', isInEditMode);\r\n     const [usersClone, setUsersClone] = useState(_.clone(users))\r\n \r\n     console.log('clone', usersClone);\r\n \r\n-    const [openDialog, setOpenDialog] = useState(false)\r\n-    // const handleRowEditStart = (params, event) => {\r\n-    //     event.defaultMuiPrevented = true;\r\n-    // };\r\n+    // const [openDialog, setOpenDialog] = useState(false)\r\n+    const handleRowEditStart = (params, event) => {\r\n+        event.defaultMuiPrevented = true;\r\n+    };\r\n \r\n-    // const handleRowEditStop = (params, event) => {\r\n-    //     event.defaultMuiPrevented = true;\r\n-    // };\r\n+    const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\r\n+        event.defaultMuiPrevented = true;\r\n+      };\r\n \r\n     const [editRowsModel, setEditRowsModel] = useState({});\r\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n         setEditRowsModel(model);\r\n-    },\r\n-        [])\r\n+    }, [])\r\n \r\n+    const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n+\r\n     const handleAddRow = () => {\r\n         setUsersClone((prevUsersClone) => [{\r\n             id: Date.now(),\r\n             firstName: '',\r\n@@ -78,91 +79,91 @@\n             password: 'Abc@1234',\r\n         }, ...prevUsersClone]);\r\n     }\r\n \r\n-    const handleEditRowsStop = (params) => () => {\r\n-        console.log('stop edit');\r\n+    // const handleEditRowsStop = (params) => () => {\r\n+    //     console.log('stop edit');\r\n \r\n-        usersClone[params.id].isEdit = false;\r\n-    }\r\n-    const [editRow, setEditRow] = useState([])\r\n-    const handleEditRowsStart = (params) => () => {\r\n-        // setIsEdit(true);\r\n+    //     usersClone[params.id].isEdit = false;\r\n+    // }\r\n+    // const [editRow, setEditRow] = useState([])\r\n+    // const handleEditRowsStart = (params) => () => {\r\n+    //     // setIsEdit(true);\r\n \r\n-        // setEditRow(prevState => [...prevState, params])\r\n-        console.log('start edit');\r\n+    //     // setEditRow(prevState => [...prevState, params])\r\n+    //     console.log('start edit');\r\n \r\n-        params.row.isEdit = true\r\n-        // console.log('params', params);\r\n-        // setUsersClone()\r\n-        // usersClone[params.id].isEdit = true\r\n-        // usersClone.map(e => {\r\n-        //     e.id === params.id? params : e\r\n-        // })\r\n-        // usersClone[params.id] = _.cloneDeep(params);\r\n-        usersClone[params.id].isEdit = true;\r\n-    }\r\n+    //     params.row.isEdit = true\r\n+    //     // console.log('params', params);\r\n+    //     // setUsersClone()\r\n+    //     // usersClone[params.id].isEdit = true\r\n+    //     // usersClone.map(e => {\r\n+    //     //     e.id === params.id? params : e\r\n+    //     // })\r\n+    //     // usersClone[params.id] = _.cloneDeep(params);\r\n+    //     usersClone[params.id].isEdit = true;\r\n+    // }\r\n \r\n-    // const handleEditClick = (id) => () => {\r\n-    //     console.log('edit ID:', id);\r\n-    //     // params.isEditable = true\r\n-    //     // // setRowID(id)\r\n-    //     // // getValue\r\n-    //     const tmp = _.cloneDeep(users)\r\n-    //     tmp[id].mode = GridRowModes.Edit\r\n-    //     console.log('tmp', tmp);\r\n+    // // const handleEditClick = (id) => () => {\r\n+    // //     console.log('edit ID:', id);\r\n+    // //     // params.isEditable = true\r\n+    // //     // // setRowID(id)\r\n+    // //     // // getValue\r\n+    // //     const tmp = _.cloneDeep(users)\r\n+    // //     tmp[id].mode = GridRowModes.Edit\r\n+    // //     console.log('tmp', tmp);\r\n \r\n-    //     setUsers(_.cloneDeep(tmp));\r\n-    //     setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n-    //     console.log(users);\r\n+    // //     setUsers(_.cloneDeep(tmp));\r\n+    // //     setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n+    // //     console.log(users);\r\n \r\n+    // // };\r\n+\r\n+    // const handleSaveClick = () => {\r\n+    //     // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n+    //     // console.log('params', params);\r\n+    //     // const tmp = _.cloneDeep(usersClone);\r\n+    //     // setUsers(usersClone.map((cloneRow) => users.map(row => {\r\n+    //     //     return cloneRow.id === row.id? _.cloneDeep(cloneRow) : [_.cloneDeep(cloneRow), ...users] })));\r\n+    //     const tmp = _.cloneDeep(usersClone)\r\n+    //     setUsers(_.cloneDeep(tmp))\r\n     // };\r\n \r\n-    const handleSaveClick = () => {\r\n-        // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n-        // console.log('params', params);\r\n-        // const tmp = _.cloneDeep(usersClone);\r\n-        // setUsers(usersClone.map((cloneRow) => users.map(row => {\r\n-        //     return cloneRow.id === row.id? _.cloneDeep(cloneRow) : [_.cloneDeep(cloneRow), ...users] })));\r\n-        const tmp = _.cloneDeep(usersClone)\r\n-        setUsers(_.cloneDeep(tmp))\r\n-    };\r\n+    // const handleDeleteClick = (params) => () => {\r\n+    //     console.log('params', params);\r\n \r\n-    const handleDeleteClick = (params) => () => {\r\n-        console.log('params', params);\r\n-        \r\n-        setUsersClone(usersClone.filter((row) => row.id !== params.id))\r\n-        // setUsers(users.filter((row) => row.id !== params.id))\r\n-    };\r\n+    //     setUsersClone(usersClone.filter((row) => row.id !== params.id))\r\n+    //     // setUsers(users.filter((row) => row.id !== params.id))\r\n+    // };\r\n \r\n-    const handleCancelClick = () => {\r\n+    // const handleCancelClick = () => {\r\n \r\n-        setUsersClone(_.cloneDeep(users))\r\n+    //     setUsersClone(_.cloneDeep(users))\r\n \r\n-        // setIsEdit(false);\r\n-        // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n-        // return users\r\n+    //     // setIsEdit(false);\r\n+    //     // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n+    //     // return users\r\n \r\n-        // const rowId = params.row.id\r\n-        // params.row.isEdit = false\r\n-        // console.log('params', params);\r\n+    //     // const rowId = params.row.id\r\n+    //     // params.row.isEdit = false\r\n+    //     // console.log('params', params);\r\n \r\n-        // // const oldRow = users.find(\r\n-        // //     (e) => e.id === rowId\r\n-        // // );\r\n+    //     // // const oldRow = users.find(\r\n+    //     // //     (e) => e.id === rowId\r\n+    //     // // );\r\n \r\n-        // usersClone[params.id].isEdit = false;\r\n-        // console.log(\"oldRow\", usersClone[rowId]);\r\n-        // usersClone[rowId] = _.cloneDeep(oldRow);\r\n+    //     // usersClone[params.id].isEdit = false;\r\n+    //     // console.log(\"oldRow\", usersClone[rowId]);\r\n+    //     // usersClone[rowId] = _.cloneDeep(oldRow);\r\n \r\n-        // console.log('<><><>', usersClone);\r\n+    //     // console.log('<><><>', usersClone);\r\n \r\n-    }\r\n-    //     const editedRow = usersClone.find((row) => row.id === id);\r\n-    //     if (editedRow!.isNew) {\r\n-    //         setUsers(usersClone.filter((row) => row.id !== id));\r\n-    //     }\r\n-    // };\r\n+    // }\r\n+    // //     const editedRow = usersClone.find((row) => row.id === id);\r\n+    // //     if (editedRow!.isNew) {\r\n+    // //         setUsers(usersClone.filter((row) => row.id !== id));\r\n+    // //     }\r\n+    // // };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n         // console.log('updateRow', updatedRow);\r\n@@ -170,21 +171,16 @@\n \r\n         return updatedRow;\r\n     };\r\n \r\n-    const handleDoubleClick = (params) => () => {\r\n-        console.log('params', params);\r\n+    // const handleOpenDialog = () => {\r\n+    //     setOpenDialog(true)\r\n+    // }\r\n \r\n-    }\r\n-\r\n-    const handleOpenDialog = () => {\r\n-        setOpenDialog(true)\r\n-    }\r\n-\r\n-    const handleCloseDialog = () => {\r\n-        setOpenDialog(false)\r\n-        console.log('openDialog', openDialog);\r\n-    }\r\n+    // const handleCloseDialog = () => {\r\n+    //     setOpenDialog(false)\r\n+    //     console.log('openDialog', openDialog);\r\n+    // }\r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n     //     console.log('here');\r\n \r\n     //     const array = users.map(r => {\r\n@@ -216,18 +212,28 @@\n     //     }\r\n     //     fetchData()\r\n     //   }, [])\r\n \r\n+    const handleEditClick = (id: GridRowId) => () => {\r\n+        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n+      };\r\n+    \r\n+      const handleSaveClick = (id: GridRowId) => () => {\r\n+        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n+      };\r\n+    \r\n+      const handleDeleteClick = (id: GridRowId) => () => {\r\n+        setUsersClone(usersClone.filter((row) => row.id !== id));\r\n+      };\r\n \r\n-\r\n     if (status === 'false') {\r\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n \r\n \r\n-    const cols: GridColDef[] = [\r\n+    const cols: GridColumns = [\r\n         { field: 'id', headerName: 'ID', flex: 1, },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n@@ -236,46 +242,46 @@\n             type: 'actions',\r\n             headerName: 'Actions',\r\n             width: 100,\r\n             cellClassName: 'actions',\r\n-            renderCell: (params) => {\r\n-                const id = params.id\r\n+            getActions: (id) => {\r\n+                // <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                //     <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n+                    //         <SaveIcon fontSize=\"inherit\"  />\r\n+                    //     </IconButton> \r\n+                // <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick}>\r\n+                //                 <CancelIcon fontSize=\"inherit\" />\r\n+                //             </IconButton>\r\n+                //         </Stack>\r\n+                // const id = params.id\r\n                 // console.log('params', params.row.id, params.row.isEdit);\r\n-\r\n-                if (params.row.isEdit) {\r\n-                    return (\r\n-                        <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                            {/* //     <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n-                    //         <SaveIcon fontSize=\"inherit\"  />\r\n-                    //     </IconButton> */}\r\n-                            <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick}>\r\n-                                <CancelIcon fontSize=\"inherit\" />\r\n-                            </IconButton>\r\n-                        </Stack>\r\n-                        // <GridActionsCellItem\r\n-                        //     icon={<SaveIcon />}\r\n-                        //     label=\"Save\"\r\n-                        //     onClick={handleSaveClick(id)}\r\n-                        // />,\r\n-                        // <GridActionsCellItem\r\n-                        //     icon={<CancelIcon />}\r\n-                        //     label=\"Cancel\"\r\n-                        //     className=\"textPrimary\"\r\n-                        //     onClick={handleCancelClick(id)}\r\n-                        //     color=\"inherit\"\r\n-                        // />,\r\n-                    )\r\n+                const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n+                if (isInEditMode) {\r\n+                    return [\r\n+                        <GridActionsCellItem\r\n+                            icon={<SaveIcon />}\r\n+                            label=\"Save\"\r\n+                            onClick={handleSaveClick(id)}\r\n+                        />,\r\n+                        <GridActionsCellItem\r\n+                            icon={<CancelIcon />}\r\n+                            label=\"Cancel\"\r\n+                            className=\"textPrimary\"\r\n+                            onClick={handleCancelClick(id)}\r\n+                            color=\"inherit\"\r\n+                        />,\r\n+                    ]\r\n                 }\r\n-                return (\r\n-                    <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n-                        {/* <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n-                        <EditIcon fontSize=\"inherit\"  />\r\n-                    </IconButton> */}\r\n-                        <IconButton aria-label=\"delete\" size=\"small\" onClick={() => handleOpenDialog}>\r\n-                            <DeleteIcon fontSize=\"inherit\" />\r\n-                        </IconButton>\r\n-\r\n-                        {/* <GridActionsCellItem\r\n+                return [\r\n+                    // <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                    // <IconButton aria-label=\"edit\" size=\"small\" onClick={handleEditRowsStart(params)}>\r\n+                    //     <EditIcon fontSize=\"inherit\"  />\r\n+                    // </IconButton>\r\n+                    //     <IconButton aria-label=\"delete\" size=\"small\" onClick={() => handleOpenDialog}>\r\n+                    //         <DeleteIcon fontSize=\"inherit\" />\r\n+                    //     </IconButton>\r\n+                    // </Stack>\r\n+                        <GridActionsCellItem\r\n                             icon={<EditIcon />}\r\n                             label=\"Edit\"\r\n                             className=\"textPrimary\"\r\n                             onClick={handleEditClick(id)}\r\n@@ -285,11 +291,11 @@\n                             icon={<DeleteIcon />}\r\n                             label=\"Delete\"\r\n                             onClick={handleDeleteClick(id)}\r\n                             color=\"inherit\"\r\n-                        />, */}\r\n-                    </Stack>\r\n-                )\r\n+                        />,\r\n+\r\n+                ]\r\n             },\r\n         },\r\n     ]\r\n \r\n@@ -301,35 +307,32 @@\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                     <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                         Add record\r\n                     </Button>\r\n-                    <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n+                    {/* <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n                         Save\r\n                     </Button>\r\n                     <Button color=\"primary\" startIcon={<CancelIcon />} onClick={handleCancelClick}>\r\n                         Cancel\r\n-                    </Button>\r\n+                    </Button> */}\r\n                 </Stack>\r\n                 <DataGrid\r\n                     // onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n                     rows={usersClone}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n-                    checkboxSelection\r\n+                    // checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n                     onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // onRowEditCommit={handleRowEditCommit}\r\n-                    onRowEditStop={() => { console.log('stop edit') }}\r\n-                    onRowEditStart={() => { console.log('start edit') }}\r\n-                    // rowModesModel={rowModesModel}\r\n+                    rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n-                    // onRowEditStart={handleRowEditStart}\r\n-                    // onRowEditStop={handleRowEditStop}\r\n+                    onRowEditStart={handleRowEditStart}\r\n+                    onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    onRowDoubleClick={handleDoubleClick}\r\n                     // components={{\r\n                     //     Toolbar: EditToolbar,\r\n                     // }}\r\n                     // componentsProps={{\r\n@@ -344,9 +347,9 @@\n                     usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n-            <Dialog\r\n+            {/* <Dialog\r\n                 open={openDialog}\r\n                 onClose={handleCloseDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n@@ -366,8 +369,8 @@\n                     >\r\n                         No\r\n                     </Button>\r\n                 </DialogActions>\r\n-            </Dialog>\r\n+            </Dialog> */}\r\n         </>\r\n     )\r\n }\r\n"
                },
                {
                    "date": 1659084299089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n \r\n     // console.log('path', router.pathname)\r\n-    const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n+    // const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     // const [isEdit, setIsEdit] = useState(false)\r\n     // const isInEditMode = isEdit\r\n     // console.log('isInEditMode', isInEditMode);\r\n     const [usersClone, setUsersClone] = useState(_.clone(users))\r\n@@ -265,9 +265,9 @@\n                         <GridActionsCellItem\r\n                             icon={<CancelIcon />}\r\n                             label=\"Cancel\"\r\n                             className=\"textPrimary\"\r\n-                            onClick={handleCancelClick(id)}\r\n+                            // onClick={handleCancelClick(id)}\r\n                             color=\"inherit\"\r\n                         />,\r\n                     ]\r\n                 }\r\n"
                },
                {
                    "date": 1659084372528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n \r\n \r\n \r\n     const cols: GridColumns = [\r\n-        { field: 'id', headerName: 'ID', flex: 1, },\r\n+        { field: 'uid', headerName: 'UID', flex: 1, },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n         {\r\n"
                },
                {
                    "date": 1659084569273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n \r\n     const handleAddRow = () => {\r\n         setUsersClone((prevUsersClone) => [{\r\n-            id: Date.now(),\r\n+            uid: Date.now(),\r\n             firstName: '',\r\n             lastName: '',\r\n             email: '',\r\n             password: 'Abc@1234',\r\n@@ -166,9 +166,9 @@\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n         // console.log('updateRow', updatedRow);\r\n-        setUsersClone(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+        setUsersClone(usersClone.map((row) => (row.uid === newRow.uid ? updatedRow : row)));\r\n \r\n         return updatedRow;\r\n     };\r\n \r\n@@ -343,9 +343,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br>\r\n+                    usersClone: {usersClone.map(e => <div key={e.uid}>{JSON.stringify(e)}</div>)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n             {/* <Dialog\r\n"
                },
                {
                    "date": 1659084704052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n \r\n     const handleAddRow = () => {\r\n         setUsersClone((prevUsersClone) => [{\r\n-            uid: Date.now(),\r\n+            id: Date.now(),\r\n             firstName: '',\r\n             lastName: '',\r\n             email: '',\r\n             password: 'Abc@1234',\r\n@@ -166,9 +166,9 @@\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n         // console.log('updateRow', updatedRow);\r\n-        setUsersClone(usersClone.map((row) => (row.uid === newRow.uid ? updatedRow : row)));\r\n+        setUsersClone(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n \r\n         return updatedRow;\r\n     };\r\n \r\n@@ -232,9 +232,9 @@\n \r\n \r\n \r\n     const cols: GridColumns = [\r\n-        { field: 'uid', headerName: 'UID', flex: 1, },\r\n+        { field: 'id', headerName: 'id', flex: 1, },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n         {\r\n@@ -343,9 +343,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {usersClone.map(e => <div key={e.uid}>{JSON.stringify(e)}</div>)} <br></br>\r\n+                    usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br>\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n             {/* <Dialog\r\n"
                },
                {
                    "date": 1659084712345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n \r\n \r\n \r\n     const cols: GridColumns = [\r\n-        { field: 'id', headerName: 'id', flex: 1, },\r\n+        { field: 'id', headerName: 'UID', flex: 1, },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n         {\r\n"
                },
                {
                    "date": 1659084721216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n \r\n \r\n \r\n     const cols: GridColumns = [\r\n-        { field: 'id', headerName: 'UID', flex: 1, },\r\n+        { field: 'id', headerName: 'User ID', flex: 1, },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n         {\r\n"
                },
                {
                    "date": 1659085000265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n             type: 'actions',\r\n             headerName: 'Actions',\r\n             width: 100,\r\n             cellClassName: 'actions',\r\n-            getActions: (id) => {\r\n+            getActions: ({id}) => {\r\n                 // <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                 //     <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n                     //         <SaveIcon fontSize=\"inherit\"  />\r\n                     //     </IconButton> \r\n"
                },
                {
                    "date": 1659085313983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     };\r\n \r\n     const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\r\n         event.defaultMuiPrevented = true;\r\n-      };\r\n+    };\r\n \r\n     const [editRowsModel, setEditRowsModel] = useState({});\r\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n         setEditRowsModel(model);\r\n@@ -164,9 +164,9 @@\n     // //     }\r\n     // // };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow };\r\n+        const updatedRow = { ...newRow, isNew: false };\r\n         // console.log('updateRow', updatedRow);\r\n         setUsersClone(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n \r\n         return updatedRow;\r\n@@ -214,18 +214,30 @@\n     //   }, [])\r\n \r\n     const handleEditClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n-      };\r\n-    \r\n-      const handleSaveClick = (id: GridRowId) => () => {\r\n+    };\r\n+\r\n+    const handleSaveClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n-      };\r\n+    };\r\n+\r\n+    const handleDeleteClick = (id: GridRowId) => () => {\r\n+        setUsersClone(usersClone.filter((row) => row.id !== id));\r\n+    };\r\n     \r\n-      const handleDeleteClick = (id: GridRowId) => () => {\r\n-        setUsersClone(usersClone.filter((row) => row.id !== id));\r\n-      };\r\n+    const handleCancelClick = (id: GridRowId) => () => {\r\n+        setRowModesModel({\r\n+            ...rowModesModel,\r\n+            [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n+        });\r\n \r\n+        const editedRow = usersClone.find((row) => row.id === id);\r\n+        if (editedRow!.isNew) {\r\n+            setUsersClone(usersClone.filter((row) => row.id !== id));\r\n+        }\r\n+    };\r\n+\r\n     if (status === 'false') {\r\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n@@ -242,13 +254,13 @@\n             type: 'actions',\r\n             headerName: 'Actions',\r\n             width: 100,\r\n             cellClassName: 'actions',\r\n-            getActions: ({id}) => {\r\n+            getActions: ({ id }) => {\r\n                 // <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                 //     <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n-                    //         <SaveIcon fontSize=\"inherit\"  />\r\n-                    //     </IconButton> \r\n+                //         <SaveIcon fontSize=\"inherit\"  />\r\n+                //     </IconButton> \r\n                 // <IconButton aria-label=\"cancel\" size=\"small\" onClick={handleCancelClick}>\r\n                 //                 <CancelIcon fontSize=\"inherit\" />\r\n                 //             </IconButton>\r\n                 //         </Stack>\r\n@@ -265,9 +277,9 @@\n                         <GridActionsCellItem\r\n                             icon={<CancelIcon />}\r\n                             label=\"Cancel\"\r\n                             className=\"textPrimary\"\r\n-                            // onClick={handleCancelClick(id)}\r\n+                            onClick={handleCancelClick(id)}\r\n                             color=\"inherit\"\r\n                         />,\r\n                     ]\r\n                 }\r\n@@ -279,21 +291,21 @@\n                     //     <IconButton aria-label=\"delete\" size=\"small\" onClick={() => handleOpenDialog}>\r\n                     //         <DeleteIcon fontSize=\"inherit\" />\r\n                     //     </IconButton>\r\n                     // </Stack>\r\n-                        <GridActionsCellItem\r\n-                            icon={<EditIcon />}\r\n-                            label=\"Edit\"\r\n-                            className=\"textPrimary\"\r\n-                            onClick={handleEditClick(id)}\r\n-                            color=\"inherit\"\r\n-                        />,\r\n-                        <GridActionsCellItem\r\n-                            icon={<DeleteIcon />}\r\n-                            label=\"Delete\"\r\n-                            onClick={handleDeleteClick(id)}\r\n-                            color=\"inherit\"\r\n-                        />,\r\n+                    <GridActionsCellItem\r\n+                        icon={<EditIcon />}\r\n+                        label=\"Edit\"\r\n+                        className=\"textPrimary\"\r\n+                        onClick={handleEditClick(id)}\r\n+                        color=\"inherit\"\r\n+                    />,\r\n+                    <GridActionsCellItem\r\n+                        icon={<DeleteIcon />}\r\n+                        label=\"Delete\"\r\n+                        onClick={handleDeleteClick(id)}\r\n+                        color=\"inherit\"\r\n+                    />,\r\n \r\n                 ]\r\n             },\r\n         },\r\n"
                },
                {
                    "date": 1659085519707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,15 +70,21 @@\n \r\n     const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n \r\n     const handleAddRow = () => {\r\n+        const newId = Date.now()\r\n         setUsersClone((prevUsersClone) => [{\r\n-            id: Date.now(),\r\n+            id: newId,\r\n             firstName: '',\r\n             lastName: '',\r\n             email: '',\r\n             password: 'Abc@1234',\r\n+            isNew: true,\r\n         }, ...prevUsersClone]);\r\n+        setRowModesModel((oldModel) => ({\r\n+            ...oldModel,\r\n+            [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n+          }));\r\n     }\r\n \r\n     // const handleEditRowsStop = (params) => () => {\r\n     //     console.log('stop edit');\r\n"
                },
                {
                    "date": 1659085840637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n-import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowsProp, GridValueGetterParams } from '@mui/x-data-grid';\r\n+import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n import Layout from '../../layout/layout'\r\n import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n@@ -49,14 +49,14 @@\n     // const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     // const [isEdit, setIsEdit] = useState(false)\r\n     // const isInEditMode = isEdit\r\n     // console.log('isInEditMode', isInEditMode);\r\n-    const [usersClone, setUsersClone] = useState(_.clone(users))\r\n+    // const [usersClone, setUsersClone] = useState(_.clone(users))\r\n \r\n-    console.log('clone', usersClone);\r\n+    console.log('clone', users)\r\n \r\n     // const [openDialog, setOpenDialog] = useState(false)\r\n-    const handleRowEditStart = (params, event) => {\r\n+    const handleRowEditStart = (params: GridRowParams, event: MuiEvent<React.SyntheticEvent>) => {\r\n         event.defaultMuiPrevented = true;\r\n     };\r\n \r\n     const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\r\n@@ -71,9 +71,9 @@\n     const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n \r\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n-        setUsersClone((prevUsersClone) => [{\r\n+        setUsers((prevUsersClone) => [{\r\n             id: newId,\r\n             firstName: '',\r\n             lastName: '',\r\n             email: '',\r\n@@ -172,9 +172,9 @@\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow, isNew: false };\r\n         // console.log('updateRow', updatedRow);\r\n-        setUsersClone(usersClone.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+        setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n \r\n         return updatedRow;\r\n     };\r\n \r\n@@ -227,20 +227,20 @@\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n     };\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n-        setUsersClone(usersClone.filter((row) => row.id !== id));\r\n+        setUsers(users.filter((row) => row.id !== id));\r\n     };\r\n     \r\n     const handleCancelClick = (id: GridRowId) => () => {\r\n         setRowModesModel({\r\n             ...rowModesModel,\r\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n         });\r\n \r\n-        const editedRow = usersClone.find((row) => row.id === id);\r\n+        const editedRow = users.find((row) => row.id === id);\r\n         if (editedRow!.isNew) {\r\n-            setUsersClone(usersClone.filter((row) => row.id !== id));\r\n+            setUsers(users.filter((row) => row.id !== id));\r\n         }\r\n     };\r\n \r\n     if (status === 'false') {\r\n@@ -335,9 +335,9 @@\n                 </Stack>\r\n                 <DataGrid\r\n                     // onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n-                    rows={usersClone}\r\n+                    rows={users}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     // checkboxSelection\r\n@@ -361,9 +361,9 @@\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n-                    usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br>\r\n+                    {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n             {/* <Dialog\r\n"
                },
                {
                    "date": 1659085867232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     // const isInEditMode = isEdit\r\n     // console.log('isInEditMode', isInEditMode);\r\n     // const [usersClone, setUsersClone] = useState(_.clone(users))\r\n \r\n-    console.log('clone', users)\r\n+    // console.log('clone', users)\r\n \r\n     // const [openDialog, setOpenDialog] = useState(false)\r\n     const handleRowEditStart = (params: GridRowParams, event: MuiEvent<React.SyntheticEvent>) => {\r\n         event.defaultMuiPrevented = true;\r\n"
                },
                {
                    "date": 1659085968729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,39 +54,9 @@\n \r\n     // console.log('clone', users)\r\n \r\n     // const [openDialog, setOpenDialog] = useState(false)\r\n-    const handleRowEditStart = (params: GridRowParams, event: MuiEvent<React.SyntheticEvent>) => {\r\n-        event.defaultMuiPrevented = true;\r\n-    };\r\n \r\n-    const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\r\n-        event.defaultMuiPrevented = true;\r\n-    };\r\n-\r\n-    const [editRowsModel, setEditRowsModel] = useState({});\r\n-    const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n-        setEditRowsModel(model);\r\n-    }, [])\r\n-\r\n-    const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n-\r\n-    const handleAddRow = () => {\r\n-        const newId = Date.now()\r\n-        setUsers((prevUsersClone) => [{\r\n-            id: newId,\r\n-            firstName: '',\r\n-            lastName: '',\r\n-            email: '',\r\n-            password: 'Abc@1234',\r\n-            isNew: true,\r\n-        }, ...prevUsersClone]);\r\n-        setRowModesModel((oldModel) => ({\r\n-            ...oldModel,\r\n-            [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n-          }));\r\n-    }\r\n-\r\n     // const handleEditRowsStop = (params) => () => {\r\n     //     console.log('stop edit');\r\n \r\n     //     usersClone[params.id].isEdit = false;\r\n@@ -169,16 +139,8 @@\n     // //         setUsers(usersClone.filter((row) => row.id !== id));\r\n     // //     }\r\n     // // };\r\n \r\n-    const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow, isNew: false };\r\n-        // console.log('updateRow', updatedRow);\r\n-        setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n-\r\n-        return updatedRow;\r\n-    };\r\n-\r\n     // const handleOpenDialog = () => {\r\n     //     setOpenDialog(true)\r\n     // }\r\n \r\n@@ -218,8 +180,39 @@\n     //     }\r\n     //     fetchData()\r\n     //   }, [])\r\n \r\n+    const handleRowEditStart = (params: GridRowParams, event: MuiEvent<React.SyntheticEvent>) => {\r\n+        event.defaultMuiPrevented = true;\r\n+    };\r\n+\r\n+    const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\r\n+        event.defaultMuiPrevented = true;\r\n+    };\r\n+\r\n+    const [editRowsModel, setEditRowsModel] = useState({});\r\n+    const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n+        setEditRowsModel(model);\r\n+    }, [])\r\n+\r\n+    const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n+\r\n+    const handleAddRow = () => {\r\n+        const newId = Date.now()\r\n+        setUsers((prevUsersClone) => [{\r\n+            id: newId,\r\n+            firstName: '',\r\n+            lastName: '',\r\n+            email: '',\r\n+            password: 'Abc@1234',\r\n+            isNew: true,\r\n+        }, ...prevUsersClone]);\r\n+        setRowModesModel((oldModel) => ({\r\n+            ...oldModel,\r\n+            [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n+          }));\r\n+    }\r\n+\r\n     const handleEditClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n     };\r\n \r\n@@ -247,9 +240,15 @@\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n+    const processRowUpdate = (newRow) => {\r\n+        const updatedRow = { ...newRow, isNew: false };\r\n+        // console.log('updateRow', updatedRow);\r\n+        setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n \r\n+        return updatedRow;\r\n+    };\r\n \r\n     const cols: GridColumns = [\r\n         { field: 'id', headerName: 'User ID', flex: 1, },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n"
                },
                {
                    "date": 1659086701213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -359,9 +359,8 @@\n                     experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n-                    editRowsModel: {JSON.stringify(editRowsModel)} <br></br>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n"
                },
                {
                    "date": 1659087244900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,9 +320,9 @@\n         <>\r\n             <Box sx={{\r\n                 height: 405, width: '100%'\r\n             }}>\r\n-                <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n+                <Stack direction=\"row\" alignItems=\"center\" spacing={1} sx={{right: 0}}>\r\n                     <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                         Add record\r\n                     </Button>\r\n                     {/* <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n"
                },
                {
                    "date": 1659087428184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,9 +320,9 @@\n         <>\r\n             <Box sx={{\r\n                 height: 405, width: '100%'\r\n             }}>\r\n-                <Stack direction=\"row\" alignItems=\"center\" spacing={1} sx={{right: 0}}>\r\n+                <Stack direction=\"row\" alignItems=\"center\" spacing={1} justifyContent=\"end\">\r\n                     <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                         Add record\r\n                     </Button>\r\n                     {/* <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n"
                },
                {
                    "date": 1659087456158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,9 +322,9 @@\n                 height: 405, width: '100%'\r\n             }}>\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1} justifyContent=\"end\">\r\n                     <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n-                        Add record\r\n+                        Add User\r\n                     </Button>\r\n                     {/* <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n                         Save\r\n                     </Button>\r\n"
                },
                {
                    "date": 1659087468612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,9 +322,9 @@\n                 height: 405, width: '100%'\r\n             }}>\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1} justifyContent=\"end\">\r\n                     <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n-                        Add User\r\n+                        New User\r\n                     </Button>\r\n                     {/* <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n                         Save\r\n                     </Button>\r\n"
                },
                {
                    "date": 1659090382431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,13 @@\n // email: string,\r\n // password: string\r\n // }\r\n \r\n+function validateEmail(email) {\r\n+    const regex =\r\n+      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n+    return regex.test(String(email).toLowerCase());\r\n+}\r\n \r\n export default function userPage() {\r\n     // useEffect(() => {\r\n     //     document.title = 'User'\r\n@@ -189,8 +194,9 @@\n         event.defaultMuiPrevented = true;\r\n     };\r\n \r\n     const [editRowsModel, setEditRowsModel] = useState({});\r\n+    \r\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n         setEditRowsModel(model);\r\n     }, [])\r\n \r\n"
                },
                {
                    "date": 1659090439884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,13 @@\n \r\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n \r\n+    if (status === 'false') {\r\n+        // router.push('/user/sign-in')\r\n+        console.log('not sign in')\r\n+    }\r\n+    \r\n     // console.log('path', router.pathname)\r\n     // const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     // const [isEdit, setIsEdit] = useState(false)\r\n     // const isInEditMode = isEdit\r\n@@ -194,9 +199,9 @@\n         event.defaultMuiPrevented = true;\r\n     };\r\n \r\n     const [editRowsModel, setEditRowsModel] = useState({});\r\n-    \r\n+\r\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n         setEditRowsModel(model);\r\n     }, [])\r\n \r\n@@ -241,13 +246,8 @@\n             setUsers(users.filter((row) => row.id !== id));\r\n         }\r\n     };\r\n \r\n-    if (status === 'false') {\r\n-        // router.push('/user/sign-in')\r\n-        console.log('not sign in')\r\n-    }\r\n-\r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow, isNew: false };\r\n         // console.log('updateRow', updatedRow);\r\n         setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n"
                },
                {
                    "date": 1659090862708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // }\r\n \r\n function validateEmail(email) {\r\n     const regex =\r\n-      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n+        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n     return regex.test(String(email).toLowerCase());\r\n }\r\n \r\n export default function userPage() {\r\n@@ -53,9 +53,9 @@\n     if (status === 'false') {\r\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n-    \r\n+\r\n     // console.log('path', router.pathname)\r\n     // const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     // const [isEdit, setIsEdit] = useState(false)\r\n     // const isInEditMode = isEdit\r\n@@ -201,8 +201,15 @@\n \r\n     const [editRowsModel, setEditRowsModel] = useState({});\r\n \r\n     const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n+        const updatedModel = { ...model };\r\n+        Object.keys(updatedModel).forEach((id) => {\r\n+            if (updatedModel[id].email) {\r\n+                const isValid = validateEmail(updatedModel[id].email.value);\r\n+                updatedModel[id].email = { ...updatedModel[id].email, error: !isValid };\r\n+            }\r\n+        });\r\n         setEditRowsModel(model);\r\n     }, [])\r\n \r\n     const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n@@ -219,9 +226,9 @@\n         }, ...prevUsersClone]);\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n-          }));\r\n+        }));\r\n     }\r\n \r\n     const handleEditClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n@@ -233,9 +240,9 @@\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n         setUsers(users.filter((row) => row.id !== id));\r\n     };\r\n-    \r\n+\r\n     const handleCancelClick = (id: GridRowId) => () => {\r\n         setRowModesModel({\r\n             ...rowModesModel,\r\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n"
                },
                {
                    "date": 1659090929546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,8 +205,11 @@\n         const updatedModel = { ...model };\r\n         Object.keys(updatedModel).forEach((id) => {\r\n             if (updatedModel[id].email) {\r\n                 const isValid = validateEmail(updatedModel[id].email.value);\r\n+                \r\n+                console.log('isValid', isValid);\r\n+                \r\n                 updatedModel[id].email = { ...updatedModel[id].email, error: !isValid };\r\n             }\r\n         });\r\n         setEditRowsModel(model);\r\n"
                },
                {
                    "date": 1659091262592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,11 +205,11 @@\n         const updatedModel = { ...model };\r\n         Object.keys(updatedModel).forEach((id) => {\r\n             if (updatedModel[id].email) {\r\n                 const isValid = validateEmail(updatedModel[id].email.value);\r\n-                \r\n+\r\n                 console.log('isValid', isValid);\r\n-                \r\n+\r\n                 updatedModel[id].email = { ...updatedModel[id].email, error: !isValid };\r\n             }\r\n         });\r\n         setEditRowsModel(model);\r\n@@ -268,10 +268,16 @@\n     const cols: GridColumns = [\r\n         { field: 'id', headerName: 'User ID', flex: 1, },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n-        { field: 'email', headerName: 'Email', flex: 1, editable: true },\r\n         {\r\n+            field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n+            preProcessEditCellProps(params) {\r\n+                const isValid = params.props.value.length < 0;\r\n+                return { ...params.props, error: isValid };\r\n+            }\r\n+        },\r\n+        {\r\n             field: 'actions',\r\n             type: 'actions',\r\n             headerName: 'Actions',\r\n             width: 100,\r\n"
                },
                {
                    "date": 1659091321736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,8 +272,10 @@\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params) {\r\n                 const isValid = params.props.value.length < 0;\r\n+                console.log('isValid', isValid);\r\n+                \r\n                 return { ...params.props, error: isValid };\r\n             }\r\n         },\r\n         {\r\n"
                },
                {
                    "date": 1659091412292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params) {\r\n-                const isValid = params.props.value.length < 0;\r\n+                const isValid = params.props.value.length > 0;\r\n                 console.log('isValid', isValid);\r\n                 \r\n                 return { ...params.props, error: isValid };\r\n             }\r\n"
                },
                {
                    "date": 1659091484139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,10 @@\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params) {\r\n-                const isValid = params.props.value.length > 0;\r\n+                // const isValid = params.props.value.length > 0;\r\n+                const isValid = validateEmail(params.props.value);\r\n                 console.log('isValid', isValid);\r\n                 \r\n                 return { ...params.props, error: isValid };\r\n             }\r\n"
                },
                {
                    "date": 1659092088086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n         return updatedRow;\r\n     };\r\n \r\n     const cols: GridColumns = [\r\n-        { field: 'id', headerName: 'User ID', flex: 1, },\r\n+        { field: 'id', headerName: 'User ID', flex: 1, cellClassName: 'super-app-theme--cell' },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n"
                },
                {
                    "date": 1659316196682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,21 +8,9 @@\n import EditIcon from '@mui/icons-material/Edit';\r\n import DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\n import SaveIcon from '@mui/icons-material/Save';\r\n import CancelIcon from '@mui/icons-material/Close';\r\n-// import {\r\n-//     GridRowsProp,\r\n-//     GridRowModesModel,\r\n-//     GridRowModes,\r\n-//     GridColumns,\r\n-//     GridRowParams,\r\n-//     MuiEvent,\r\n-//     GridToolbarContainer,\r\n-//     GridActionsCellItem,\r\n-//     GridEventListener,\r\n-//     GridRowId,\r\n-//     GridRowModel,\r\n-// } from '@mui/x-data-grid-pro';\r\n+\r\n import { useAppContext } from '../../context/AppContext';\r\n import { useRouter } from 'next/router';\r\n import { users } from '../../.history/context/AppContext_20220725084624';\r\n import handler from '../../.history/pages/api/index_20220715154918';\r\n"
                },
                {
                    "date": 1659317548467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n-import Layout from '../../layout/layout'\r\n import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n@@ -11,12 +10,9 @@\n import CancelIcon from '@mui/icons-material/Close';\r\n \r\n import { useAppContext } from '../../context/AppContext';\r\n import { useRouter } from 'next/router';\r\n-import { users } from '../../.history/context/AppContext_20220725084624';\r\n-import handler from '../../.history/pages/api/index_20220715154918';\r\n \r\n-\r\n // interface userList {\r\n //     is: number,\r\n // firstName: string,\r\n // lastName: string,\r\n@@ -42,8 +38,10 @@\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n+    const [openDialog, setOpenDialog] = useState(false)\r\n+\r\n     // console.log('path', router.pathname)\r\n     // const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     // const [isEdit, setIsEdit] = useState(false)\r\n     // const isInEditMode = isEdit\r\n@@ -141,12 +139,12 @@\n     // const handleOpenDialog = () => {\r\n     //     setOpenDialog(true)\r\n     // }\r\n \r\n-    // const handleCloseDialog = () => {\r\n-    //     setOpenDialog(false)\r\n-    //     console.log('openDialog', openDialog);\r\n-    // }\r\n+    const handleCloseDialog = () => {\r\n+        setOpenDialog(false)\r\n+        console.log('openDialog', openDialog);\r\n+    }\r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n     //     console.log('here');\r\n \r\n     //     const array = users.map(r => {\r\n@@ -252,8 +250,13 @@\n \r\n         return updatedRow;\r\n     };\r\n \r\n+    const handleDeleteClickTest = (e) => {\r\n+        console.log('e', e);\r\n+        \r\n+    }\r\n+\r\n     const cols: GridColumns = [\r\n         { field: 'id', headerName: 'User ID', flex: 1, cellClassName: 'super-app-theme--cell' },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n@@ -262,9 +265,9 @@\n             preProcessEditCellProps(params) {\r\n                 // const isValid = params.props.value.length > 0;\r\n                 const isValid = validateEmail(params.props.value);\r\n                 console.log('isValid', isValid);\r\n-                \r\n+\r\n                 return { ...params.props, error: isValid };\r\n             }\r\n         },\r\n         {\r\n@@ -376,9 +379,9 @@\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n-            {/* <Dialog\r\n+            <Dialog\r\n                 open={openDialog}\r\n                 onClose={handleCloseDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n@@ -388,9 +391,9 @@\n                 <DialogActions>\r\n                     <GridActionsCellItem\r\n                         label=\"Save\"\r\n                         showInMenu={true}\r\n-                        onClick={handleDeleteClick}\r\n+                        onClick={handleDeleteClickTest}\r\n                     />\r\n                     <Button\r\n                         variant=\"outlined\"\r\n                         color=\"error\"\r\n@@ -398,8 +401,8 @@\n                     >\r\n                         No\r\n                     </Button>\r\n                 </DialogActions>\r\n-            </Dialog> */}\r\n+            </Dialog>\r\n         </>\r\n     )\r\n }\r\n"
                },
                {
                    "date": 1659317576309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -380,9 +380,9 @@\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n             <Dialog\r\n-                open={openDialog}\r\n+                open={true}\r\n                 onClose={handleCloseDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n                 <DialogContent>\r\n"
                },
                {
                    "date": 1659317848965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -389,9 +389,9 @@\n                     <DialogContentText>Are you sure?</DialogContentText>\r\n                 </DialogContent>\r\n                 <DialogActions>\r\n                     <GridActionsCellItem\r\n-                        label=\"Save\"\r\n+                        label=\"Yes\"\r\n                         showInMenu={true}\r\n                         onClick={handleDeleteClickTest}\r\n                     />\r\n                     <Button\r\n"
                },
                {
                    "date": 1659318817617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n-import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n+import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n@@ -364,14 +364,16 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     onRowEditStart={handleRowEditStart}\r\n                     onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    // components={{\r\n-                    //     Toolbar: EditToolbar,\r\n-                    // }}\r\n-                    // componentsProps={{\r\n-                    //     toolbar: { setUsers, setRowModesModel },\r\n-                    // }}\r\n+                    components={{ Toolbar: () => {\r\n+                        return (<GridToolbarContainer sx={{justifyContent: 'flex-end'}}>\r\n+                          <GridToolbarExport />\r\n+                        </GridToolbarContainer>)} \r\n+                      }}\r\n+                    componentsProps={{\r\n+                        toolbar: { setUsers, setRowModesModel },\r\n+                    }}\r\n \r\n                     experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                 />\r\n"
                },
                {
                    "date": 1659319143727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -382,10 +382,10 @@\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n             <Dialog\r\n-                open={true}\r\n-                onClose={handleCloseDialog}\r\n+                open={openDialog}\r\n+                // onClose={openDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n                 <DialogContent>\r\n                     <DialogContentText>Are you sure?</DialogContentText>\r\n"
                },
                {
                    "date": 1659319163257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -382,9 +382,9 @@\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n             <Dialog\r\n-                open={openDialog}\r\n+                open={true}\r\n                 // onClose={openDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n                 <DialogContent>\r\n"
                },
                {
                    "date": 1659319202448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -382,9 +382,9 @@\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n             <Dialog\r\n-                open={true}\r\n+                open={!openDialog}\r\n                 // onClose={openDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n                 <DialogContent>\r\n"
                },
                {
                    "date": 1659319373332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -382,10 +382,10 @@\n                     users: {JSON.stringify(users)}\r\n                 </div>\r\n             </Box>\r\n             <Dialog\r\n-                open={!openDialog}\r\n-                // onClose={openDialog}\r\n+                open={openDialog}\r\n+                onClose={handleCloseDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n                 <DialogContent>\r\n                     <DialogContentText>Are you sure?</DialogContentText>\r\n"
                },
                {
                    "date": 1659319392264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n-    const [openDialog, setOpenDialog] = useState(false)\r\n+    const [openDialog, setOpenDialog] = useState(true)\r\n \r\n     // console.log('path', router.pathname)\r\n     // const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     // const [isEdit, setIsEdit] = useState(false)\r\n"
                },
                {
                    "date": 1659319415745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n-    const [openDialog, setOpenDialog] = useState(true)\r\n+    const [openDialog, setOpenDialog] = useState(false)\r\n \r\n     // console.log('path', router.pathname)\r\n     // const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     // const [isEdit, setIsEdit] = useState(false)\r\n"
                },
                {
                    "date": 1659319527132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n-import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n+import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n@@ -366,9 +366,10 @@\n                     onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n                     components={{ Toolbar: () => {\r\n                         return (<GridToolbarContainer sx={{justifyContent: 'flex-end'}}>\r\n-                          <GridToolbarExport />\r\n+                            <GridToolbarColumnsButton/>\r\n+                            <GridToolbarExport />\r\n                         </GridToolbarContainer>)} \r\n                       }}\r\n                     componentsProps={{\r\n                         toolbar: { setUsers, setRowModesModel },\r\n"
                },
                {
                    "date": 1659319610417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,11 +337,11 @@\n             <Box sx={{\r\n                 height: 405, width: '100%'\r\n             }}>\r\n                 <Stack direction=\"row\" alignItems=\"center\" spacing={1} justifyContent=\"end\">\r\n-                    <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                    {/* <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                         New User\r\n-                    </Button>\r\n+                    </Button> */}\r\n                     {/* <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n                         Save\r\n                     </Button>\r\n                     <Button color=\"primary\" startIcon={<CancelIcon />} onClick={handleCancelClick}>\r\n@@ -367,8 +367,11 @@\n                     processRowUpdate={processRowUpdate}\r\n                     components={{ Toolbar: () => {\r\n                         return (<GridToolbarContainer sx={{justifyContent: 'flex-end'}}>\r\n                             <GridToolbarColumnsButton/>\r\n+                            <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                New User\r\n+                            </Button>\r\n                             <GridToolbarExport />\r\n                         </GridToolbarContainer>)} \r\n                       }}\r\n                     componentsProps={{\r\n"
                },
                {
                    "date": 1659319716472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,9 +252,9 @@\n     };\r\n \r\n     const handleDeleteClickTest = (e) => {\r\n         console.log('e', e);\r\n-        \r\n+\r\n     }\r\n \r\n     const cols: GridColumns = [\r\n         { field: 'id', headerName: 'User ID', flex: 1, cellClassName: 'super-app-theme--cell' },\r\n@@ -364,17 +364,25 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     onRowEditStart={handleRowEditStart}\r\n                     onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    components={{ Toolbar: () => {\r\n-                        return (<GridToolbarContainer sx={{justifyContent: 'flex-end'}}>\r\n-                            <GridToolbarColumnsButton/>\r\n-                            <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n-                                New User\r\n-                            </Button>\r\n-                            <GridToolbarExport />\r\n-                        </GridToolbarContainer>)} \r\n-                      }}\r\n+                    components={{\r\n+                        Toolbar: () => {\r\n+                            return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n+                                <GridToolbarColumnsButton />\r\n+                                {/* <GridActionsCellItem color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                    New User\r\n+                                </GridActionsCellItem> */}\r\n+                                <GridActionsCellItem\r\n+                                    icon={<AddIcon />}\r\n+                                    label=\"New User\"\r\n+                                    onClick={handleAddRow}\r\n+                                    color=\"inherit\"\r\n+                                />\r\n+                                <GridToolbarExport />\r\n+                            </GridToolbarContainer>)\r\n+                        }\r\n+                    }}\r\n                     componentsProps={{\r\n                         toolbar: { setUsers, setRowModesModel },\r\n                     }}\r\n \r\n"
                },
                {
                    "date": 1659319772859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,8 +376,9 @@\n                                     icon={<AddIcon />}\r\n                                     label=\"New User\"\r\n                                     onClick={handleAddRow}\r\n                                     color=\"inherit\"\r\n+                                    showInMenu={true}\r\n                                 />\r\n                                 <GridToolbarExport />\r\n                             </GridToolbarContainer>)\r\n                         }\r\n"
                },
                {
                    "date": 1659319810830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,18 +368,18 @@\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 <GridToolbarColumnsButton />\r\n-                                {/* <GridActionsCellItem color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                <GridActionsCellItem color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                                     New User\r\n-                                </GridActionsCellItem> */}\r\n-                                <GridActionsCellItem\r\n+                                </GridActionsCellItem>\r\n+                                {/* <GridActionsCellItem\r\n                                     icon={<AddIcon />}\r\n                                     label=\"New User\"\r\n                                     onClick={handleAddRow}\r\n                                     color=\"inherit\"\r\n                                     showInMenu={true}\r\n-                                />\r\n+                                /> */}\r\n                                 <GridToolbarExport />\r\n                             </GridToolbarContainer>)\r\n                         }\r\n                     }}\r\n"
                },
                {
                    "date": 1659319833951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,11 +368,11 @@\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 <GridToolbarColumnsButton />\r\n-                                <GridActionsCellItem color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                                     New User\r\n-                                </GridActionsCellItem>\r\n+                                </Button>\r\n                                 {/* <GridActionsCellItem\r\n                                     icon={<AddIcon />}\r\n                                     label=\"New User\"\r\n                                     onClick={handleAddRow}\r\n"
                },
                {
                    "date": 1659320240577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,9 @@\n                     processRowUpdate={processRowUpdate}\r\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n-                                <GridToolbarColumnsButton />\r\n+                                {/* <GridToolbarColumnsButton /> */}\r\n                                 <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                                     New User\r\n                                 </Button>\r\n                                 {/* <GridActionsCellItem\r\n"
                },
                {
                    "date": 1659320300145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,9 +378,11 @@\n                                     onClick={handleAddRow}\r\n                                     color=\"inherit\"\r\n                                     showInMenu={true}\r\n                                 /> */}\r\n-                                <GridToolbarExport />\r\n+                                <Button>\r\n+                                    <GridToolbarExport />\r\n+                                </Button>\r\n                             </GridToolbarContainer>)\r\n                         }\r\n                     }}\r\n                     componentsProps={{\r\n"
                },
                {
                    "date": 1659320347895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,11 +378,9 @@\n                                     onClick={handleAddRow}\r\n                                     color=\"inherit\"\r\n                                     showInMenu={true}\r\n                                 /> */}\r\n-                                <Button>\r\n-                                    <GridToolbarExport />\r\n-                                </Button>\r\n+                                <GridToolbarExport />\r\n                             </GridToolbarContainer>)\r\n                         }\r\n                     }}\r\n                     componentsProps={{\r\n"
                },
                {
                    "date": 1659320659739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,9 +378,9 @@\n                                     onClick={handleAddRow}\r\n                                     color=\"inherit\"\r\n                                     showInMenu={true}\r\n                                 /> */}\r\n-                                <GridToolbarExport />\r\n+                                {/* <GridToolbarExport /> */}\r\n                             </GridToolbarContainer>)\r\n                         }\r\n                     }}\r\n                     componentsProps={{\r\n"
                },
                {
                    "date": 1659320793447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,10 @@\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n     };\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n-        setUsers(users.filter((row) => row.id !== id));\r\n+        setOpenDialog(true);\r\n+        // setUsers(users.filter((row) => row.id !== id));\r\n     };\r\n \r\n     const handleCancelClick = (id: GridRowId) => () => {\r\n         setRowModesModel({\r\n@@ -252,9 +253,8 @@\n     };\r\n \r\n     const handleDeleteClickTest = (e) => {\r\n         console.log('e', e);\r\n-\r\n     }\r\n \r\n     const cols: GridColumns = [\r\n         { field: 'id', headerName: 'User ID', flex: 1, cellClassName: 'super-app-theme--cell' },\r\n"
                },
                {
                    "date": 1659322429690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n         console.log('not sign in')\r\n     }\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n+    const [selectedId, setSelectedId] = useState([])\r\n \r\n     // console.log('path', router.pathname)\r\n     // const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     // const [isEdit, setIsEdit] = useState(false)\r\n@@ -139,12 +140,13 @@\n     // const handleOpenDialog = () => {\r\n     //     setOpenDialog(true)\r\n     // }\r\n \r\n-    const handleCloseDialog = () => {\r\n-        setOpenDialog(false)\r\n-        console.log('openDialog', openDialog);\r\n-    }\r\n+    // const handleCloseDialog = () => {\r\n+    //     setOpenDialog(false)\r\n+    //     console.log('openDialog', openDialog);\r\n+    //     setSelectedId(_.pull(prevState,))\r\n+    // }\r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n     //     console.log('here');\r\n \r\n     //     const array = users.map(r => {\r\n@@ -229,10 +231,22 @@\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n         setOpenDialog(true);\r\n         // setUsers(users.filter((row) => row.id !== id));\r\n+        setSelectedId(prevState => [...prevState, id])\r\n     };\r\n \r\n+    const handleConfirmDelete = () => {\r\n+        setUsers(users.filter((row) => row.id !== selectedId));\r\n+        setSelectedId([])\r\n+    };\r\n+\r\n+    const handleCloseDialog = () => {\r\n+        setOpenDialog(false)\r\n+        // console.log('openDialog', openDialog);\r\n+        setSelectedId([])\r\n+    }\r\n+\r\n     const handleCancelClick = (id: GridRowId) => () => {\r\n         setRowModesModel({\r\n             ...rowModesModel,\r\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n@@ -403,15 +417,17 @@\n                 <DialogContent>\r\n                     <DialogContentText>Are you sure?</DialogContentText>\r\n                 </DialogContent>\r\n                 <DialogActions>\r\n-                    <GridActionsCellItem\r\n-                        label=\"Yes\"\r\n-                        showInMenu={true}\r\n-                        onClick={handleDeleteClickTest}\r\n-                    />\r\n                     <Button\r\n                         variant=\"outlined\"\r\n+                        color=\"primary\"\r\n+                        onClick={handleConfirmDelete}\r\n+                    >\r\n+                        Yes\r\n+                    </Button>\r\n+                    <Button\r\n+                        variant=\"outlined\"\r\n                         color=\"error\"\r\n                         onClick={handleCloseDialog}\r\n                     >\r\n                         No\r\n"
                },
                {
                    "date": 1659322500044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,9 @@\n         setSelectedId(prevState => [...prevState, id])\r\n     };\r\n \r\n     const handleConfirmDelete = () => {\r\n-        setUsers(users.filter((row) => row.id !== selectedId));\r\n+        setUsers(users.filter((row) => row.id !== selectedId[0]));\r\n         setSelectedId([])\r\n     };\r\n \r\n     const handleCloseDialog = () => {\r\n"
                },
                {
                    "date": 1659322541664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,9 +236,9 @@\n     };\r\n \r\n     const handleConfirmDelete = () => {\r\n         setUsers(users.filter((row) => row.id !== selectedId[0]));\r\n-        setSelectedId([])\r\n+        handleCloseDialog()\r\n     };\r\n \r\n     const handleCloseDialog = () => {\r\n         setOpenDialog(false)\r\n"
                },
                {
                    "date": 1659322610714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -410,9 +410,9 @@\n                 </div>\r\n             </Box>\r\n             <Dialog\r\n                 open={openDialog}\r\n-                onClose={handleCloseDialog}\r\n+                // onClose={handleCloseDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n                 <DialogContent>\r\n                     <DialogContentText>Are you sure?</DialogContentText>\r\n"
                },
                {
                    "date": 1659323214457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,8 +378,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     onRowEditStart={handleRowEditStart}\r\n                     onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n+                    error={true}\r\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n"
                },
                {
                    "date": 1659323223571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,9 +378,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     onRowEditStart={handleRowEditStart}\r\n                     onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    error={true}\r\n+                    error={'true'}\r\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n"
                },
                {
                    "date": 1659323820301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n-import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n+import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridPreProcessEditCellProps, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n@@ -275,9 +275,9 @@\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n-            preProcessEditCellProps(params) {\r\n+            preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n                 const isValid = validateEmail(params.props.value);\r\n                 console.log('isValid', isValid);\r\n \r\n"
                },
                {
                    "date": 1659323837014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,9 +378,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     onRowEditStart={handleRowEditStart}\r\n                     onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    error={'true'}\r\n+                    \r\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n"
                },
                {
                    "date": 1659324131541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n-                const isValid = validateEmail(params.props.value);\r\n+                const isValid = !validateEmail(params.props.value);\r\n                 console.log('isValid', isValid);\r\n \r\n                 return { ...params.props, error: isValid };\r\n             }\r\n"
                },
                {
                    "date": 1659324577823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n                             icon={<CancelIcon />}\r\n                             label=\"Cancel\"\r\n                             className=\"textPrimary\"\r\n                             onClick={handleCancelClick(id)}\r\n-                            color=\"inherit\"\r\n+                            color=\"warning\"\r\n                         />,\r\n                     ]\r\n                 }\r\n                 return [\r\n"
                },
                {
                    "date": 1659324613424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,15 +331,15 @@\n                         icon={<EditIcon />}\r\n                         label=\"Edit\"\r\n                         className=\"textPrimary\"\r\n                         onClick={handleEditClick(id)}\r\n-                        color=\"inherit\"\r\n+                        color=\"primary\"\r\n                     />,\r\n                     <GridActionsCellItem\r\n                         icon={<DeleteIcon />}\r\n                         label=\"Delete\"\r\n                         onClick={handleDeleteClick(id)}\r\n-                        color=\"inherit\"\r\n+                        color=\"warning\"\r\n                     />,\r\n \r\n                 ]\r\n             },\r\n"
                },
                {
                    "date": 1659324629356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,8 +307,9 @@\n                         <GridActionsCellItem\r\n                             icon={<SaveIcon />}\r\n                             label=\"Save\"\r\n                             onClick={handleSaveClick(id)}\r\n+                            color=\"warning\"\r\n                         />,\r\n                         <GridActionsCellItem\r\n                             icon={<CancelIcon />}\r\n                             label=\"Cancel\"\r\n"
                },
                {
                    "date": 1659324644880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,9 +307,9 @@\n                         <GridActionsCellItem\r\n                             icon={<SaveIcon />}\r\n                             label=\"Save\"\r\n                             onClick={handleSaveClick(id)}\r\n-                            color=\"warning\"\r\n+                            color=\"success\"\r\n                         />,\r\n                         <GridActionsCellItem\r\n                             icon={<CancelIcon />}\r\n                             label=\"Cancel\"\r\n"
                },
                {
                    "date": 1659324692955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -338,9 +338,9 @@\n                     <GridActionsCellItem\r\n                         icon={<DeleteIcon />}\r\n                         label=\"Delete\"\r\n                         onClick={handleDeleteClick(id)}\r\n-                        color=\"warning\"\r\n+                        color=\"error\"\r\n                     />,\r\n \r\n                 ]\r\n             },\r\n"
                },
                {
                    "date": 1659324778982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,16 +327,18 @@\n                     //     <IconButton aria-label=\"delete\" size=\"small\" onClick={() => handleOpenDialog}>\r\n                     //         <DeleteIcon fontSize=\"inherit\" />\r\n                     //     </IconButton>\r\n                     // </Stack>\r\n+                    <Tooltip title=\"Edit\">\r\n+                        <GridActionsCellItem\r\n+                            icon={<EditIcon />}\r\n+                            label=\"Edit\"\r\n+                            className=\"textPrimary\"\r\n+                            onClick={handleEditClick(id)}\r\n+                            color=\"primary\"\r\n+                        />\r\n+                    </Tooltip>,\r\n                     <GridActionsCellItem\r\n-                        icon={<EditIcon />}\r\n-                        label=\"Edit\"\r\n-                        className=\"textPrimary\"\r\n-                        onClick={handleEditClick(id)}\r\n-                        color=\"primary\"\r\n-                    />,\r\n-                    <GridActionsCellItem\r\n                         icon={<DeleteIcon />}\r\n                         label=\"Delete\"\r\n                         onClick={handleDeleteClick(id)}\r\n                         color=\"error\"\r\n"
                },
                {
                    "date": 1659324854177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridPreProcessEditCellProps, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n-import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack } from '@mui/material';\r\n+import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack, Tooltip } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n import DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\n"
                },
                {
                    "date": 1659324951150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,21 +303,25 @@\n                 // console.log('params', params.row.id, params.row.isEdit);\r\n                 const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n                 if (isInEditMode) {\r\n                     return [\r\n+                        <Tooltip title=\"Save\">\r\n+                            <GridActionsCellItem\r\n+                                icon={<SaveIcon />}\r\n+                                label=\"Save\"\r\n+                                onClick={handleSaveClick(id)}\r\n+                                color=\"success\"\r\n+                            />\r\n+                        </Tooltip>,\r\n+                        <Tooltip title=\"Cancel\">\r\n                         <GridActionsCellItem\r\n-                            icon={<SaveIcon />}\r\n-                            label=\"Save\"\r\n-                            onClick={handleSaveClick(id)}\r\n-                            color=\"success\"\r\n-                        />,\r\n-                        <GridActionsCellItem\r\n                             icon={<CancelIcon />}\r\n                             label=\"Cancel\"\r\n                             className=\"textPrimary\"\r\n                             onClick={handleCancelClick(id)}\r\n                             color=\"warning\"\r\n-                        />,\r\n+                        />\r\n+                        </Tooltip>,\r\n                     ]\r\n                 }\r\n                 return [\r\n                     // <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n@@ -336,14 +340,16 @@\n                             onClick={handleEditClick(id)}\r\n                             color=\"primary\"\r\n                         />\r\n                     </Tooltip>,\r\n-                    <GridActionsCellItem\r\n+                    <Tooltip title=\"Delete\">\r\n+                        <GridActionsCellItem\r\n                         icon={<DeleteIcon />}\r\n                         label=\"Delete\"\r\n                         onClick={handleDeleteClick(id)}\r\n                         color=\"error\"\r\n-                    />,\r\n+                        />\r\n+                    </Tooltip>,\r\n \r\n                 ]\r\n             },\r\n         },\r\n"
                },
                {
                    "date": 1659324984856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,9 +270,9 @@\n         console.log('e', e);\r\n     }\r\n \r\n     const cols: GridColumns = [\r\n-        { field: 'id', headerName: 'User ID', flex: 1, cellClassName: 'super-app-theme--cell' },\r\n+        { field: 'id', headerName: 'User ID', flex: 1,},\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n@@ -312,15 +312,15 @@\n                                 color=\"success\"\r\n                             />\r\n                         </Tooltip>,\r\n                         <Tooltip title=\"Cancel\">\r\n-                        <GridActionsCellItem\r\n-                            icon={<CancelIcon />}\r\n-                            label=\"Cancel\"\r\n-                            className=\"textPrimary\"\r\n-                            onClick={handleCancelClick(id)}\r\n-                            color=\"warning\"\r\n-                        />\r\n+                            <GridActionsCellItem\r\n+                                icon={<CancelIcon />}\r\n+                                label=\"Cancel\"\r\n+                                className=\"textPrimary\"\r\n+                                onClick={handleCancelClick(id)}\r\n+                                color=\"warning\"\r\n+                            />\r\n                         </Tooltip>,\r\n                     ]\r\n                 }\r\n                 return [\r\n"
                },
                {
                    "date": 1659325699544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridPreProcessEditCellProps, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n-import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack, Tooltip } from '@mui/material';\r\n+import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, makeStyles, Stack, Tooltip } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n import DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\n@@ -19,8 +19,24 @@\n // email: string,\r\n // password: string\r\n // }\r\n \r\n+const useStyles = makeStyles({\r\n+    headerCell: {\r\n+      backgroundColor: '#def2ff',\r\n+      color: 'white',\r\n+      fontWeight: 'bold',\r\n+    },\r\n+    row: {\r\n+      '&:nth-of-type(odd)': {\r\n+        backgroundColor: '#def2ff',\r\n+      },\r\n+      '&:last-child td, &:last-child th': {\r\n+        border: 0,\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n function validateEmail(email) {\r\n     const regex =\r\n         /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n     return regex.test(String(email).toLowerCase());\r\n@@ -270,9 +286,9 @@\n         console.log('e', e);\r\n     }\r\n \r\n     const cols: GridColumns = [\r\n-        { field: 'id', headerName: 'User ID', flex: 1,},\r\n+        { field: 'id', headerName: 'User ID', flex: 1, cellClassName:},\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n"
                },
                {
                    "date": 1659325715203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,9 +286,9 @@\n         console.log('e', e);\r\n     }\r\n \r\n     const cols: GridColumns = [\r\n-        { field: 'id', headerName: 'User ID', flex: 1, cellClassName:},\r\n+        { field: 'id', headerName: 'User ID', flex: 1, },\r\n         { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n         { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n"
                },
                {
                    "date": 1659325753610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridPreProcessEditCellProps, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n-import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, makeStyles, Stack, Tooltip } from '@mui/material';\r\n+import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack, Tooltip } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n import DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\n@@ -10,8 +10,9 @@\n import CancelIcon from '@mui/icons-material/Close';\r\n \r\n import { useAppContext } from '../../context/AppContext';\r\n import { useRouter } from 'next/router';\r\n+import { makeStyles } from '@material-ui/styles';\r\n \r\n // interface userList {\r\n //     is: number,\r\n // firstName: string,\r\n"
                },
                {
                    "date": 1659325789903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,9 +404,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     onRowEditStart={handleRowEditStart}\r\n                     onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    \r\n+                    classes={{ headerCell: classes.headerCell, row: classes.row }}\r\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n"
                },
                {
                    "date": 1659326057347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,9 +404,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     onRowEditStart={handleRowEditStart}\r\n                     onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    classes={{ headerCell: classes.headerCell, row: classes.row }}\r\n+                    \r\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n"
                },
                {
                    "date": 1659326563194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -429,8 +429,13 @@\n                     }}\r\n \r\n                     experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n+                    sx={{\r\n+                        '.MuiDataGrid-columnHeaderTitleContainer': {\r\n+                            fontWeight: 'bold',\r\n+                        }\r\n+                    }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n                     users: {JSON.stringify(users)}\r\n"
                },
                {
                    "date": 1659326696877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -430,9 +430,9 @@\n \r\n                     experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                     sx={{\r\n-                        '.MuiDataGrid-columnHeaderTitleContainer': {\r\n+                        '.MuiDataGrid-columnHeaderTitle': {\r\n                             fontWeight: 'bold',\r\n                         }\r\n                     }}\r\n                 />\r\n"
                },
                {
                    "date": 1659326727034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,8 +432,10 @@\n                     disableSelectionOnClick\r\n                     sx={{\r\n                         '.MuiDataGrid-columnHeaderTitle': {\r\n                             fontWeight: 'bold',\r\n+                            backgroundColor: '#def2ff',\r\n+                            color: 'white',\r\n                         }\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n"
                },
                {
                    "date": 1659326748333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,9 +432,9 @@\n                     disableSelectionOnClick\r\n                     sx={{\r\n                         '.MuiDataGrid-columnHeaderTitle': {\r\n                             fontWeight: 'bold',\r\n-                            backgroundColor: '#def2ff',\r\n+                            backgroundColor: 'inherit',\r\n                             color: 'white',\r\n                         }\r\n                     }}\r\n                 />\r\n"
                },
                {
                    "date": 1659326805839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,9 +432,9 @@\n                     disableSelectionOnClick\r\n                     sx={{\r\n                         '.MuiDataGrid-columnHeaderTitle': {\r\n                             fontWeight: 'bold',\r\n-                            backgroundColor: 'inherit',\r\n+                            backgroundColor: 'waarning',\r\n                             color: 'white',\r\n                         }\r\n                     }}\r\n                 />\r\n"
                },
                {
                    "date": 1659326818247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,9 +432,9 @@\n                     disableSelectionOnClick\r\n                     sx={{\r\n                         '.MuiDataGrid-columnHeaderTitle': {\r\n                             fontWeight: 'bold',\r\n-                            backgroundColor: 'waarning',\r\n+                            backgroundColor: 'blue',\r\n                             color: 'white',\r\n                         }\r\n                     }}\r\n                 />\r\n"
                },
                {
                    "date": 1659327194035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,9 +432,9 @@\n                     disableSelectionOnClick\r\n                     sx={{\r\n                         '.MuiDataGrid-columnHeaderTitle': {\r\n                             fontWeight: 'bold',\r\n-                            backgroundColor: 'blue',\r\n+                            backgroundColor: '#1976d2',\r\n                             color: 'white',\r\n                         }\r\n                     }}\r\n                 />\r\n"
                },
                {
                    "date": 1659327236616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,10 +432,10 @@\n                     disableSelectionOnClick\r\n                     sx={{\r\n                         '.MuiDataGrid-columnHeaderTitle': {\r\n                             fontWeight: 'bold',\r\n-                            backgroundColor: '#1976d2',\r\n-                            color: 'white',\r\n+                            // backgroundColor: '#1976d2',\r\n+                            // color: 'white',\r\n                         }\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n"
                },
                {
                    "date": 1659327326557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,9 +409,9 @@\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n-                                <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                <Button color=\"#1976d2\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                                     New User\r\n                                 </Button>\r\n                                 {/* <GridActionsCellItem\r\n                                     icon={<AddIcon />}\r\n"
                },
                {
                    "date": 1659327391964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,9 +409,9 @@\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n-                                <Button color=\"#1976d2\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                                     New User\r\n                                 </Button>\r\n                                 {/* <GridActionsCellItem\r\n                                     icon={<AddIcon />}\r\n"
                },
                {
                    "date": 1659327900888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n \r\n import { useAppContext } from '../../context/AppContext';\r\n import { useRouter } from 'next/router';\r\n import { makeStyles } from '@material-ui/styles';\r\n+import { createTheme } from '@mui/system';\r\n \r\n // interface userList {\r\n //     is: number,\r\n // firstName: string,\r\n@@ -20,21 +21,43 @@\n // email: string,\r\n // password: string\r\n // }\r\n \r\n-const useStyles = makeStyles({\r\n-    headerCell: {\r\n-      backgroundColor: '#def2ff',\r\n-      color: 'white',\r\n-      fontWeight: 'bold',\r\n-    },\r\n-    row: {\r\n-      '&:nth-of-type(odd)': {\r\n-        backgroundColor: '#def2ff',\r\n+// const useStyles = makeStyles({\r\n+//     headerCell: {\r\n+//       backgroundColor: '#def2ff',\r\n+//       color: 'white',\r\n+//       fontWeight: 'bold',\r\n+//     },\r\n+//     row: {\r\n+//       '&:nth-of-type(odd)': {\r\n+//         backgroundColor: '#def2ff',\r\n+//       },\r\n+//       '&:last-child td, &:last-child th': {\r\n+//         border: 0,\r\n+//       },\r\n+//     },\r\n+//   });\r\n+\r\n+\r\n+const theme = createTheme({\r\n+    palette: {\r\n+      background: {\r\n+        paper: '#fff',\r\n       },\r\n-      '&:last-child td, &:last-child th': {\r\n-        border: 0,\r\n+      text: {\r\n+        primary: '#173A5E',\r\n+        secondary: '#46505A',\r\n       },\r\n+      action: {\r\n+        active: '#001E3C',\r\n+      },\r\n+      success: {\r\n+        dark: '#009688',\r\n+      },\r\n+      header: {\r\n+        primary: '#1976d2',\r\n+      },\r\n     },\r\n   });\r\n \r\n function validateEmail(email) {\r\n@@ -409,9 +432,9 @@\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n-                                <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                <Button sx={{color: 'header.primary'}} startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                                     New User\r\n                                 </Button>\r\n                                 {/* <GridActionsCellItem\r\n                                     icon={<AddIcon />}\r\n"
                },
                {
                    "date": 1659327949744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n       success: {\r\n         dark: '#009688',\r\n       },\r\n       header: {\r\n-        primary: '#1976d2',\r\n+        primary: 'red',\r\n       },\r\n     },\r\n   });\r\n \r\n"
                },
                {
                    "date": 1659328003804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,9 +432,9 @@\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n-                                <Button sx={{color: 'header.primary'}} startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                <Button sx={{backgroundColor: 'header.primary'}} startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                                     New User\r\n                                 </Button>\r\n                                 {/* <GridActionsCellItem\r\n                                     icon={<AddIcon />}\r\n"
                },
                {
                    "date": 1659328199261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,9 +432,9 @@\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n-                                <Button sx={{backgroundColor: 'header.primary'}} startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                <Button sx={{'.MuiButton-root': {'header.primary'}}} startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                                     New User\r\n                                 </Button>\r\n                                 {/* <GridActionsCellItem\r\n                                     icon={<AddIcon />}\r\n"
                },
                {
                    "date": 1659328284288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,9 +432,9 @@\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n-                                <Button sx={{'.MuiButton-root': {'header.primary'}}} startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                <Button sx={{color: 'warning'}} startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                                     New User\r\n                                 </Button>\r\n                                 {/* <GridActionsCellItem\r\n                                     icon={<AddIcon />}\r\n"
                },
                {
                    "date": 1659328349662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,9 +432,9 @@\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n-                                <Button sx={{color: 'warning'}} startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                <Button startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                                     New User\r\n                                 </Button>\r\n                                 {/* <GridActionsCellItem\r\n                                     icon={<AddIcon />}\r\n"
                },
                {
                    "date": 1659328375187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -457,8 +457,9 @@\n                         '.MuiDataGrid-columnHeaderTitle': {\r\n                             fontWeight: 'bold',\r\n                             // backgroundColor: '#1976d2',\r\n                             // color: 'white',\r\n+                            border: 'none',\r\n                         }\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n"
                },
                {
                    "date": 1659328413046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -457,10 +457,12 @@\n                         '.MuiDataGrid-columnHeaderTitle': {\r\n                             fontWeight: 'bold',\r\n                             // backgroundColor: '#1976d2',\r\n                             // color: 'white',\r\n-                            border: 'none',\r\n-                        }\r\n+                        },\r\n+                        '.MuiDataGrid-columnSeparator': {\r\n+                            display: 'none',\r\n+                        },\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659334506063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,16 +13,10 @@\n import { useRouter } from 'next/router';\r\n import { makeStyles } from '@material-ui/styles';\r\n import { createTheme } from '@mui/system';\r\n \r\n-// interface userList {\r\n-//     is: number,\r\n-// firstName: string,\r\n-// lastName: string,\r\n-// email: string,\r\n-// password: string\r\n-// }\r\n \r\n+\r\n // const useStyles = makeStyles({\r\n //     headerCell: {\r\n //       backgroundColor: '#def2ff',\r\n //       color: 'white',\r\n@@ -59,8 +53,16 @@\n       },\r\n     },\r\n   });\r\n \r\n+const initUser = {\r\n+    is: 0,\r\n+    firstName: '',\r\n+    lastName: '',\r\n+    email: '',\r\n+    password: 'Abc@1234',\r\n+}\r\n+\r\n function validateEmail(email) {\r\n     const regex =\r\n         /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n     return regex.test(String(email).toLowerCase());\r\n@@ -246,16 +248,9 @@\n     const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n \r\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n-        setUsers((prevUsersClone) => [{\r\n-            id: newId,\r\n-            firstName: '',\r\n-            lastName: '',\r\n-            email: '',\r\n-            password: 'Abc@1234',\r\n-            isNew: true,\r\n-        }, ...prevUsersClone]);\r\n+        setUsers((prevUsersClone) => [initUser, ...prevUsersClone]);\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n         }));\r\n@@ -461,8 +456,11 @@\n                         },\r\n                         '.MuiDataGrid-columnSeparator': {\r\n                             display: 'none',\r\n                         },\r\n+                        '.MuiDataGrid-columnHeaders': {\r\n+                            backgroundColor: '#1976d2',\r\n+                        }\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659334611265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -451,9 +451,9 @@\n                     sx={{\r\n                         '.MuiDataGrid-columnHeaderTitle': {\r\n                             fontWeight: 'bold',\r\n                             // backgroundColor: '#1976d2',\r\n-                            // color: 'white',\r\n+                            color: 'white',\r\n                         },\r\n                         '.MuiDataGrid-columnSeparator': {\r\n                             display: 'none',\r\n                         },\r\n"
                },
                {
                    "date": 1659334673434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -449,9 +449,9 @@\n                     experimentalFeatures={{ newEditingApi: true }}\r\n                     disableSelectionOnClick\r\n                     sx={{\r\n                         '.MuiDataGrid-columnHeaderTitle': {\r\n-                            fontWeight: 'bold',\r\n+                            // fontWeight: 'bold',\r\n                             // backgroundColor: '#1976d2',\r\n                             color: 'white',\r\n                         },\r\n                         '.MuiDataGrid-columnSeparator': {\r\n"
                },
                {
                    "date": 1659334977957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -344,8 +344,9 @@\n                                 icon={<SaveIcon />}\r\n                                 label=\"Save\"\r\n                                 onClick={handleSaveClick(id)}\r\n                                 color=\"success\"\r\n+                                disabled={true}\r\n                             />\r\n                         </Tooltip>,\r\n                         <Tooltip title=\"Cancel\">\r\n                             <GridActionsCellItem\r\n"
                },
                {
                    "date": 1659335206916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,15 +339,17 @@\n                 const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n                 if (isInEditMode) {\r\n                     return [\r\n                         <Tooltip title=\"Save\">\r\n-                            <GridActionsCellItem\r\n-                                icon={<SaveIcon />}\r\n-                                label=\"Save\"\r\n-                                onClick={handleSaveClick(id)}\r\n-                                color=\"success\"\r\n-                                disabled={true}\r\n-                            />\r\n+                            <span>\r\n+                                <GridActionsCellItem\r\n+                                    icon={<SaveIcon />}\r\n+                                    label=\"Save\"\r\n+                                    onClick={handleSaveClick(id)}\r\n+                                    color=\"success\"\r\n+                                    disabled={true}\r\n+                                />\r\n+                            </span>\r\n                         </Tooltip>,\r\n                         <Tooltip title=\"Cancel\">\r\n                             <GridActionsCellItem\r\n                                 icon={<CancelIcon />}\r\n"
                },
                {
                    "date": 1659335406025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -345,9 +345,9 @@\n                                     icon={<SaveIcon />}\r\n                                     label=\"Save\"\r\n                                     onClick={handleSaveClick(id)}\r\n                                     color=\"success\"\r\n-                                    disabled={true}\r\n+                                    disabled={false}\r\n                                 />\r\n                             </span>\r\n                         </Tooltip>,\r\n                         <Tooltip title=\"Cancel\">\r\n"
                },
                {
                    "date": 1659335454351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,9 +236,9 @@\n         Object.keys(updatedModel).forEach((id) => {\r\n             if (updatedModel[id].email) {\r\n                 const isValid = validateEmail(updatedModel[id].email.value);\r\n \r\n-                console.log('isValid', isValid);\r\n+                console.log('>>>isValid', isValid);\r\n \r\n                 updatedModel[id].email = { ...updatedModel[id].email, error: !isValid };\r\n             }\r\n         });\r\n"
                },
                {
                    "date": 1659336881760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n \r\n function validateEmail(email) {\r\n     const regex =\r\n         /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n-    return regex.test(String(email).toLowerCase());\r\n+    return regex.test(String(email).toLowerCase()) && ;\r\n }\r\n \r\n export default function userPage() {\r\n     // useEffect(() => {\r\n@@ -312,12 +312,12 @@\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n-                const isValid = !validateEmail(params.props.value);\r\n+                const isValid = validateEmail(params.props.value);\r\n                 console.log('isValid', isValid);\r\n \r\n-                return { ...params.props, error: isValid };\r\n+                return { ...params.props, error: !isValid };\r\n             }\r\n         },\r\n         {\r\n             field: 'actions',\r\n"
                },
                {
                    "date": 1659336901070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,12 +312,12 @@\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n-                const isValid = validateEmail(params.props.value);\r\n-                console.log('isValid', isValid);\r\n+                const isInValid = validateEmail(params.props.value);\r\n+                console.log('isInValid', isInValid);\r\n \r\n-                return { ...params.props, error: !isValid };\r\n+                return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n             field: 'actions',\r\n"
                },
                {
                    "date": 1659336910746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n \r\n function validateEmail(email) {\r\n     const regex =\r\n         /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n-    return regex.test(String(email).toLowerCase()) && ;\r\n+    return regex.test(String(email).toLowerCase());\r\n }\r\n \r\n export default function userPage() {\r\n     // useEffect(() => {\r\n"
                },
                {
                    "date": 1659337073014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n-                const isInValid = validateEmail(params.props.value);\r\n+                const isInValid = !validateEmail(params.props.value);\r\n                 console.log('isInValid', isInValid);\r\n \r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n"
                },
                {
                    "date": 1659337196208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -418,9 +418,9 @@\n                     rowsPerPageOptions={[5]}\r\n                     // checkboxSelection\r\n                     editMode=\"row\"\r\n                     editRowsModel={editRowsModel}\r\n-                    onEditRowsModelChange={handleEditRowsModelChange}\r\n+                    // onEditRowsModelChange={handleEditRowsModelChange}\r\n                     // onRowEditCommit={handleRowEditCommit}\r\n                     rowModesModel={rowModesModel}\r\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     onRowEditStart={handleRowEditStart}\r\n"
                },
                {
                    "date": 1659337844745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,26 +34,26 @@\n \r\n \r\n const theme = createTheme({\r\n     palette: {\r\n-      background: {\r\n-        paper: '#fff',\r\n-      },\r\n-      text: {\r\n-        primary: '#173A5E',\r\n-        secondary: '#46505A',\r\n-      },\r\n-      action: {\r\n-        active: '#001E3C',\r\n-      },\r\n-      success: {\r\n-        dark: '#009688',\r\n-      },\r\n-      header: {\r\n-        primary: 'red',\r\n-      },\r\n+        background: {\r\n+            paper: '#fff',\r\n+        },\r\n+        text: {\r\n+            primary: '#173A5E',\r\n+            secondary: '#46505A',\r\n+        },\r\n+        action: {\r\n+            active: '#001E3C',\r\n+        },\r\n+        success: {\r\n+            dark: '#009688',\r\n+        },\r\n+        header: {\r\n+            primary: 'red',\r\n+        },\r\n     },\r\n-  });\r\n+});\r\n \r\n const initUser = {\r\n     is: 0,\r\n     firstName: '',\r\n@@ -306,11 +306,25 @@\n     }\r\n \r\n     const cols: GridColumns = [\r\n         { field: 'id', headerName: 'User ID', flex: 1, },\r\n-        { field: 'firstName', headerName: 'First name', flex: 1, editable: true },\r\n-        { field: 'lastName', headerName: 'Last name', flex: 1, editable: true },\r\n         {\r\n+            field: 'firstName', headerName: 'First name', flex: 1, editable: true,\r\n+            preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n+                const isInValid = params.props.value.length < 1;\r\n+                console.log('isInValid', isInValid);\r\n+                return { ...params.props, error: isInValid };\r\n+            }\r\n+        },\r\n+        {\r\n+            field: 'lastName', headerName: 'Last name', flex: 1, editable: true,\r\n+            preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n+                const isInValid = params.props.value.length < 1;\r\n+                console.log('isInValid', isInValid);\r\n+                return { ...params.props, error: isInValid };\r\n+            }\r\n+        },\r\n+        {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n                 const isInValid = !validateEmail(params.props.value);\r\n@@ -380,12 +394,12 @@\n                         />\r\n                     </Tooltip>,\r\n                     <Tooltip title=\"Delete\">\r\n                         <GridActionsCellItem\r\n-                        icon={<DeleteIcon />}\r\n-                        label=\"Delete\"\r\n-                        onClick={handleDeleteClick(id)}\r\n-                        color=\"error\"\r\n+                            icon={<DeleteIcon />}\r\n+                            label=\"Delete\"\r\n+                            onClick={handleDeleteClick(id)}\r\n+                            color=\"error\"\r\n                         />\r\n                     </Tooltip>,\r\n \r\n                 ]\r\n@@ -425,9 +439,9 @@\n                     // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n                     onRowEditStart={handleRowEditStart}\r\n                     onRowEditStop={handleRowEditStop}\r\n                     processRowUpdate={processRowUpdate}\r\n-                    \r\n+\r\n                     components={{\r\n                         Toolbar: () => {\r\n                             return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n                                 {/* <GridToolbarColumnsButton /> */}\r\n@@ -471,9 +485,9 @@\n                 </div>\r\n             </Box>\r\n             <Dialog\r\n                 open={openDialog}\r\n-                // onClose={handleCloseDialog}\r\n+            // onClose={handleCloseDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n                 <DialogContent>\r\n                     <DialogContentText>Are you sure?</DialogContentText>\r\n"
                },
                {
                    "date": 1659337955854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,21 +230,21 @@\n     };\r\n \r\n     const [editRowsModel, setEditRowsModel] = useState({});\r\n \r\n-    const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n-        const updatedModel = { ...model };\r\n-        Object.keys(updatedModel).forEach((id) => {\r\n-            if (updatedModel[id].email) {\r\n-                const isValid = validateEmail(updatedModel[id].email.value);\r\n+    // const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n+    //     const updatedModel = { ...model };\r\n+    //     Object.keys(updatedModel).forEach((id) => {\r\n+    //         if (updatedModel[id].email) {\r\n+    //             const isValid = validateEmail(updatedModel[id].email.value);\r\n \r\n-                console.log('>>>isValid', isValid);\r\n+    //             console.log('>>>isValid', isValid);\r\n \r\n-                updatedModel[id].email = { ...updatedModel[id].email, error: !isValid };\r\n-            }\r\n-        });\r\n-        setEditRowsModel(model);\r\n-    }, [])\r\n+    //             updatedModel[id].email = { ...updatedModel[id].email, error: !isValid };\r\n+    //         }\r\n+    //     });\r\n+    //     setEditRowsModel(model);\r\n+    // }, [])\r\n \r\n     const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n \r\n     const handleAddRow = () => {\r\n"
                },
                {
                    "date": 1659338265281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n     },\r\n });\r\n \r\n const initUser = {\r\n-    is: 0,\r\n+    id: 0,\r\n     firstName: '',\r\n     lastName: '',\r\n     email: '',\r\n     password: 'Abc@1234',\r\n@@ -248,8 +248,9 @@\n     const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n \r\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n+        initUser.id = _.cloneDeep(newId)\r\n         setUsers((prevUsersClone) => [initUser, ...prevUsersClone]);\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n"
                },
                {
                    "date": 1659338412788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import { useAppContext } from '../../context/AppContext';\r\n import { useRouter } from 'next/router';\r\n import { makeStyles } from '@material-ui/styles';\r\n import { createTheme } from '@mui/system';\r\n+import Typography from '@mui/material/Typography';\r\n \r\n \r\n \r\n // const useStyles = makeStyles({\r\n@@ -354,17 +355,17 @@\n                 const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n                 if (isInEditMode) {\r\n                     return [\r\n                         <Tooltip title=\"Save\">\r\n-                            <span>\r\n+                            <Typography>\r\n                                 <GridActionsCellItem\r\n                                     icon={<SaveIcon />}\r\n                                     label=\"Save\"\r\n                                     onClick={handleSaveClick(id)}\r\n                                     color=\"success\"\r\n                                     disabled={false}\r\n                                 />\r\n-                            </span>\r\n+                            </Typography>\r\n                         </Tooltip>,\r\n                         <Tooltip title=\"Cancel\">\r\n                             <GridActionsCellItem\r\n                                 icon={<CancelIcon />}\r\n"
                },
                {
                    "date": 1659338569880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -477,9 +477,10 @@\n                             display: 'none',\r\n                         },\r\n                         '.MuiDataGrid-columnHeaders': {\r\n                             backgroundColor: '#1976d2',\r\n-                        }\r\n+                        },\r\n+                        borderRadius: 0,\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659338597856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -477,8 +477,9 @@\n                             display: 'none',\r\n                         },\r\n                         '.MuiDataGrid-columnHeaders': {\r\n                             backgroundColor: '#1976d2',\r\n+                            borderRadius: 0,\r\n                         },\r\n                         borderRadius: 0,\r\n                     }}\r\n                 />\r\n"
                },
                {
                    "date": 1659338891443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,11 +56,11 @@\n });\r\n \r\n const initUser = {\r\n     id: 0,\r\n-    firstName: '',\r\n-    lastName: '',\r\n-    email: '',\r\n+    firstName: ' ',\r\n+    lastName: ' ',\r\n+    email: ' ',\r\n     password: 'Abc@1234',\r\n }\r\n \r\n function validateEmail(email) {\r\n"
                },
                {
                    "date": 1659339159686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,9 +250,9 @@\n \r\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n         initUser.id = _.cloneDeep(newId)\r\n-        setUsers((prevUsersClone) => [initUser, ...prevUsersClone]);\r\n+        setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n         }));\r\n"
                },
                {
                    "date": 1659339551628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,11 +302,11 @@\n \r\n         return updatedRow;\r\n     };\r\n \r\n-    const handleDeleteClickTest = (e) => {\r\n-        console.log('e', e);\r\n-    }\r\n+    // const handleDeleteClickTest = (e) => {\r\n+    //     console.log('e', e);\r\n+    // }\r\n \r\n     const cols: GridColumns = [\r\n         { field: 'id', headerName: 'User ID', flex: 1, },\r\n         {\r\n"
                },
                {
                    "date": 1659340140830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,15 +289,15 @@\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n         });\r\n \r\n         const editedRow = users.find((row) => row.id === id);\r\n-        if (editedRow!.isNew) {\r\n+        if (editedRow!.isEdited) {\r\n             setUsers(users.filter((row) => row.id !== id));\r\n         }\r\n     };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow, isNew: false };\r\n+        const updatedRow = { ...newRow, isEdited: false };\r\n         // console.log('updateRow', updatedRow);\r\n         setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n \r\n         return updatedRow;\r\n"
                },
                {
                    "date": 1659340616076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -295,9 +295,9 @@\n         }\r\n     };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow, isEdited: false };\r\n+        const updatedRow = { ...newRow, isEdited: true };\r\n         // console.log('updateRow', updatedRow);\r\n         setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n \r\n         return updatedRow;\r\n"
                },
                {
                    "date": 1659340682229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -295,9 +295,9 @@\n         }\r\n     };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow, isEdited: true };\r\n+        const updatedRow = { ...newRow, isEdited: false };\r\n         // console.log('updateRow', updatedRow);\r\n         setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n \r\n         return updatedRow;\r\n"
                },
                {
                    "date": 1659341912159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,11 +56,11 @@\n });\r\n \r\n const initUser = {\r\n     id: 0,\r\n-    firstName: ' ',\r\n-    lastName: ' ',\r\n-    email: ' ',\r\n+    firstName: '',\r\n+    lastName: '',\r\n+    email: '',\r\n     password: 'Abc@1234',\r\n }\r\n \r\n function validateEmail(email) {\r\n"
                },
                {
                    "date": 1659342320436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,12 +62,14 @@\n     email: '',\r\n     password: 'Abc@1234',\r\n }\r\n \r\n-function validateEmail(email) {\r\n-    const regex =\r\n-        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n-    return regex.test(String(email).toLowerCase());\r\n+function validateTextInput(props) {\r\n+    console.log('props', props);\r\n+    \r\n+    // const regex =\r\n+    //     /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n+    // return regex.test(String(props.email).toLowerCase()) && props.firstName.length;\r\n }\r\n \r\n export default function userPage() {\r\n     // useEffect(() => {\r\n@@ -328,9 +330,9 @@\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n-                const isInValid = !validateEmail(params.props.value);\r\n+                const isInValid = !validateTextInput(params.props);\r\n                 console.log('isInValid', isInValid);\r\n \r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n"
                },
                {
                    "date": 1659342411407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,9 +330,9 @@\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n-                const isInValid = !validateTextInput(params.props);\r\n+                const isInValid = !validateTextInput(params);\r\n                 console.log('isInValid', isInValid);\r\n \r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n"
                },
                {
                    "date": 1659342542463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     password: 'Abc@1234',\r\n }\r\n \r\n function validateTextInput(props) {\r\n-    console.log('props', props);\r\n+    console.log('props', props.props);\r\n     \r\n     // const regex =\r\n     //     /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n     // return regex.test(String(props.email).toLowerCase()) && props.firstName.length;\r\n"
                },
                {
                    "date": 1659342622179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     password: 'Abc@1234',\r\n }\r\n \r\n function validateTextInput(props) {\r\n-    console.log('props', props.props);\r\n+    console.log('props', props);\r\n     \r\n     // const regex =\r\n     //     /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n     // return regex.test(String(props.email).toLowerCase()) && props.firstName.length;\r\n"
                },
                {
                    "date": 1659344296420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,13 +63,18 @@\n     password: 'Abc@1234',\r\n }\r\n \r\n function validateTextInput(props) {\r\n-    console.log('props', props);\r\n-    \r\n-    // const regex =\r\n-    //     /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n-    // return regex.test(String(props.email).toLowerCase()) && props.firstName.length;\r\n+    // console.log('props', props);\r\n+\r\n+    const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n+\r\n+    const nameRegex = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/\r\n+    return (\r\n+        regex.test(String(props.email).toLowerCase()) && \r\n+        nameRegex.test(String(props.otherFieldsProps.firstName).toLowerCase()) && \r\n+        nameRegex.test(String(props.otherFieldsProps.lastName).toLowerCase())\r\n+    )\r\n }\r\n \r\n export default function userPage() {\r\n     // useEffect(() => {\r\n@@ -313,17 +318,17 @@\n         { field: 'id', headerName: 'User ID', flex: 1, },\r\n         {\r\n             field: 'firstName', headerName: 'First name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n-                const isInValid = params.props.value.length < 1;\r\n+                const isInValid = !validateTextInput(params);\r\n                 console.log('isInValid', isInValid);\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n             field: 'lastName', headerName: 'Last name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n-                const isInValid = params.props.value.length < 1;\r\n+                const isInValid = !validateTextInput(params);\r\n                 console.log('isInValid', isInValid);\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n"
                },
                {
                    "date": 1659344478601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,13 @@\n \r\n     const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n \r\n     const nameRegex = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/\r\n+    console.log(nameRegex.test(String(props.otherFieldsProps.firstName).toLowerCase()),\r\n+                nameRegex.test(String(props.otherFieldsProps.lastName).toLowerCase()),            \r\n+                regex.test(String(props.email).toLowerCase())\r\n+    )\r\n+    \r\n     return (\r\n         regex.test(String(props.email).toLowerCase()) && \r\n         nameRegex.test(String(props.otherFieldsProps.firstName).toLowerCase()) && \r\n         nameRegex.test(String(props.otherFieldsProps.lastName).toLowerCase())\r\n"
                },
                {
                    "date": 1659344615502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     password: 'Abc@1234',\r\n }\r\n \r\n function validateTextInput(props) {\r\n-    // console.log('props', props);\r\n+    console.log('props', props);\r\n \r\n     const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n \r\n     const nameRegex = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/\r\n"
                },
                {
                    "date": 1659345117576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     email: '',\r\n     password: 'Abc@1234',\r\n }\r\n \r\n-function validateTextInput(props) {\r\n+function validateTextInput(name: String, props) {\r\n     console.log('props', props);\r\n \r\n     const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n \r\n@@ -72,14 +72,31 @@\n     console.log(nameRegex.test(String(props.otherFieldsProps.firstName).toLowerCase()),\r\n                 nameRegex.test(String(props.otherFieldsProps.lastName).toLowerCase()),            \r\n                 regex.test(String(props.email).toLowerCase())\r\n     )\r\n-    \r\n-    return (\r\n-        regex.test(String(props.email).toLowerCase()) && \r\n-        nameRegex.test(String(props.otherFieldsProps.firstName).toLowerCase()) && \r\n-        nameRegex.test(String(props.otherFieldsProps.lastName).toLowerCase())\r\n-    )\r\n+    switch (name) {\r\n+        case 'firstName':\r\n+            return (\r\n+                nameRegex.test(String(props.props.value).toLowerCase()) && \r\n+                nameRegex.test(String(props.otherFieldsProps.lastName).toLowerCase()) &&\r\n+                regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n+            )\r\n+        \r\n+        case 'lastName':\r\n+            return (\r\n+                nameRegex.test(String(props.otherFieldsProps.firstName).toLowerCase()) && \r\n+                nameRegex.test(String(props.props.value).toLowerCase()) &&\r\n+                regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n+            )\r\n+        case 'email':\r\n+            return (\r\n+                nameRegex.test(String(props.otherFieldsProps.firstName).toLowerCase()) && \r\n+                nameRegex.test(String(props.otherFieldsProps.lastName).toLowerCase()) &&\r\n+                regex.test(String(props.props.value).toLowerCase())\r\n+            )\r\n+        default:\r\n+            break;\r\n+    }\r\n }\r\n \r\n export default function userPage() {\r\n     // useEffect(() => {\r\n@@ -323,26 +340,26 @@\n         { field: 'id', headerName: 'User ID', flex: 1, },\r\n         {\r\n             field: 'firstName', headerName: 'First name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n-                const isInValid = !validateTextInput(params);\r\n+                const isInValid = !validateTextInput('firstName', params);\r\n                 console.log('isInValid', isInValid);\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n             field: 'lastName', headerName: 'Last name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n-                const isInValid = !validateTextInput(params);\r\n+                const isInValid = !validateTextInput('lastName', params);\r\n                 console.log('isInValid', isInValid);\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n-                const isInValid = !validateTextInput(params);\r\n+                const isInValid = !validateTextInput('email', params);\r\n                 console.log('isInValid', isInValid);\r\n \r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n"
                },
                {
                    "date": 1659345245997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,30 +68,30 @@\n \r\n     const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n \r\n     const nameRegex = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/\r\n-    console.log(nameRegex.test(String(props.otherFieldsProps.firstName).toLowerCase()),\r\n-                nameRegex.test(String(props.otherFieldsProps.lastName).toLowerCase()),            \r\n+    console.log(nameRegex.test(String(props.otherFieldsProps.firstName)),\r\n+                nameRegex.test(String(props.otherFieldsProps.lastName)),            \r\n                 regex.test(String(props.email).toLowerCase())\r\n     )\r\n     switch (name) {\r\n         case 'firstName':\r\n             return (\r\n-                nameRegex.test(String(props.props.value).toLowerCase()) && \r\n-                nameRegex.test(String(props.otherFieldsProps.lastName).toLowerCase()) &&\r\n+                nameRegex.test(String(props.props.value)) && \r\n+                nameRegex.test(String(props.otherFieldsProps.lastName)) &&\r\n                 regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n             )\r\n         \r\n         case 'lastName':\r\n             return (\r\n-                nameRegex.test(String(props.otherFieldsProps.firstName).toLowerCase()) && \r\n-                nameRegex.test(String(props.props.value).toLowerCase()) &&\r\n+                nameRegex.test(String(props.otherFieldsProps.firstName)) && \r\n+                nameRegex.test(String(props.props.value)) &&\r\n                 regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n             )\r\n         case 'email':\r\n             return (\r\n-                nameRegex.test(String(props.otherFieldsProps.firstName).toLowerCase()) && \r\n-                nameRegex.test(String(props.otherFieldsProps.lastName).toLowerCase()) &&\r\n+                nameRegex.test(String(props.otherFieldsProps.firstName)) && \r\n+                nameRegex.test(String(props.otherFieldsProps.lastName)) &&\r\n                 regex.test(String(props.props.value).toLowerCase())\r\n             )\r\n         default:\r\n             break;\r\n"
                },
                {
                    "date": 1659347997771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -341,26 +341,26 @@\n         {\r\n             field: 'firstName', headerName: 'First name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 const isInValid = !validateTextInput('firstName', params);\r\n-                console.log('isInValid', isInValid);\r\n+                console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n             field: 'lastName', headerName: 'Last name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 const isInValid = !validateTextInput('lastName', params);\r\n-                console.log('isInValid', isInValid);\r\n+                console.log('isInValid', isInValid);                //<<<<<<<<<<<<<<<<<<<353\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n-                const isInValid = !validateTextInput('email', params);\r\n-                console.log('isInValid', isInValid);\r\n+                const isInValid = !validateTextInput('email', params);      \r\n+                console.log('isInValid', isInValid);                    //<<<<<<<<<<<<<<<<<<<362\r\n \r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n"
                },
                {
                    "date": 1659348194972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,27 +68,44 @@\n \r\n     const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n \r\n     const nameRegex = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/\r\n-    console.log(nameRegex.test(String(props.otherFieldsProps.firstName)),\r\n-                nameRegex.test(String(props.otherFieldsProps.lastName)),            \r\n-                regex.test(String(props.email).toLowerCase())\r\n-    )\r\n+    // console.log(nameRegex.test(String(props.otherFieldsProps.firstName)),\r\n+    //             nameRegex.test(String(props.otherFieldsProps.lastName)),            \r\n+    //             regex.test(String(props.email).toLowerCase())\r\n+    // )\r\n     switch (name) {\r\n         case 'firstName':\r\n+            console.log(\r\n+                nameRegex.test(String(props.props.value)),\r\n+                nameRegex.test(String(props.otherFieldsProps.lastName)),\r\n+                regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n+            )\r\n             return (\r\n                 nameRegex.test(String(props.props.value)) && \r\n                 nameRegex.test(String(props.otherFieldsProps.lastName)) &&\r\n                 regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n             )\r\n         \r\n         case 'lastName':\r\n+            console.log(\r\n+                nameRegex.test(String(props.otherFieldsProps.firstName)),\r\n+                nameRegex.test(String(props.props.value)),\r\n+                regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n+            );\r\n+            \r\n             return (\r\n                 nameRegex.test(String(props.otherFieldsProps.firstName)) && \r\n                 nameRegex.test(String(props.props.value)) &&\r\n                 regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n             )\r\n         case 'email':\r\n+            console.log(\r\n+                nameRegex.test(String(props.otherFieldsProps.firstName)),\r\n+                nameRegex.test(String(props.otherFieldsProps.lastName)),\r\n+                regex.test(String(props.props.value).toLowerCase())\r\n+            );\r\n+            \r\n             return (\r\n                 nameRegex.test(String(props.otherFieldsProps.firstName)) && \r\n                 nameRegex.test(String(props.otherFieldsProps.lastName)) &&\r\n                 regex.test(String(props.props.value).toLowerCase())\r\n"
                },
                {
                    "date": 1659348247147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n     //             regex.test(String(props.email).toLowerCase())\r\n     // )\r\n     switch (name) {\r\n         case 'firstName':\r\n-            console.log(\r\n+            console.log('firstName',\r\n                 nameRegex.test(String(props.props.value)),\r\n                 nameRegex.test(String(props.otherFieldsProps.lastName)),\r\n                 regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n             )\r\n@@ -86,9 +86,9 @@\n                 regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n             )\r\n         \r\n         case 'lastName':\r\n-            console.log(\r\n+            console.log('lastName',\r\n                 nameRegex.test(String(props.otherFieldsProps.firstName)),\r\n                 nameRegex.test(String(props.props.value)),\r\n                 regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n             );\r\n@@ -98,9 +98,9 @@\n                 nameRegex.test(String(props.props.value)) &&\r\n                 regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n             )\r\n         case 'email':\r\n-            console.log(\r\n+            console.log('email',\r\n                 nameRegex.test(String(props.otherFieldsProps.firstName)),\r\n                 nameRegex.test(String(props.otherFieldsProps.lastName)),\r\n                 regex.test(String(props.props.value).toLowerCase())\r\n             );\r\n"
                },
                {
                    "date": 1659348412723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,39 +76,39 @@\n     switch (name) {\r\n         case 'firstName':\r\n             console.log('firstName',\r\n                 nameRegex.test(String(props.props.value)),\r\n-                nameRegex.test(String(props.otherFieldsProps.lastName)),\r\n-                regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n+                nameRegex.test(String(props.otherFieldsProps.lastName.value)),\r\n+                regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n             )\r\n             return (\r\n                 nameRegex.test(String(props.props.value)) && \r\n-                nameRegex.test(String(props.otherFieldsProps.lastName)) &&\r\n-                regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n+                nameRegex.test(String(props.otherFieldsProps.lastName.value)) &&\r\n+                regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n             )\r\n         \r\n         case 'lastName':\r\n             console.log('lastName',\r\n-                nameRegex.test(String(props.otherFieldsProps.firstName)),\r\n+                nameRegex.test(String(props.otherFieldsProps.firstName.value)),\r\n                 nameRegex.test(String(props.props.value)),\r\n-                regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n+                regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n             );\r\n             \r\n             return (\r\n-                nameRegex.test(String(props.otherFieldsProps.firstName)) && \r\n+                nameRegex.test(String(props.otherFieldsProps.firstName.value)) && \r\n                 nameRegex.test(String(props.props.value)) &&\r\n-                regex.test(String(props.otherFieldsProps.email).toLowerCase())\r\n+                regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n             )\r\n         case 'email':\r\n             console.log('email',\r\n-                nameRegex.test(String(props.otherFieldsProps.firstName)),\r\n-                nameRegex.test(String(props.otherFieldsProps.lastName)),\r\n+                nameRegex.test(String(props.otherFieldsProps.firstName.value)),\r\n+                nameRegex.test(String(props.otherFieldsProps.lastName.value)),\r\n                 regex.test(String(props.props.value).toLowerCase())\r\n             );\r\n             \r\n             return (\r\n-                nameRegex.test(String(props.otherFieldsProps.firstName)) && \r\n-                nameRegex.test(String(props.otherFieldsProps.lastName)) &&\r\n+                nameRegex.test(String(props.otherFieldsProps.firstName.value)) && \r\n+                nameRegex.test(String(props.otherFieldsProps.lastName.value)) &&\r\n                 regex.test(String(props.props.value).toLowerCase())\r\n             )\r\n         default:\r\n             break;\r\n"
                },
                {
                    "date": 1659348704348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,11 +56,11 @@\n });\r\n \r\n const initUser = {\r\n     id: 0,\r\n-    firstName: '',\r\n-    lastName: '',\r\n-    email: '',\r\n+    firstName: 'initUser',\r\n+    lastName: 'initUser',\r\n+    email: 'initUser',\r\n     password: 'Abc@1234',\r\n }\r\n \r\n function validateTextInput(name: String, props) {\r\n"
                },
                {
                    "date": 1659349005255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n     firstName: 'initUser',\r\n     lastName: 'initUser',\r\n     email: 'initUser',\r\n     password: 'Abc@1234',\r\n+    isNew: true,\r\n }\r\n \r\n function validateTextInput(name: String, props) {\r\n     console.log('props', props);\r\n@@ -335,15 +336,15 @@\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n         });\r\n \r\n         const editedRow = users.find((row) => row.id === id);\r\n-        if (editedRow!.isEdited) {\r\n+        if (!editedRow?.isNew) {\r\n             setUsers(users.filter((row) => row.id !== id));\r\n         }\r\n     };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow, isEdited: false };\r\n+        const updatedRow = { ...newRow, isNew: false };\r\n         // console.log('updateRow', updatedRow);\r\n         setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n \r\n         return updatedRow;\r\n"
                },
                {
                    "date": 1659349447215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,8 +310,12 @@\n     };\r\n \r\n     const handleSaveClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n+        setUsers(prevState => ({\r\n+            ...prevState,\r\n+            [id]: {isNew: false},\r\n+        }))\r\n     };\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n         setOpenDialog(true);\r\n@@ -336,15 +340,15 @@\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n         });\r\n \r\n         const editedRow = users.find((row) => row.id === id);\r\n-        if (!editedRow?.isNew) {\r\n+        if (editedRow?.isNew) {\r\n             setUsers(users.filter((row) => row.id !== id));\r\n         }\r\n     };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow, isNew: false };\r\n+        const updatedRow = { ...newRow};\r\n         // console.log('updateRow', updatedRow);\r\n         setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n \r\n         return updatedRow;\r\n"
                },
                {
                    "date": 1659349493737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,37 +75,37 @@\n     //             regex.test(String(props.email).toLowerCase())\r\n     // )\r\n     switch (name) {\r\n         case 'firstName':\r\n-            console.log('firstName',\r\n-                nameRegex.test(String(props.props.value)),\r\n-                nameRegex.test(String(props.otherFieldsProps.lastName.value)),\r\n-                regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n-            )\r\n+            // console.log('firstName',\r\n+            //     nameRegex.test(String(props.props.value)),\r\n+            //     nameRegex.test(String(props.otherFieldsProps.lastName.value)),\r\n+            //     regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n+            // )\r\n             return (\r\n                 nameRegex.test(String(props.props.value)) && \r\n                 nameRegex.test(String(props.otherFieldsProps.lastName.value)) &&\r\n                 regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n             )\r\n         \r\n         case 'lastName':\r\n-            console.log('lastName',\r\n-                nameRegex.test(String(props.otherFieldsProps.firstName.value)),\r\n-                nameRegex.test(String(props.props.value)),\r\n-                regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n-            );\r\n+            // console.log('lastName',\r\n+            //     nameRegex.test(String(props.otherFieldsProps.firstName.value)),\r\n+            //     nameRegex.test(String(props.props.value)),\r\n+            //     regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n+            // );\r\n             \r\n             return (\r\n                 nameRegex.test(String(props.otherFieldsProps.firstName.value)) && \r\n                 nameRegex.test(String(props.props.value)) &&\r\n                 regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n             )\r\n         case 'email':\r\n-            console.log('email',\r\n-                nameRegex.test(String(props.otherFieldsProps.firstName.value)),\r\n-                nameRegex.test(String(props.otherFieldsProps.lastName.value)),\r\n-                regex.test(String(props.props.value).toLowerCase())\r\n-            );\r\n+            // console.log('email',\r\n+            //     nameRegex.test(String(props.otherFieldsProps.firstName.value)),\r\n+            //     nameRegex.test(String(props.otherFieldsProps.lastName.value)),\r\n+            //     regex.test(String(props.props.value).toLowerCase())\r\n+            // );\r\n             \r\n             return (\r\n                 nameRegex.test(String(props.otherFieldsProps.firstName.value)) && \r\n                 nameRegex.test(String(props.otherFieldsProps.lastName.value)) &&\r\n"
                },
                {
                    "date": 1659349543705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,11 +56,11 @@\n });\r\n \r\n const initUser = {\r\n     id: 0,\r\n-    firstName: 'initUser',\r\n-    lastName: 'initUser',\r\n-    email: 'initUser',\r\n+    firstName: '',\r\n+    lastName: '',\r\n+    email: '',\r\n     password: 'Abc@1234',\r\n     isNew: true,\r\n }\r\n \r\n"
                },
                {
                    "date": 1659349859130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,12 +310,11 @@\n     };\r\n \r\n     const handleSaveClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n-        setUsers(prevState => ({\r\n-            ...prevState,\r\n-            [id]: {isNew: false},\r\n-        }))\r\n+        setUsers(prevState => (prevState.map(e => {\r\n+            e.id === id? {...e, isNew: false}: e\r\n+        })))\r\n     };\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n         setOpenDialog(true);\r\n"
                },
                {
                    "date": 1659349909539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,8 +333,10 @@\n         setSelectedId([])\r\n     }\r\n \r\n     const handleCancelClick = (id: GridRowId) => () => {\r\n+        console.log('users', users);\r\n+        \r\n         setRowModesModel({\r\n             ...rowModesModel,\r\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n         });\r\n"
                },
                {
                    "date": 1659350277700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,11 +310,11 @@\n     };\r\n \r\n     const handleSaveClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n-        setUsers(prevState => (prevState.map(e => {\r\n-            e.id === id? {...e, isNew: false}: e\r\n-        })))\r\n+        const tmpState = _.cloneDeep(users)\r\n+        tmpState[id].isNew = false\r\n+        setUsers(_.cloneDeep(tmpState))\r\n     };\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n         setOpenDialog(true);\r\n"
                },
                {
                    "date": 1659350504001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,8 +311,10 @@\n \r\n     const handleSaveClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n+        console.log('tmp', tmpState);\r\n+        \r\n         tmpState[id].isNew = false\r\n         setUsers(_.cloneDeep(tmpState))\r\n     };\r\n \r\n"
                },
                {
                    "date": 1659350593901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n         console.log('tmp', tmpState);\r\n         \r\n-        tmpState[id].isNew = false\r\n+        tmpState[Number(id)].isNew = false\r\n         setUsers(_.cloneDeep(tmpState))\r\n     };\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n"
                },
                {
                    "date": 1659350620420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n \r\n     const handleSaveClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n-        console.log('tmp', tmpState);\r\n+        console.log('tmp', tmpState[Number(id)]);\r\n         \r\n         tmpState[Number(id)].isNew = false\r\n         setUsers(_.cloneDeep(tmpState))\r\n     };\r\n"
                },
                {
                    "date": 1659350670262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n \r\n     const handleSaveClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n-        console.log('tmp', tmpState[Number(id)]);\r\n+        console.log('rowId', id, 'tmp', tmpState[id]);\r\n         \r\n         tmpState[Number(id)].isNew = false\r\n         setUsers(_.cloneDeep(tmpState))\r\n     };\r\n"
                },
                {
                    "date": 1659350719686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n \r\n     const handleSaveClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n-        console.log('rowId', id, 'tmp', tmpState[id]);\r\n+        console.log('rowId', id, 'tmp', tmpState[0]);\r\n         \r\n         tmpState[Number(id)].isNew = false\r\n         setUsers(_.cloneDeep(tmpState))\r\n     };\r\n"
                },
                {
                    "date": 1659403363795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -335,9 +335,9 @@\n         setSelectedId([])\r\n     }\r\n \r\n     const handleCancelClick = (id: GridRowId) => () => {\r\n-        console.log('users', users);\r\n+        // console.log('users', users);\r\n         \r\n         setRowModesModel({\r\n             ...rowModesModel,\r\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n"
                },
                {
                    "date": 1659403778401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n         console.log('rowId', id, 'tmp', tmpState[0]);\r\n         \r\n-        tmpState[Number(id)].isNew = false\r\n+        tmpState[0].isNew = false\r\n         setUsers(_.cloneDeep(tmpState))\r\n     };\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n"
                },
                {
                    "date": 1659405942142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,8 +313,10 @@\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n         console.log('rowId', id, 'tmp', tmpState[0]);\r\n         \r\n+        const isInValid = validateTextInput()\r\n+\r\n         tmpState[0].isNew = false\r\n         setUsers(_.cloneDeep(tmpState))\r\n     };\r\n \r\n@@ -415,9 +417,9 @@\n                                     icon={<SaveIcon />}\r\n                                     label=\"Save\"\r\n                                     onClick={handleSaveClick(id)}\r\n                                     color=\"success\"\r\n-                                    disabled={false}\r\n+                                    disabled={true}\r\n                                 />\r\n                             </Typography>\r\n                         </Tooltip>,\r\n                         <Tooltip title=\"Cancel\">\r\n"
                },
                {
                    "date": 1659407510827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,8 +293,9 @@\n     //     setEditRowsModel(model);\r\n     // }, [])\r\n \r\n     const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n+    const [isDisableBtn, setIsDisableBtn] = useState(false)\r\n \r\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n         initUser.id = _.cloneDeep(newId)\r\n@@ -365,9 +366,9 @@\n \r\n     const cols: GridColumns = [\r\n         { field: 'id', headerName: 'User ID', flex: 1, },\r\n         {\r\n-            field: 'firstName', headerName: 'First name', flex: 1, editable: true,\r\n+            field: 'firstName', headerName: 'First name', flex: 1, editable: true, \r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 const isInValid = !validateTextInput('firstName', params);\r\n                 console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n                 return { ...params.props, error: isInValid };\r\n@@ -417,9 +418,9 @@\n                                     icon={<SaveIcon />}\r\n                                     label=\"Save\"\r\n                                     onClick={handleSaveClick(id)}\r\n                                     color=\"success\"\r\n-                                    disabled={true}\r\n+                                    disabled={isDisableBtn}\r\n                                 />\r\n                             </Typography>\r\n                         </Tooltip>,\r\n                         <Tooltip title=\"Cancel\">\r\n@@ -536,8 +537,9 @@\n                             backgroundColor: '#1976d2',\r\n                             borderRadius: 0,\r\n                         },\r\n                         borderRadius: 0,\r\n+                        color: 'error.main',\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659408173205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n }\r\n \r\n function validateTextInput(name: String, props) {\r\n     console.log('props', props);\r\n-\r\n+    \r\n     const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n \r\n     const nameRegex = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/\r\n     // console.log(nameRegex.test(String(props.otherFieldsProps.firstName)),\r\n@@ -127,12 +127,13 @@\n     if (status === 'false') {\r\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n-\r\n+        \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n     const [selectedId, setSelectedId] = useState([])\r\n-\r\n+    \r\n+    let isInValid = false\r\n     // console.log('path', router.pathname)\r\n     // const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     // const [isEdit, setIsEdit] = useState(false)\r\n     // const isInEditMode = isEdit\r\n@@ -142,8 +143,10 @@\n     // console.log('clone', users)\r\n \r\n     // const [openDialog, setOpenDialog] = useState(false)\r\n \r\n+\r\n+\r\n     // const handleEditRowsStop = (params) => () => {\r\n     //     console.log('stop edit');\r\n \r\n     //     usersClone[params.id].isEdit = false;\r\n@@ -314,9 +317,9 @@\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n         console.log('rowId', id, 'tmp', tmpState[0]);\r\n         \r\n-        const isInValid = validateTextInput()\r\n+        // const isInValid = validateTextInput()\r\n \r\n         tmpState[0].isNew = false\r\n         setUsers(_.cloneDeep(tmpState))\r\n     };\r\n@@ -362,32 +365,32 @@\n \r\n     // const handleDeleteClickTest = (e) => {\r\n     //     console.log('e', e);\r\n     // }\r\n-\r\n+    \r\n     const cols: GridColumns = [\r\n         { field: 'id', headerName: 'User ID', flex: 1, },\r\n         {\r\n             field: 'firstName', headerName: 'First name', flex: 1, editable: true, \r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n-                const isInValid = !validateTextInput('firstName', params);\r\n+                isInValid = !validateTextInput('firstName', params);\r\n                 console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n             field: 'lastName', headerName: 'Last name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n-                const isInValid = !validateTextInput('lastName', params);\r\n+                isInValid = !validateTextInput('lastName', params);\r\n                 console.log('isInValid', isInValid);                //<<<<<<<<<<<<<<<<<<<353\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n-                const isInValid = !validateTextInput('email', params);      \r\n+                isInValid = !validateTextInput('email', params);      \r\n                 console.log('isInValid', isInValid);                    //<<<<<<<<<<<<<<<<<<<362\r\n \r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n@@ -537,9 +540,9 @@\n                             backgroundColor: '#1976d2',\r\n                             borderRadius: 0,\r\n                         },\r\n                         borderRadius: 0,\r\n-                        color: 'error.main',\r\n+                        color: {true? 'error.main': 'info.main'},\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659408202479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -540,9 +540,9 @@\n                             backgroundColor: '#1976d2',\r\n                             borderRadius: 0,\r\n                         },\r\n                         borderRadius: 0,\r\n-                        color: {true? 'error.main': 'info.main'},\r\n+                        color: 'info.main',\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659408714668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n-import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridPreProcessEditCellProps, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n+import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridCellParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridPreProcessEditCellProps, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack, Tooltip } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n@@ -13,11 +13,11 @@\n import { useRouter } from 'next/router';\r\n import { makeStyles } from '@material-ui/styles';\r\n import { createTheme } from '@mui/system';\r\n import Typography from '@mui/material/Typography';\r\n+import clsx from 'clsx';\r\n \r\n \r\n-\r\n // const useStyles = makeStyles({\r\n //     headerCell: {\r\n //       backgroundColor: '#def2ff',\r\n //       color: 'white',\r\n@@ -374,9 +374,19 @@\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 isInValid = !validateTextInput('firstName', params);\r\n                 console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n                 return { ...params.props, error: isInValid };\r\n-            }\r\n+            },\r\n+            cellClassName: (params: GridCellParams<number>) => {\r\n+                if (params.value == null) {\r\n+                  return '';\r\n+                }\r\n+          \r\n+                return clsx('super-app', {\r\n+                  negative: params.value < 0,\r\n+                  positive: params.value > 0,\r\n+                });\r\n+              },\r\n         },\r\n         {\r\n             field: 'lastName', headerName: 'Last name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n@@ -540,9 +550,17 @@\n                             backgroundColor: '#1976d2',\r\n                             borderRadius: 0,\r\n                         },\r\n                         borderRadius: 0,\r\n-                        color: 'info.main',\r\n+                        // color: 'info.main',\r\n+                        // '& .super-app.negative': {\r\n+                        //     backgroundColor: 'rgba(157, 255, 118, 0.49)',\r\n+                        //     color: '#1a3e72',\r\n+                        //     fontWeight: '600',\r\n+                        //   },\r\n+                        '.MuiDataGrid-cell': {\r\n+                            color: 'info.main'\r\n+                        }\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659408791723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -557,9 +557,9 @@\n                         //     color: '#1a3e72',\r\n                         //     fontWeight: '600',\r\n                         //   },\r\n                         '.MuiDataGrid-cell': {\r\n-                            color: 'info.main'\r\n+                            color: isInValid? 'info.main' : 'error.main'\r\n                         }\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n"
                },
                {
                    "date": 1659408806627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -557,9 +557,9 @@\n                         //     color: '#1a3e72',\r\n                         //     fontWeight: '600',\r\n                         //   },\r\n                         '.MuiDataGrid-cell': {\r\n-                            color: isInValid? 'info.main' : 'error.main'\r\n+                            color: isInValid? 'error.main' : 'info.main'\r\n                         }\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n"
                },
                {
                    "date": 1659408904064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -557,9 +557,9 @@\n                         //     color: '#1a3e72',\r\n                         //     fontWeight: '600',\r\n                         //   },\r\n                         '.MuiDataGrid-cell': {\r\n-                            color: isInValid? 'error.main' : 'info.main'\r\n+                            bgcolor: isInValid? 'error.main' : 'info.main'\r\n                         }\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n"
                },
                {
                    "date": 1659409029347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n import { makeStyles } from '@material-ui/styles';\r\n import { createTheme } from '@mui/system';\r\n import Typography from '@mui/material/Typography';\r\n import clsx from 'clsx';\r\n+import { truncate } from 'fs/promises';\r\n \r\n \r\n // const useStyles = makeStyles({\r\n //     headerCell: {\r\n@@ -273,8 +274,9 @@\n     //   }, [])\r\n \r\n     const handleRowEditStart = (params: GridRowParams, event: MuiEvent<React.SyntheticEvent>) => {\r\n         event.defaultMuiPrevented = true;\r\n+        isInValid = true\r\n     };\r\n \r\n     const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\r\n         event.defaultMuiPrevented = true;\r\n"
                },
                {
                    "date": 1659409045228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -559,9 +559,9 @@\n                         //     color: '#1a3e72',\r\n                         //     fontWeight: '600',\r\n                         //   },\r\n                         '.MuiDataGrid-cell': {\r\n-                            bgcolor: isInValid? 'error.main' : 'info.main'\r\n+                            olor: isInValid? 'error.main' : 'info.main'\r\n                         }\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n"
                },
                {
                    "date": 1659409067523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -559,9 +559,9 @@\n                         //     color: '#1a3e72',\r\n                         //     fontWeight: '600',\r\n                         //   },\r\n                         '.MuiDataGrid-cell': {\r\n-                            olor: isInValid? 'error.main' : 'info.main'\r\n+                            color: isInValid? 'error.main' : 'info.main'\r\n                         }\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n"
                },
                {
                    "date": 1659409118353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -552,17 +552,14 @@\n                             backgroundColor: '#1976d2',\r\n                             borderRadius: 0,\r\n                         },\r\n                         borderRadius: 0,\r\n-                        // color: 'info.main',\r\n+                        color: 'info.main',\r\n                         // '& .super-app.negative': {\r\n                         //     backgroundColor: 'rgba(157, 255, 118, 0.49)',\r\n                         //     color: '#1a3e72',\r\n                         //     fontWeight: '600',\r\n                         //   },\r\n-                        '.MuiDataGrid-cell': {\r\n-                            color: isInValid? 'error.main' : 'info.main'\r\n-                        }\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659410402045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n     password: 'Abc@1234',\r\n     isNew: true,\r\n }\r\n \r\n-function validateTextInput(name: String, props) {\r\n+function validateTextInput(name: String, props: GridPreProcessEditCellProps) {\r\n     console.log('props', props);\r\n     \r\n     const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n \r\n@@ -314,15 +314,15 @@\n     const handleEditClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n     };\r\n \r\n-    const handleSaveClick = (id: GridRowId) => () => {\r\n+    const handleSaveClick = (params: GridRowParams) => () => {\r\n+        const id = params.id\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n         console.log('rowId', id, 'tmp', tmpState[0]);\r\n         \r\n-        // const isInValid = validateTextInput()\r\n-\r\n+        \r\n         tmpState[0].isNew = false\r\n         setUsers(_.cloneDeep(tmpState))\r\n     };\r\n \r\n@@ -412,9 +412,9 @@\n             type: 'actions',\r\n             headerName: 'Actions',\r\n             width: 100,\r\n             cellClassName: 'actions',\r\n-            getActions: ({ id }) => {\r\n+            getActions: (params) => {\r\n                 // <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                 //     <IconButton aria-label=\"save\" size=\"small\" onClick={handleSaveClick(params)}>\r\n                 //         <SaveIcon fontSize=\"inherit\"  />\r\n                 //     </IconButton> \r\n@@ -423,17 +423,18 @@\n                 //             </IconButton>\r\n                 //         </Stack>\r\n                 // const id = params.id\r\n                 // console.log('params', params.row.id, params.row.isEdit);\r\n+                const id = params.id\r\n                 const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n                 if (isInEditMode) {\r\n                     return [\r\n                         <Tooltip title=\"Save\">\r\n                             <Typography>\r\n                                 <GridActionsCellItem\r\n                                     icon={<SaveIcon />}\r\n                                     label=\"Save\"\r\n-                                    onClick={handleSaveClick(id)}\r\n+                                    onClick={handleSaveClick(params)}\r\n                                     color=\"success\"\r\n                                     disabled={isDisableBtn}\r\n                                 />\r\n                             </Typography>\r\n"
                },
                {
                    "date": 1659410547488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,9 +318,9 @@\n     const handleSaveClick = (params: GridRowParams) => () => {\r\n         const id = params.id\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n-        console.log('rowId', id, 'tmp', tmpState[0]);\r\n+        console.log('rowId', id, '\\ntmp', tmpState[0], '\\nparams', params);\r\n         \r\n         \r\n         tmpState[0].isNew = false\r\n         setUsers(_.cloneDeep(tmpState))\r\n"
                },
                {
                    "date": 1659411968192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,9 +274,9 @@\n     //   }, [])\r\n \r\n     const handleRowEditStart = (params: GridRowParams, event: MuiEvent<React.SyntheticEvent>) => {\r\n         event.defaultMuiPrevented = true;\r\n-        isInValid = true\r\n+        // isInValid = true\r\n     };\r\n \r\n     const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\r\n         event.defaultMuiPrevented = true;\r\n@@ -320,9 +320,11 @@\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n         console.log('rowId', id, '\\ntmp', tmpState[0], '\\nparams', params);\r\n         \r\n-        \r\n+        isInValid = params.row.map(e => {\r\n+            return e === ''\r\n+        })\r\n         tmpState[0].isNew = false\r\n         setUsers(_.cloneDeep(tmpState))\r\n     };\r\n \r\n"
                },
                {
                    "date": 1659412463396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,9 +318,9 @@\n     const handleSaveClick = (params: GridRowParams) => () => {\r\n         const id = params.id\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n-        console.log('rowId', id, '\\ntmp', tmpState[0], '\\nparams', params);\r\n+        console.log('rowId', id, '\\ntmp', tmpState[0], '\\nparams', params, '\\nrowModel', rowModesModel);\r\n         \r\n         isInValid = params.row.map(e => {\r\n             return e === ''\r\n         })\r\n"
                },
                {
                    "date": 1659412709607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -324,9 +324,10 @@\n         isInValid = params.row.map(e => {\r\n             return e === ''\r\n         })\r\n         tmpState[0].isNew = false\r\n-        setUsers(_.cloneDeep(tmpState))\r\n+        // setUsers(_.cloneDeep(tmpState))\r\n+        setUsers(prevState => prevState.map(e => e.id === id? {...e, isNew: false}: e))\r\n     };\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n         setOpenDialog(true);\r\n"
                },
                {
                    "date": 1659412732857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,11 +320,11 @@\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         const tmpState = _.cloneDeep(users)\r\n         console.log('rowId', id, '\\ntmp', tmpState[0], '\\nparams', params, '\\nrowModel', rowModesModel);\r\n         \r\n-        isInValid = params.row.map(e => {\r\n-            return e === ''\r\n-        })\r\n+        // isInValid = params.row.map(e => {\r\n+        //     return e === ''\r\n+        // })\r\n         tmpState[0].isNew = false\r\n         // setUsers(_.cloneDeep(tmpState))\r\n         setUsers(prevState => prevState.map(e => e.id === id? {...e, isNew: false}: e))\r\n     };\r\n"
                },
                {
                    "date": 1659412834019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,15 +317,15 @@\n \r\n     const handleSaveClick = (params: GridRowParams) => () => {\r\n         const id = params.id\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n-        const tmpState = _.cloneDeep(users)\r\n-        console.log('rowId', id, '\\ntmp', tmpState[0], '\\nparams', params, '\\nrowModel', rowModesModel);\r\n+        // const tmpState = _.cloneDeep(users)\r\n+        console.log('rowId', id, '\\nparams', params, '\\nrowModel', rowModesModel);\r\n         \r\n         // isInValid = params.row.map(e => {\r\n         //     return e === ''\r\n         // })\r\n-        tmpState[0].isNew = false\r\n+        // tmpState[0].isNew = false\r\n         // setUsers(_.cloneDeep(tmpState))\r\n         setUsers(prevState => prevState.map(e => e.id === id? {...e, isNew: false}: e))\r\n     };\r\n \r\n"
                },
                {
                    "date": 1659420220861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -437,9 +437,9 @@\n                                     icon={<SaveIcon />}\r\n                                     label=\"Save\"\r\n                                     onClick={handleSaveClick(params)}\r\n                                     color=\"success\"\r\n-                                    disabled={isDisableBtn}\r\n+                                    disabled={true}\r\n                                 />\r\n                             </Typography>\r\n                         </Tooltip>,\r\n                         <Tooltip title=\"Cancel\">\r\n"
                },
                {
                    "date": 1659420245997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,9 +298,9 @@\n     //     setEditRowsModel(model);\r\n     // }, [])\r\n \r\n     const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n-    const [isDisableBtn, setIsDisableBtn] = useState(false)\r\n+    const [isDisableBtn, setIsDisableBtn] = useState(true)\r\n \r\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n         initUser.id = _.cloneDeep(newId)\r\n@@ -437,9 +437,9 @@\n                                     icon={<SaveIcon />}\r\n                                     label=\"Save\"\r\n                                     onClick={handleSaveClick(params)}\r\n                                     color=\"success\"\r\n-                                    disabled={true}\r\n+                                    disabled={isDisableBtn}\r\n                                 />\r\n                             </Typography>\r\n                         </Tooltip>,\r\n                         <Tooltip title=\"Cancel\">\r\n"
                },
                {
                    "date": 1659420353075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,8 +378,9 @@\n             field: 'firstName', headerName: 'First name', flex: 1, editable: true, \r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 isInValid = !validateTextInput('firstName', params);\r\n                 console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n+                isInValid? setIsDisableBtn(true) : setIsDisableBtn(false)\r\n                 return { ...params.props, error: isInValid };\r\n             },\r\n             cellClassName: (params: GridCellParams<number>) => {\r\n                 if (params.value == null) {\r\n"
                },
                {
                    "date": 1659420368913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -397,8 +397,9 @@\n             field: 'lastName', headerName: 'Last name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 isInValid = !validateTextInput('lastName', params);\r\n                 console.log('isInValid', isInValid);                //<<<<<<<<<<<<<<<<<<<353\r\n+                isInValid? setIsDisableBtn(true) : setIsDisableBtn(false)\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n@@ -406,9 +407,9 @@\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n                 isInValid = !validateTextInput('email', params);      \r\n                 console.log('isInValid', isInValid);                    //<<<<<<<<<<<<<<<<<<<362\r\n-\r\n+                isInValid? setIsDisableBtn(true) : setIsDisableBtn(false)\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n"
                },
                {
                    "date": 1659420431431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,8 +325,9 @@\n         //     return e === ''\r\n         // })\r\n         // tmpState[0].isNew = false\r\n         // setUsers(_.cloneDeep(tmpState))\r\n+        isInValid? setIsDisableBtn(true) : setIsDisableBtn(false)\r\n         setUsers(prevState => prevState.map(e => e.id === id? {...e, isNew: false}: e))\r\n     };\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n"
                },
                {
                    "date": 1659420512359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,8 +355,9 @@\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n         });\r\n \r\n         const editedRow = users.find((row) => row.id === id);\r\n+        setIsDisableBtn(true)\r\n         if (editedRow?.isNew) {\r\n             setUsers(users.filter((row) => row.id !== id));\r\n         }\r\n     };\r\n"
                },
                {
                    "date": 1659422100842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,8 +312,9 @@\n     }\r\n \r\n     const handleEditClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n+        setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: false}: e))\r\n     };\r\n \r\n     const handleSaveClick = (params: GridRowParams) => () => {\r\n         const id = params.id\r\n@@ -380,9 +381,11 @@\n             field: 'firstName', headerName: 'First name', flex: 1, editable: true, \r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 isInValid = !validateTextInput('firstName', params);\r\n                 console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n-                isInValid? setIsDisableBtn(true) : setIsDisableBtn(false)\r\n+                const id = params.id\r\n+                isInValid? setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: true}: e)) \r\n+                : setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: false}: e))\r\n                 return { ...params.props, error: isInValid };\r\n             },\r\n             cellClassName: (params: GridCellParams<number>) => {\r\n                 if (params.value == null) {\r\n@@ -399,9 +402,11 @@\n             field: 'lastName', headerName: 'Last name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 isInValid = !validateTextInput('lastName', params);\r\n                 console.log('isInValid', isInValid);                //<<<<<<<<<<<<<<<<<<<353\r\n-                isInValid? setIsDisableBtn(true) : setIsDisableBtn(false)\r\n+                const id = params.id\r\n+                isInValid? setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: true}: e)) \r\n+                : setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: false}: e))\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n@@ -409,9 +414,12 @@\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n                 isInValid = !validateTextInput('email', params);      \r\n                 console.log('isInValid', isInValid);                    //<<<<<<<<<<<<<<<<<<<362\r\n-                isInValid? setIsDisableBtn(true) : setIsDisableBtn(false)\r\n+                const id = params.id\r\n+                isInValid? setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: true}: e)) \r\n+                : setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: false}: e))\r\n+            \r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n@@ -441,9 +449,9 @@\n                                     icon={<SaveIcon />}\r\n                                     label=\"Save\"\r\n                                     onClick={handleSaveClick(params)}\r\n                                     color=\"success\"\r\n-                                    disabled={isDisableBtn}\r\n+                                    disabled={params.row.isEdited}\r\n                                 />\r\n                             </Typography>\r\n                         </Tooltip>,\r\n                         <Tooltip title=\"Cancel\">\r\n"
                },
                {
                    "date": 1659422131973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n     }\r\n \r\n     const handleEditClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n-        setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: false}: e))\r\n+        setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: true}: e))\r\n     };\r\n \r\n     const handleSaveClick = (params: GridRowParams) => () => {\r\n         const id = params.id\r\n"
                },
                {
                    "date": 1659422569046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n         }));\r\n     }\r\n \r\n     const handleEditClick = (id: GridRowId) => () => {\r\n-        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n+        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' } });\r\n         setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: true}: e))\r\n     };\r\n \r\n     const handleSaveClick = (params: GridRowParams) => () => {\r\n@@ -387,9 +387,9 @@\n                 : setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: false}: e))\r\n                 return { ...params.props, error: isInValid };\r\n             },\r\n             cellClassName: (params: GridCellParams<number>) => {\r\n-                if (params.value == null) {\r\n+                if (params.value === null) {\r\n                   return '';\r\n                 }\r\n           \r\n                 return clsx('super-app', {\r\n"
                },
                {
                    "date": 1659422600944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n         }));\r\n     }\r\n \r\n     const handleEditClick = (id: GridRowId) => () => {\r\n-        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' } });\r\n+        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n         setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: true}: e))\r\n     };\r\n \r\n     const handleSaveClick = (params: GridRowParams) => () => {\r\n"
                },
                {
                    "date": 1659423000304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import _ from 'lodash'\r\n import { useCallback, useEffect, useMemo, useState } from 'react';\r\n import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridCellParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridPreProcessEditCellProps, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n-import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack, Tooltip } from '@mui/material';\r\n+import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack, ThemeProvider, Tooltip } from '@mui/material';\r\n import Button from '@mui/material/Button';\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n import DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\n@@ -66,9 +66,9 @@\n }\r\n \r\n function validateTextInput(name: String, props: GridPreProcessEditCellProps) {\r\n     console.log('props', props);\r\n-    \r\n+\r\n     const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n \r\n     const nameRegex = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/\r\n     // console.log(nameRegex.test(String(props.otherFieldsProps.firstName)),\r\n@@ -82,22 +82,22 @@\n             //     nameRegex.test(String(props.otherFieldsProps.lastName.value)),\r\n             //     regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n             // )\r\n             return (\r\n-                nameRegex.test(String(props.props.value)) && \r\n+                nameRegex.test(String(props.props.value)) &&\r\n                 nameRegex.test(String(props.otherFieldsProps.lastName.value)) &&\r\n                 regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n             )\r\n-        \r\n+\r\n         case 'lastName':\r\n             // console.log('lastName',\r\n             //     nameRegex.test(String(props.otherFieldsProps.firstName.value)),\r\n             //     nameRegex.test(String(props.props.value)),\r\n             //     regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n             // );\r\n-            \r\n+\r\n             return (\r\n-                nameRegex.test(String(props.otherFieldsProps.firstName.value)) && \r\n+                nameRegex.test(String(props.otherFieldsProps.firstName.value)) &&\r\n                 nameRegex.test(String(props.props.value)) &&\r\n                 regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n             )\r\n         case 'email':\r\n@@ -105,11 +105,11 @@\n             //     nameRegex.test(String(props.otherFieldsProps.firstName.value)),\r\n             //     nameRegex.test(String(props.otherFieldsProps.lastName.value)),\r\n             //     regex.test(String(props.props.value).toLowerCase())\r\n             // );\r\n-            \r\n+\r\n             return (\r\n-                nameRegex.test(String(props.otherFieldsProps.firstName.value)) && \r\n+                nameRegex.test(String(props.otherFieldsProps.firstName.value)) &&\r\n                 nameRegex.test(String(props.otherFieldsProps.lastName.value)) &&\r\n                 regex.test(String(props.props.value).toLowerCase())\r\n             )\r\n         default:\r\n@@ -128,12 +128,12 @@\n     if (status === 'false') {\r\n         // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n-        \r\n+\r\n     const [openDialog, setOpenDialog] = useState(false)\r\n     const [selectedId, setSelectedId] = useState([])\r\n-    \r\n+\r\n     let isInValid = false\r\n     // console.log('path', router.pathname)\r\n     // const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     // const [isEdit, setIsEdit] = useState(false)\r\n@@ -312,24 +312,24 @@\n     }\r\n \r\n     const handleEditClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n-        setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: true}: e))\r\n+        setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n     };\r\n \r\n     const handleSaveClick = (params: GridRowParams) => () => {\r\n         const id = params.id\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n         // const tmpState = _.cloneDeep(users)\r\n         console.log('rowId', id, '\\nparams', params, '\\nrowModel', rowModesModel);\r\n-        \r\n+\r\n         // isInValid = params.row.map(e => {\r\n         //     return e === ''\r\n         // })\r\n         // tmpState[0].isNew = false\r\n         // setUsers(_.cloneDeep(tmpState))\r\n-        isInValid? setIsDisableBtn(true) : setIsDisableBtn(false)\r\n-        setUsers(prevState => prevState.map(e => e.id === id? {...e, isNew: false}: e))\r\n+        isInValid ? setIsDisableBtn(true) : setIsDisableBtn(false)\r\n+        setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isNew: false } : e))\r\n     };\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n         setOpenDialog(true);\r\n@@ -349,9 +349,9 @@\n     }\r\n \r\n     const handleCancelClick = (id: GridRowId) => () => {\r\n         // console.log('users', users);\r\n-        \r\n+\r\n         setRowModesModel({\r\n             ...rowModesModel,\r\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n         });\r\n@@ -363,9 +363,9 @@\n         }\r\n     };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow};\r\n+        const updatedRow = { ...newRow };\r\n         // console.log('updateRow', updatedRow);\r\n         setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n \r\n         return updatedRow;\r\n@@ -373,53 +373,53 @@\n \r\n     // const handleDeleteClickTest = (e) => {\r\n     //     console.log('e', e);\r\n     // }\r\n-    \r\n+\r\n     const cols: GridColumns = [\r\n         { field: 'id', headerName: 'User ID', flex: 1, },\r\n         {\r\n-            field: 'firstName', headerName: 'First name', flex: 1, editable: true, \r\n+            field: 'firstName', headerName: 'First name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 isInValid = !validateTextInput('firstName', params);\r\n                 console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n                 const id = params.id\r\n-                isInValid? setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: true}: e)) \r\n-                : setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: false}: e))\r\n+                isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n+                    : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n                 return { ...params.props, error: isInValid };\r\n             },\r\n             cellClassName: (params: GridCellParams<number>) => {\r\n                 if (params.value === null) {\r\n-                  return '';\r\n+                    return '';\r\n                 }\r\n-          \r\n+\r\n                 return clsx('super-app', {\r\n-                  negative: params.value < 0,\r\n-                  positive: params.value > 0,\r\n+                    negative: params.value < 0,\r\n+                    positive: params.value > 0,\r\n                 });\r\n-              },\r\n+            },\r\n         },\r\n         {\r\n             field: 'lastName', headerName: 'Last name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 isInValid = !validateTextInput('lastName', params);\r\n                 console.log('isInValid', isInValid);                //<<<<<<<<<<<<<<<<<<<353\r\n                 const id = params.id\r\n-                isInValid? setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: true}: e)) \r\n-                : setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: false}: e))\r\n+                isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n+                    : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n-                isInValid = !validateTextInput('email', params);      \r\n+                isInValid = !validateTextInput('email', params);\r\n                 console.log('isInValid', isInValid);                    //<<<<<<<<<<<<<<<<<<<362\r\n                 const id = params.id\r\n-                isInValid? setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: true}: e)) \r\n-                : setUsers(prevState => prevState.map(e => e.id === id? {...e, isEdited: false}: e))\r\n-            \r\n+                isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n+                    : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n+\r\n                 return { ...params.props, error: isInValid };\r\n             }\r\n         },\r\n         {\r\n@@ -442,9 +442,9 @@\n                 const id = params.id\r\n                 const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n                 if (isInEditMode) {\r\n                     return [\r\n-                        <Tooltip title=\"Save\">\r\n+                        <Tooltip title={params.row.isEdited? \"Invalid fields\" : \"Save\" }>\r\n                             <Typography>\r\n                                 <GridActionsCellItem\r\n                                     icon={<SaveIcon />}\r\n                                     label=\"Save\"\r\n@@ -498,115 +498,117 @@\n     ]\r\n \r\n     return (\r\n         <>\r\n-            <Box sx={{\r\n-                height: 405, width: '100%'\r\n-            }}>\r\n-                <Stack direction=\"row\" alignItems=\"center\" spacing={1} justifyContent=\"end\">\r\n-                    {/* <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+            <ThemeProvider theme={theme}>\r\n+                <Box sx={{\r\n+                    height: 405, width: '100%'\r\n+                }}>\r\n+                    <Stack direction=\"row\" alignItems=\"center\" spacing={1} justifyContent=\"end\">\r\n+                        {/* <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                         New User\r\n                     </Button> */}\r\n-                    {/* <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n+                        {/* <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n                         Save\r\n                     </Button>\r\n                     <Button color=\"primary\" startIcon={<CancelIcon />} onClick={handleCancelClick}>\r\n                         Cancel\r\n                     </Button> */}\r\n-                </Stack>\r\n-                <DataGrid\r\n-                    // onCellEditCommit={handleCommit}\r\n-                    autoHeight\r\n-                    rows={users}\r\n-                    columns={cols}\r\n-                    pageSize={5}\r\n-                    rowsPerPageOptions={[5]}\r\n-                    // checkboxSelection\r\n-                    editMode=\"row\"\r\n-                    editRowsModel={editRowsModel}\r\n-                    // onEditRowsModelChange={handleEditRowsModelChange}\r\n-                    // onRowEditCommit={handleRowEditCommit}\r\n-                    rowModesModel={rowModesModel}\r\n-                    // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n-                    onRowEditStart={handleRowEditStart}\r\n-                    onRowEditStop={handleRowEditStop}\r\n-                    processRowUpdate={processRowUpdate}\r\n+                    </Stack>\r\n+                    <DataGrid\r\n+                        // onCellEditCommit={handleCommit}\r\n+                        autoHeight\r\n+                        rows={users}\r\n+                        columns={cols}\r\n+                        pageSize={5}\r\n+                        rowsPerPageOptions={[5]}\r\n+                        // checkboxSelection\r\n+                        editMode=\"row\"\r\n+                        editRowsModel={editRowsModel}\r\n+                        // onEditRowsModelChange={handleEditRowsModelChange}\r\n+                        // onRowEditCommit={handleRowEditCommit}\r\n+                        rowModesModel={rowModesModel}\r\n+                        // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n+                        onRowEditStart={handleRowEditStart}\r\n+                        onRowEditStop={handleRowEditStop}\r\n+                        processRowUpdate={processRowUpdate}\r\n \r\n-                    components={{\r\n-                        Toolbar: () => {\r\n-                            return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n-                                {/* <GridToolbarColumnsButton /> */}\r\n-                                <Button startIcon={<AddIcon />} onClick={handleAddRow}>\r\n-                                    New User\r\n-                                </Button>\r\n-                                {/* <GridActionsCellItem\r\n+                        components={{\r\n+                            Toolbar: () => {\r\n+                                return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n+                                    {/* <GridToolbarColumnsButton /> */}\r\n+                                    <Button startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                        New User\r\n+                                    </Button>\r\n+                                    {/* <GridActionsCellItem\r\n                                     icon={<AddIcon />}\r\n                                     label=\"New User\"\r\n                                     onClick={handleAddRow}\r\n                                     color=\"inherit\"\r\n                                     showInMenu={true}\r\n                                 /> */}\r\n-                                {/* <GridToolbarExport /> */}\r\n-                            </GridToolbarContainer>)\r\n-                        }\r\n-                    }}\r\n-                    componentsProps={{\r\n-                        toolbar: { setUsers, setRowModesModel },\r\n-                    }}\r\n+                                    {/* <GridToolbarExport /> */}\r\n+                                </GridToolbarContainer>)\r\n+                            }\r\n+                        }}\r\n+                        componentsProps={{\r\n+                            toolbar: { setUsers, setRowModesModel },\r\n+                        }}\r\n \r\n-                    experimentalFeatures={{ newEditingApi: true }}\r\n-                    disableSelectionOnClick\r\n-                    sx={{\r\n-                        '.MuiDataGrid-columnHeaderTitle': {\r\n-                            // fontWeight: 'bold',\r\n-                            // backgroundColor: '#1976d2',\r\n-                            color: 'white',\r\n-                        },\r\n-                        '.MuiDataGrid-columnSeparator': {\r\n-                            display: 'none',\r\n-                        },\r\n-                        '.MuiDataGrid-columnHeaders': {\r\n-                            backgroundColor: '#1976d2',\r\n+                        experimentalFeatures={{ newEditingApi: true }}\r\n+                        disableSelectionOnClick\r\n+                        sx={{\r\n+                            '.MuiDataGrid-columnHeaderTitle': {\r\n+                                // fontWeight: 'bold',\r\n+                                // backgroundColor: '#1976d2',\r\n+                                color: 'white',\r\n+                            },\r\n+                            '.MuiDataGrid-columnSeparator': {\r\n+                                display: 'none',\r\n+                            },\r\n+                            '.MuiDataGrid-columnHeaders': {\r\n+                                backgroundColor: '#1976d2',\r\n+                                borderRadius: 0,\r\n+                            },\r\n                             borderRadius: 0,\r\n-                        },\r\n-                        borderRadius: 0,\r\n-                        color: 'info.main',\r\n-                        // '& .super-app.negative': {\r\n-                        //     backgroundColor: 'rgba(157, 255, 118, 0.49)',\r\n-                        //     color: '#1a3e72',\r\n-                        //     fontWeight: '600',\r\n-                        //   },\r\n-                    }}\r\n-                />\r\n-                <div style={{ width: '600px' }}>\r\n-                    {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n-                    users: {JSON.stringify(users)}\r\n-                </div>\r\n-            </Box>\r\n-            <Dialog\r\n-                open={openDialog}\r\n-            // onClose={handleCloseDialog}\r\n-            >\r\n-                <DialogTitle>Delete</DialogTitle>\r\n-                <DialogContent>\r\n-                    <DialogContentText>Are you sure?</DialogContentText>\r\n-                </DialogContent>\r\n-                <DialogActions>\r\n-                    <Button\r\n-                        variant=\"outlined\"\r\n-                        color=\"primary\"\r\n-                        onClick={handleConfirmDelete}\r\n-                    >\r\n-                        Yes\r\n-                    </Button>\r\n-                    <Button\r\n-                        variant=\"outlined\"\r\n-                        color=\"error\"\r\n-                        onClick={handleCloseDialog}\r\n-                    >\r\n-                        No\r\n-                    </Button>\r\n-                </DialogActions>\r\n-            </Dialog>\r\n+                            color: 'info.main',\r\n+                            // '& .super-app.negative': {\r\n+                            //     backgroundColor: 'rgba(157, 255, 118, 0.49)',\r\n+                            //     color: '#1a3e72',\r\n+                            //     fontWeight: '600',\r\n+                            //   },\r\n+                        }}\r\n+                    />\r\n+                    <div style={{ width: '600px' }}>\r\n+                        {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n+                        users: {JSON.stringify(users)}\r\n+                    </div>\r\n+                </Box>\r\n+                <Dialog\r\n+                    open={openDialog}\r\n+                // onClose={handleCloseDialog}\r\n+                >\r\n+                    <DialogTitle>Delete</DialogTitle>\r\n+                    <DialogContent>\r\n+                        <DialogContentText>Are you sure?</DialogContentText>\r\n+                    </DialogContent>\r\n+                    <DialogActions>\r\n+                        <Button\r\n+                            variant=\"outlined\"\r\n+                            color=\"primary\"\r\n+                            onClick={handleConfirmDelete}\r\n+                        >\r\n+                            Yes\r\n+                        </Button>\r\n+                        <Button\r\n+                            variant=\"outlined\"\r\n+                            color=\"error\"\r\n+                            onClick={handleCloseDialog}\r\n+                        >\r\n+                            No\r\n+                        </Button>\r\n+                    </DialogActions>\r\n+                </Dialog>\r\n+            </ThemeProvider>\r\n         </>\r\n     )\r\n }\r\n"
                },
                {
                    "date": 1659423026423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -442,9 +442,9 @@\n                 const id = params.id\r\n                 const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n                 if (isInEditMode) {\r\n                     return [\r\n-                        <Tooltip title={params.row.isEdited? \"Invalid fields\" : \"Save\" }>\r\n+                        <Tooltip title={params.row.isEdited ? \"Invalid fields\" : \"Save\"}>\r\n                             <Typography>\r\n                                 <GridActionsCellItem\r\n                                     icon={<SaveIcon />}\r\n                                     label=\"Save\"\r\n@@ -498,117 +498,115 @@\n     ]\r\n \r\n     return (\r\n         <>\r\n-            <ThemeProvider theme={theme}>\r\n-                <Box sx={{\r\n-                    height: 405, width: '100%'\r\n-                }}>\r\n-                    <Stack direction=\"row\" alignItems=\"center\" spacing={1} justifyContent=\"end\">\r\n-                        {/* <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+            <Box sx={{\r\n+                height: 405, width: '100%'\r\n+            }}>\r\n+                <Stack direction=\"row\" alignItems=\"center\" spacing={1} justifyContent=\"end\">\r\n+                    {/* <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleAddRow}>\r\n                         New User\r\n                     </Button> */}\r\n-                        {/* <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n+                    {/* <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSaveClick}>\r\n                         Save\r\n                     </Button>\r\n                     <Button color=\"primary\" startIcon={<CancelIcon />} onClick={handleCancelClick}>\r\n                         Cancel\r\n                     </Button> */}\r\n-                    </Stack>\r\n-                    <DataGrid\r\n-                        // onCellEditCommit={handleCommit}\r\n-                        autoHeight\r\n-                        rows={users}\r\n-                        columns={cols}\r\n-                        pageSize={5}\r\n-                        rowsPerPageOptions={[5]}\r\n-                        // checkboxSelection\r\n-                        editMode=\"row\"\r\n-                        editRowsModel={editRowsModel}\r\n-                        // onEditRowsModelChange={handleEditRowsModelChange}\r\n-                        // onRowEditCommit={handleRowEditCommit}\r\n-                        rowModesModel={rowModesModel}\r\n-                        // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n-                        onRowEditStart={handleRowEditStart}\r\n-                        onRowEditStop={handleRowEditStop}\r\n-                        processRowUpdate={processRowUpdate}\r\n+                </Stack>\r\n+                <DataGrid\r\n+                    // onCellEditCommit={handleCommit}\r\n+                    autoHeight\r\n+                    rows={users}\r\n+                    columns={cols}\r\n+                    pageSize={5}\r\n+                    rowsPerPageOptions={[5]}\r\n+                    // checkboxSelection\r\n+                    editMode=\"row\"\r\n+                    editRowsModel={editRowsModel}\r\n+                    // onEditRowsModelChange={handleEditRowsModelChange}\r\n+                    // onRowEditCommit={handleRowEditCommit}\r\n+                    rowModesModel={rowModesModel}\r\n+                    // rowModesModel={{ 3: { mode: GridRowModes.Edit } }}\r\n+                    onRowEditStart={handleRowEditStart}\r\n+                    onRowEditStop={handleRowEditStop}\r\n+                    processRowUpdate={processRowUpdate}\r\n \r\n-                        components={{\r\n-                            Toolbar: () => {\r\n-                                return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n-                                    {/* <GridToolbarColumnsButton /> */}\r\n-                                    <Button startIcon={<AddIcon />} onClick={handleAddRow}>\r\n-                                        New User\r\n-                                    </Button>\r\n-                                    {/* <GridActionsCellItem\r\n+                    components={{\r\n+                        Toolbar: () => {\r\n+                            return (<GridToolbarContainer sx={{ justifyContent: 'flex-end' }}>\r\n+                                {/* <GridToolbarColumnsButton /> */}\r\n+                                <Button startIcon={<AddIcon />} onClick={handleAddRow}>\r\n+                                    New User\r\n+                                </Button>\r\n+                                {/* <GridActionsCellItem\r\n                                     icon={<AddIcon />}\r\n                                     label=\"New User\"\r\n                                     onClick={handleAddRow}\r\n                                     color=\"inherit\"\r\n                                     showInMenu={true}\r\n                                 /> */}\r\n-                                    {/* <GridToolbarExport /> */}\r\n-                                </GridToolbarContainer>)\r\n-                            }\r\n-                        }}\r\n-                        componentsProps={{\r\n-                            toolbar: { setUsers, setRowModesModel },\r\n-                        }}\r\n+                                {/* <GridToolbarExport /> */}\r\n+                            </GridToolbarContainer>)\r\n+                        }\r\n+                    }}\r\n+                    componentsProps={{\r\n+                        toolbar: { setUsers, setRowModesModel },\r\n+                    }}\r\n \r\n-                        experimentalFeatures={{ newEditingApi: true }}\r\n-                        disableSelectionOnClick\r\n-                        sx={{\r\n-                            '.MuiDataGrid-columnHeaderTitle': {\r\n-                                // fontWeight: 'bold',\r\n-                                // backgroundColor: '#1976d2',\r\n-                                color: 'white',\r\n-                            },\r\n-                            '.MuiDataGrid-columnSeparator': {\r\n-                                display: 'none',\r\n-                            },\r\n-                            '.MuiDataGrid-columnHeaders': {\r\n-                                backgroundColor: '#1976d2',\r\n-                                borderRadius: 0,\r\n-                            },\r\n+                    experimentalFeatures={{ newEditingApi: true }}\r\n+                    disableSelectionOnClick\r\n+                    sx={{\r\n+                        '.MuiDataGrid-columnHeaderTitle': {\r\n+                            // fontWeight: 'bold',\r\n+                            // backgroundColor: '#1976d2',\r\n+                            color: 'white',\r\n+                        },\r\n+                        '.MuiDataGrid-columnSeparator': {\r\n+                            display: 'none',\r\n+                        },\r\n+                        '.MuiDataGrid-columnHeaders': {\r\n+                            backgroundColor: '#1976d2',\r\n                             borderRadius: 0,\r\n-                            color: 'info.main',\r\n-                            // '& .super-app.negative': {\r\n-                            //     backgroundColor: 'rgba(157, 255, 118, 0.49)',\r\n-                            //     color: '#1a3e72',\r\n-                            //     fontWeight: '600',\r\n-                            //   },\r\n-                        }}\r\n-                    />\r\n-                    <div style={{ width: '600px' }}>\r\n-                        {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n-                        users: {JSON.stringify(users)}\r\n-                    </div>\r\n-                </Box>\r\n-                <Dialog\r\n-                    open={openDialog}\r\n-                // onClose={handleCloseDialog}\r\n-                >\r\n-                    <DialogTitle>Delete</DialogTitle>\r\n-                    <DialogContent>\r\n-                        <DialogContentText>Are you sure?</DialogContentText>\r\n-                    </DialogContent>\r\n-                    <DialogActions>\r\n-                        <Button\r\n-                            variant=\"outlined\"\r\n-                            color=\"primary\"\r\n-                            onClick={handleConfirmDelete}\r\n-                        >\r\n-                            Yes\r\n-                        </Button>\r\n-                        <Button\r\n-                            variant=\"outlined\"\r\n-                            color=\"error\"\r\n-                            onClick={handleCloseDialog}\r\n-                        >\r\n-                            No\r\n-                        </Button>\r\n-                    </DialogActions>\r\n-                </Dialog>\r\n-            </ThemeProvider>\r\n+                        },\r\n+                        borderRadius: 0,\r\n+                        color: 'info.main',\r\n+                        // '& .super-app.negative': {\r\n+                        //     backgroundColor: 'rgba(157, 255, 118, 0.49)',\r\n+                        //     color: '#1a3e72',\r\n+                        //     fontWeight: '600',\r\n+                        //   },\r\n+                    }}\r\n+                />\r\n+                <div style={{ width: '600px' }}>\r\n+                    {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n+                    users: {JSON.stringify(users)}\r\n+                </div>\r\n+            </Box>\r\n+            <Dialog\r\n+                open={openDialog}\r\n+            // onClose={handleCloseDialog}\r\n+            >\r\n+                <DialogTitle>Delete</DialogTitle>\r\n+                <DialogContent>\r\n+                    <DialogContentText>Are you sure?</DialogContentText>\r\n+                </DialogContent>\r\n+                <DialogActions>\r\n+                    <Button\r\n+                        variant=\"outlined\"\r\n+                        color=\"primary\"\r\n+                        onClick={handleConfirmDelete}\r\n+                    >\r\n+                        Yes\r\n+                    </Button>\r\n+                    <Button\r\n+                        variant=\"outlined\"\r\n+                        color=\"error\"\r\n+                        onClick={handleCloseDialog}\r\n+                    >\r\n+                        No\r\n+                    </Button>\r\n+                </DialogActions>\r\n+            </Dialog>\r\n         </>\r\n     )\r\n }\r\n"
                },
                {
                    "date": 1659423110630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -442,9 +442,9 @@\n                 const id = params.id\r\n                 const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n                 if (isInEditMode) {\r\n                     return [\r\n-                        <Tooltip title={params.row.isEdited ? \"Invalid fields\" : \"Save\"}>\r\n+                        <Tooltip title={params.row.isEdited ? \"Change fields to save\" : \"Save\"}>\r\n                             <Typography>\r\n                                 <GridActionsCellItem\r\n                                     icon={<SaveIcon />}\r\n                                     label=\"Save\"\r\n"
                },
                {
                    "date": 1659423144514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -442,9 +442,9 @@\n                 const id = params.id\r\n                 const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n                 if (isInEditMode) {\r\n                     return [\r\n-                        <Tooltip title={params.row.isEdited ? \"Change fields to save\" : \"Save\"}>\r\n+                        <Tooltip title=\"Save\">\r\n                             <Typography>\r\n                                 <GridActionsCellItem\r\n                                     icon={<SaveIcon />}\r\n                                     label=\"Save\"\r\n"
                },
                {
                    "date": 1659423190412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -477,9 +477,8 @@\n                     <Tooltip title=\"Edit\">\r\n                         <GridActionsCellItem\r\n                             icon={<EditIcon />}\r\n                             label=\"Edit\"\r\n-                            className=\"textPrimary\"\r\n                             onClick={handleEditClick(id)}\r\n                             color=\"primary\"\r\n                         />\r\n                     </Tooltip>,\r\n"
                },
                {
                    "date": 1659423221557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -489,9 +489,8 @@\n                             onClick={handleDeleteClick(id)}\r\n                             color=\"error\"\r\n                         />\r\n                     </Tooltip>,\r\n-\r\n                 ]\r\n             },\r\n         },\r\n     ]\r\n"
                },
                {
                    "date": 1659423499300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -585,9 +585,9 @@\n             // onClose={handleCloseDialog}\r\n             >\r\n                 <DialogTitle>Delete</DialogTitle>\r\n                 <DialogContent>\r\n-                    <DialogContentText>Are you sure?</DialogContentText>\r\n+                    <DialogContentText>This operation cannot be undone. Are you sure?</DialogContentText>\r\n                 </DialogContent>\r\n                 <DialogActions>\r\n                     <Button\r\n                         variant=\"outlined\"\r\n"
                },
                {
                    "date": 1659423534484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -600,9 +600,9 @@\n                         variant=\"outlined\"\r\n                         color=\"error\"\r\n                         onClick={handleCloseDialog}\r\n                     >\r\n-                        No\r\n+                        Cancel\r\n                     </Button>\r\n                 </DialogActions>\r\n             </Dialog>\r\n         </>\r\n"
                },
                {
                    "date": 1659424549797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,16 +386,16 @@\n                 isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n                     : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n                 return { ...params.props, error: isInValid };\r\n             },\r\n-            cellClassName: (params: GridCellParams<number>) => {\r\n-                if (params.value === null) {\r\n-                    return '';\r\n-                }\r\n+            cellClassName: (params: GridCellParams) => {\r\n+                // if (params.value === null) {\r\n+                //     return '';\r\n+                // }\r\n \r\n                 return clsx('super-app', {\r\n-                    negative: params.value < 0,\r\n-                    positive: params.value > 0,\r\n+                    correctedInputs: params.value !== \"\",\r\n+                    inValidInputs: params.value === \"\",\r\n                 });\r\n             },\r\n         },\r\n         {\r\n@@ -567,13 +567,23 @@\n                             borderRadius: 0,\r\n                         },\r\n                         borderRadius: 0,\r\n                         color: 'info.main',\r\n-                        // '& .super-app.negative': {\r\n-                        //     backgroundColor: 'rgba(157, 255, 118, 0.49)',\r\n-                        //     color: '#1a3e72',\r\n-                        //     fontWeight: '600',\r\n-                        //   },\r\n+                        '& .super-app-theme--cell': {\r\n+                            backgroundColor: 'rgba(224, 183, 60, 0.55)',\r\n+                            color: '#1a3e72',\r\n+                            fontWeight: '100',\r\n+                        },\r\n+                        '& .super-app.correctInputs': {\r\n+                            backgroundColor: 'rgba(157, 255, 118, 0.49)',\r\n+                            color: '#1a3e72',\r\n+                            fontWeight: '600',\r\n+                        },\r\n+                        '& .super-app.invalidInputs': {\r\n+                            // backgroundColor: '#d47483',\r\n+                            color: '#fc0303',\r\n+                            fontWeight: '800',\r\n+                        },\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659424592076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -578,9 +578,9 @@\n                             color: '#1a3e72',\r\n                             fontWeight: '600',\r\n                         },\r\n                         '& .super-app.invalidInputs': {\r\n-                            // backgroundColor: '#d47483',\r\n+                            backgroundColor: '#d47483',\r\n                             color: '#fc0303',\r\n                             fontWeight: '800',\r\n                         },\r\n                     }}\r\n"
                },
                {
                    "date": 1659424634967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -567,13 +567,13 @@\n                             borderRadius: 0,\r\n                         },\r\n                         borderRadius: 0,\r\n                         color: 'info.main',\r\n-                        '& .super-app-theme--cell': {\r\n-                            backgroundColor: 'rgba(224, 183, 60, 0.55)',\r\n-                            color: '#1a3e72',\r\n-                            fontWeight: '100',\r\n-                        },\r\n+                        // '& .super-app-theme--cell': {\r\n+                        //     backgroundColor: 'rgba(224, 183, 60, 0.55)',\r\n+                        //     color: '#1a3e72',\r\n+                        //     fontWeight: '100',\r\n+                        // },\r\n                         '& .super-app.correctInputs': {\r\n                             backgroundColor: 'rgba(157, 255, 118, 0.49)',\r\n                             color: '#1a3e72',\r\n                             fontWeight: '600',\r\n"
                },
                {
                    "date": 1659424931396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,9 +386,9 @@\n                 isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n                     : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n                 return { ...params.props, error: isInValid };\r\n             },\r\n-            cellClassName: (params: GridCellParams) => {\r\n+            cellClassName: (params: GridCellParams<number>) => {\r\n                 // if (params.value === null) {\r\n                 //     return '';\r\n                 // }\r\n \r\n"
                },
                {
                    "date": 1659424967450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,9 +386,9 @@\n                 isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n                     : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n                 return { ...params.props, error: isInValid };\r\n             },\r\n-            cellClassName: (params: GridCellParams<number>) => {\r\n+            cellClassName: (params: GridCellParams<String>) => {\r\n                 // if (params.value === null) {\r\n                 //     return '';\r\n                 // }\r\n \r\n"
                },
                {
                    "date": 1659425014823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,9 +390,9 @@\n             cellClassName: (params: GridCellParams<String>) => {\r\n                 // if (params.value === null) {\r\n                 //     return '';\r\n                 // }\r\n-\r\n+                console.log('params here', params)\r\n                 return clsx('super-app', {\r\n                     correctedInputs: params.value !== \"\",\r\n                     inValidInputs: params.value === \"\",\r\n                 });\r\n"
                },
                {
                    "date": 1659425566273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,10 +392,10 @@\n                 //     return '';\r\n                 // }\r\n                 console.log('params here', params)\r\n                 return clsx('super-app', {\r\n-                    correctedInputs: params.value !== \"\",\r\n-                    inValidInputs: params.value === \"\",\r\n+                    correctedInputs: params.value !== null,\r\n+                    inValidInputs: params.value === null,\r\n                 });\r\n             },\r\n         },\r\n         {\r\n"
                },
                {
                    "date": 1659425718246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,9 +390,9 @@\n             cellClassName: (params: GridCellParams<String>) => {\r\n                 // if (params.value === null) {\r\n                 //     return '';\r\n                 // }\r\n-                console.log('params here', params)\r\n+                console.log('params here', params.value)\r\n                 return clsx('super-app', {\r\n                     correctedInputs: params.value !== null,\r\n                     inValidInputs: params.value === null,\r\n                 });\r\n"
                },
                {
                    "date": 1659426456808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,18 +386,8 @@\n                 isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n                     : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n                 return { ...params.props, error: isInValid };\r\n             },\r\n-            cellClassName: (params: GridCellParams<String>) => {\r\n-                // if (params.value === null) {\r\n-                //     return '';\r\n-                // }\r\n-                console.log('params here', params.value)\r\n-                return clsx('super-app', {\r\n-                    correctedInputs: params.value !== null,\r\n-                    inValidInputs: params.value === null,\r\n-                });\r\n-            },\r\n         },\r\n         {\r\n             field: 'lastName', headerName: 'Last name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n"
                },
                {
                    "date": 1659426594032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -562,19 +562,25 @@\n                         //     backgroundColor: 'rgba(224, 183, 60, 0.55)',\r\n                         //     color: '#1a3e72',\r\n                         //     fontWeight: '100',\r\n                         // },\r\n-                        '& .super-app.correctInputs': {\r\n+                        '& .correctInputs': {\r\n                             backgroundColor: 'rgba(157, 255, 118, 0.49)',\r\n                             color: '#1a3e72',\r\n                             fontWeight: '600',\r\n                         },\r\n-                        '& .super-app.invalidInputs': {\r\n+                        '& .invalidInputs': {\r\n                             backgroundColor: '#d47483',\r\n                             color: '#fc0303',\r\n                             fontWeight: '800',\r\n                         },\r\n                     }}\r\n+                    getCellClassName={(params: GridCellParams<number>) => {\r\n+                        if (params.value == null) {\r\n+                          return 'invalidInputs';\r\n+                        }\r\n+                        return '.correctInputs';\r\n+                    }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n                     users: {JSON.stringify(users)}\r\n"
                },
                {
                    "date": 1659426672319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -573,10 +573,10 @@\n                             color: '#fc0303',\r\n                             fontWeight: '800',\r\n                         },\r\n                     }}\r\n-                    getCellClassName={(params: GridCellParams<number>) => {\r\n-                        if (params.value == null) {\r\n+                    getCellClassName={(params: GridCellParams<String>) => {\r\n+                        if (params.value === \"\") {\r\n                           return 'invalidInputs';\r\n                         }\r\n                         return '.correctInputs';\r\n                     }}\r\n"
                },
                {
                    "date": 1659427085590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -573,13 +573,13 @@\n                             color: '#fc0303',\r\n                             fontWeight: '800',\r\n                         },\r\n                     }}\r\n-                    getCellClassName={(params: GridCellParams<String>) => {\r\n+                    getCellClassName={(params: GridCellParams) => {\r\n                         if (params.value === \"\") {\r\n                           return 'invalidInputs';\r\n                         }\r\n-                        return '.correctInputs';\r\n+                        return 'correctInputs';\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659427619560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,8 +370,12 @@\n \r\n         return updatedRow;\r\n     };\r\n \r\n+    const getCellTheme = (params) => {\r\n+        return params.celTheme\r\n+    }\r\n+\r\n     // const handleDeleteClickTest = (e) => {\r\n     //     console.log('e', e);\r\n     // }\r\n \r\n@@ -382,10 +386,10 @@\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 isInValid = !validateTextInput('firstName', params);\r\n                 console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n                 const id = params.id\r\n-                isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n-                    : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n+                isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true, cellTheme: 'validInputs' } : e))\r\n+                    : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false, cellTheme: 'inValidInputs' } : e))\r\n                 return { ...params.props, error: isInValid };\r\n             },\r\n         },\r\n         {\r\n@@ -562,25 +566,20 @@\n                         //     backgroundColor: 'rgba(224, 183, 60, 0.55)',\r\n                         //     color: '#1a3e72',\r\n                         //     fontWeight: '100',\r\n                         // },\r\n-                        '& .correctInputs': {\r\n+                        '& .validInputs': {\r\n                             backgroundColor: 'rgba(157, 255, 118, 0.49)',\r\n                             color: '#1a3e72',\r\n                             fontWeight: '600',\r\n                         },\r\n-                        '& .invalidInputs': {\r\n+                        '& .inValidInputs': {\r\n                             backgroundColor: '#d47483',\r\n                             color: '#fc0303',\r\n                             fontWeight: '800',\r\n                         },\r\n                     }}\r\n-                    getCellClassName={(params: GridCellParams) => {\r\n-                        if (params.value === \"\") {\r\n-                          return 'invalidInputs';\r\n-                        }\r\n-                        return 'correctInputs';\r\n-                    }}\r\n+                    getCellClassName={getCellTheme}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n                     users: {JSON.stringify(users)}\r\n"
                },
                {
                    "date": 1659427652509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,8 +371,10 @@\n         return updatedRow;\r\n     };\r\n \r\n     const getCellTheme = (params) => {\r\n+        console.log('theme', params.cellTheme);\r\n+        \r\n         return params.celTheme\r\n     }\r\n \r\n     // const handleDeleteClickTest = (e) => {\r\n"
                },
                {
                    "date": 1659427707884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,9 +371,9 @@\n         return updatedRow;\r\n     };\r\n \r\n     const getCellTheme = (params) => {\r\n-        console.log('theme', params.cellTheme);\r\n+        console.log('theme', params);\r\n         \r\n         return params.celTheme\r\n     }\r\n \r\n"
                },
                {
                    "date": 1659427864041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,11 +371,11 @@\n         return updatedRow;\r\n     };\r\n \r\n     const getCellTheme = (params) => {\r\n-        console.log('theme', params);\r\n+        console.log('theme', params.row.cellTheme);\r\n         \r\n-        return params.celTheme\r\n+        return params.row.celTheme\r\n     }\r\n \r\n     // const handleDeleteClickTest = (e) => {\r\n     //     console.log('e', e);\r\n"
                },
                {
                    "date": 1659427895723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,10 +388,10 @@\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 isInValid = !validateTextInput('firstName', params);\r\n                 console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n                 const id = params.id\r\n-                isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true, cellTheme: 'validInputs' } : e))\r\n-                    : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false, cellTheme: 'inValidInputs' } : e))\r\n+                isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true, cellTheme: 'inValidInputs' } : e))\r\n+                    : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false, cellTheme: 'validInputs' } : e))\r\n                 return { ...params.props, error: isInValid };\r\n             },\r\n         },\r\n         {\r\n"
                },
                {
                    "date": 1659427941702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,9 +371,9 @@\n         return updatedRow;\r\n     };\r\n \r\n     const getCellTheme = (params) => {\r\n-        console.log('theme', params.row.cellTheme);\r\n+        console.log('>>>theme', params.row.cellTheme);\r\n         \r\n         return params.row.celTheme\r\n     }\r\n \r\n"
                },
                {
                    "date": 1659427999840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -579,9 +579,9 @@\n                             color: '#fc0303',\r\n                             fontWeight: '800',\r\n                         },\r\n                     }}\r\n-                    getCellClassName={getCellTheme}\r\n+                    getCellClassName={'inValidInputs'}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n                     users: {JSON.stringify(users)}\r\n"
                },
                {
                    "date": 1659428450175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -579,9 +579,11 @@\n                             color: '#fc0303',\r\n                             fontWeight: '800',\r\n                         },\r\n                     }}\r\n-                    getCellClassName={'inValidInputs'}\r\n+                    getCellClassName={params => {\r\n+                        return params.value.length > 5? \"validInputs\" : \"inValidInputs\"\r\n+                    }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n                     users: {JSON.stringify(users)}\r\n"
                },
                {
                    "date": 1659428500267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -580,9 +580,9 @@\n                             fontWeight: '800',\r\n                         },\r\n                     }}\r\n                     getCellClassName={params => {\r\n-                        return params.value.length > 5? \"validInputs\" : \"inValidInputs\"\r\n+                        return params.value? \"validInputs\" : \"inValidInputs\"\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659428545400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -580,9 +580,9 @@\n                             fontWeight: '800',\r\n                         },\r\n                     }}\r\n                     getCellClassName={params => {\r\n-                        return params.value? \"validInputs\" : \"inValidInputs\"\r\n+                        return params.value > 2? \"validInputs\" : \"inValidInputs\"\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659428602417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -580,9 +580,9 @@\n                             fontWeight: '800',\r\n                         },\r\n                     }}\r\n                     getCellClassName={params => {\r\n-                        return params.value > 2? \"validInputs\" : \"inValidInputs\"\r\n+                        return params.value !== \"\"? \"validInputs\" : \"inValidInputs\"\r\n                     }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n"
                },
                {
                    "date": 1659428643744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -569,9 +569,9 @@\n                         //     color: '#1a3e72',\r\n                         //     fontWeight: '100',\r\n                         // },\r\n                         '& .validInputs': {\r\n-                            backgroundColor: 'rgba(157, 255, 118, 0.49)',\r\n+                            backgroundColor: '#1976d2',\r\n                             color: '#1a3e72',\r\n                             fontWeight: '600',\r\n                         },\r\n                         '& .inValidInputs': {\r\n"
                },
                {
                    "date": 1659429465601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -579,11 +579,11 @@\n                             color: '#fc0303',\r\n                             fontWeight: '800',\r\n                         },\r\n                     }}\r\n-                    getCellClassName={params => {\r\n-                        return params.value !== \"\"? \"validInputs\" : \"inValidInputs\"\r\n-                    }}\r\n+                    // getCellClassName={params => {\r\n+                    //     return params.value !== \"\"? \"validInputs\" : \"inValidInputs\"\r\n+                    // }}\r\n                 />\r\n                 <div style={{ width: '600px' }}>\r\n                     {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n                     users: {JSON.stringify(users)}\r\n"
                },
                {
                    "date": 1659429478740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -568,18 +568,18 @@\n                         //     backgroundColor: 'rgba(224, 183, 60, 0.55)',\r\n                         //     color: '#1a3e72',\r\n                         //     fontWeight: '100',\r\n                         // },\r\n-                        '& .validInputs': {\r\n-                            backgroundColor: '#1976d2',\r\n-                            color: '#1a3e72',\r\n-                            fontWeight: '600',\r\n-                        },\r\n-                        '& .inValidInputs': {\r\n-                            backgroundColor: '#d47483',\r\n-                            color: '#fc0303',\r\n-                            fontWeight: '800',\r\n-                        },\r\n+                        // '& .validInputs': {\r\n+                        //     backgroundColor: '#1976d2',\r\n+                        //     color: '#1a3e72',\r\n+                        //     fontWeight: '600',\r\n+                        // },\r\n+                        // '& .inValidInputs': {\r\n+                        //     backgroundColor: '#d47483',\r\n+                        //     color: '#fc0303',\r\n+                        //     fontWeight: '800',\r\n+                        // },\r\n                     }}\r\n                     // getCellClassName={params => {\r\n                     //     return params.value !== \"\"? \"validInputs\" : \"inValidInputs\"\r\n                     // }}\r\n"
                },
                {
                    "date": 1659429524704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,10 +388,10 @@\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 isInValid = !validateTextInput('firstName', params);\r\n                 console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n                 const id = params.id\r\n-                isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true, cellTheme: 'inValidInputs' } : e))\r\n-                    : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false, cellTheme: 'validInputs' } : e))\r\n+                isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n+                    : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n                 return { ...params.props, error: isInValid };\r\n             },\r\n         },\r\n         {\r\n"
                },
                {
                    "date": 1659430085594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n \r\n     if (status === 'false') {\r\n-        // router.push('/user/sign-in')\r\n+        router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n"
                },
                {
                    "date": 1659433938745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -360,8 +360,11 @@\n         setIsDisableBtn(true)\r\n         if (editedRow?.isNew) {\r\n             setUsers(users.filter((row) => row.id !== id));\r\n         }\r\n+        else {\r\n+            setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n+        }\r\n     };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n"
                },
                {
                    "date": 1659435266413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n \r\n     if (status === 'false') {\r\n-        router.push('/user/sign-in')\r\n+        setTimeout(() => router.push('/user/sign-in'), 1000)\r\n         console.log('not sign in')\r\n     }\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n"
                },
                {
                    "date": 1659435701648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,10 @@\n     const [users, setUsers, status] = useAppContext()\r\n     const router = useRouter()\r\n \r\n     if (status === 'false') {\r\n-        setTimeout(() => router.push('/user/sign-in'), 1000)\r\n+        // setTimeout(() => router.push('/user/sign-in'), 200)\r\n+        router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n"
                },
                {
                    "date": 1659436951406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n     const router = useRouter()\r\n \r\n     if (status === 'false') {\r\n         // setTimeout(() => router.push('/user/sign-in'), 200)\r\n-        router.push('/user/sign-in')\r\n+        // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n"
                },
                {
                    "date": 1659437270298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,9 @@\n     lastName: '',\r\n     email: '',\r\n     password: 'Abc@1234',\r\n     isNew: true,\r\n+    isEdited = false,\r\n }\r\n \r\n function validateTextInput(name: String, props: GridPreProcessEditCellProps) {\r\n     console.log('props', props);\r\n"
                },
                {
                    "date": 1659437276653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     lastName: '',\r\n     email: '',\r\n     password: 'Abc@1234',\r\n     isNew: true,\r\n-    isEdited = false,\r\n+    isEdited: false,\r\n }\r\n \r\n function validateTextInput(name: String, props: GridPreProcessEditCellProps) {\r\n     console.log('props', props);\r\n"
                },
                {
                    "date": 1659437377690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     lastName: '',\r\n     email: '',\r\n     password: 'Abc@1234',\r\n     isNew: true,\r\n-    isEdited: false,\r\n+    isEdited: true,\r\n }\r\n \r\n function validateTextInput(name: String, props: GridPreProcessEditCellProps) {\r\n     console.log('props', props);\r\n"
                },
                {
                    "date": 1659495259278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     const router = useRouter()\r\n \r\n     if (status === 'false') {\r\n         // setTimeout(() => router.push('/user/sign-in'), 200)\r\n-        // router.push('/user/sign-in')\r\n+        router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n"
                },
                {
                    "date": 1659495488792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -391,9 +391,9 @@\n         {\r\n             field: 'firstName', headerName: 'First name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 isInValid = !validateTextInput('firstName', params);\r\n-                console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n+                // console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n                 const id = params.id\r\n                 isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n                     : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n                 return { ...params.props, error: isInValid };\r\n@@ -402,9 +402,9 @@\n         {\r\n             field: 'lastName', headerName: 'Last name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 isInValid = !validateTextInput('lastName', params);\r\n-                console.log('isInValid', isInValid);                //<<<<<<<<<<<<<<<<<<<353\r\n+                // console.log('isInValid', isInValid);                //<<<<<<<<<<<<<<<<<<<353\r\n                 const id = params.id\r\n                 isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n                     : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n                 return { ...params.props, error: isInValid };\r\n@@ -414,9 +414,9 @@\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n                 // const isValid = params.props.value.length > 0;\r\n                 isInValid = !validateTextInput('email', params);\r\n-                console.log('isInValid', isInValid);                    //<<<<<<<<<<<<<<<<<<<362\r\n+                // console.log('isInValid', isInValid);                    //<<<<<<<<<<<<<<<<<<<362\r\n                 const id = params.id\r\n                 isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n                     : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n \r\n"
                },
                {
                    "date": 1659496682225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,8 +130,9 @@\n         // setTimeout(() => router.push('/user/sign-in'), 200)\r\n         router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n+    setUsers(users.filter((row) => row?.isNew !== true))\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n     const [selectedId, setSelectedId] = useState([])\r\n \r\n"
                },
                {
                    "date": 1659496800493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,10 +130,12 @@\n         // setTimeout(() => router.push('/user/sign-in'), 200)\r\n         router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n-    setUsers(users.filter((row) => row?.isNew !== true))\r\n \r\n+    const tmpUsers = users.filter((row) => row?.isNew !== true)\r\n+    // setUsers(users.filter((row) => row?.isNew !== true))\r\n+\r\n     const [openDialog, setOpenDialog] = useState(false)\r\n     const [selectedId, setSelectedId] = useState([])\r\n \r\n     let isInValid = false\r\n"
                },
                {
                    "date": 1659496823293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n         console.log('not sign in')\r\n     }\r\n \r\n     const tmpUsers = users.filter((row) => row?.isNew !== true)\r\n-    // setUsers(users.filter((row) => row?.isNew !== true))\r\n+    setUsers(_.cloneDeep(tmpUsers))\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n     const [selectedId, setSelectedId] = useState([])\r\n \r\n"
                },
                {
                    "date": 1659497155693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,10 +131,10 @@\n         router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n-    const tmpUsers = users.filter((row) => row?.isNew !== true)\r\n-    setUsers(_.cloneDeep(tmpUsers))\r\n+    // const tmpUsers = users.filter((row) => row?.isNew !== true)\r\n+    // setUsers(_.cloneDeep(tmpUsers))\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n     const [selectedId, setSelectedId] = useState([])\r\n \r\n"
                },
                {
                    "date": 1659498118032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n         console.log('not sign in')\r\n     }\r\n \r\n     // const tmpUsers = users.filter((row) => row?.isNew !== true)\r\n-    // setUsers(_.cloneDeep(tmpUsers))\r\n+    const tmpUsers = _.cloneDeep(users)\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n     const [selectedId, setSelectedId] = useState([])\r\n \r\n@@ -308,18 +308,20 @@\n \r\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n         initUser.id = _.cloneDeep(newId)\r\n-        setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n+        // setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n+        tmpUsers.unshift(_.cloneDeep(initUser))\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n         }));\r\n     }\r\n \r\n     const handleEditClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n-        setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n+        // setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n+        tmpUsers.map(e => e.id === id ? { ...e, isEdited: true } : e)\r\n     };\r\n \r\n     const handleSaveClick = (params: GridRowParams) => () => {\r\n         const id = params.id\r\n@@ -332,9 +334,10 @@\n         // })\r\n         // tmpState[0].isNew = false\r\n         // setUsers(_.cloneDeep(tmpState))\r\n         isInValid ? setIsDisableBtn(true) : setIsDisableBtn(false)\r\n-        setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isNew: false } : e))\r\n+        tmpUsers.map(e => e.id === id ? { ...e, isNew: false } : e)\r\n+        setUsers(tmpUsers)\r\n     };\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n         setOpenDialog(true);\r\n@@ -342,9 +345,10 @@\n         setSelectedId(prevState => [...prevState, id])\r\n     };\r\n \r\n     const handleConfirmDelete = () => {\r\n-        setUsers(users.filter((row) => row.id !== selectedId[0]));\r\n+        tmpUsers.filter((row) => row.id !== selectedId[0])\r\n+        setUsers(tmpUsers);\r\n         handleCloseDialog()\r\n     };\r\n \r\n     const handleCloseDialog = () => {\r\n@@ -360,15 +364,17 @@\n             ...rowModesModel,\r\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n         });\r\n \r\n-        const editedRow = users.find((row) => row.id === id);\r\n+        const editedRow = tmpUsers.find((row) => row.id === id);\r\n         setIsDisableBtn(true)\r\n         if (editedRow?.isNew) {\r\n-            setUsers(users.filter((row) => row.id !== id));\r\n+            tmpUsers.filter((row) => row.id !== id)\r\n+            setUsers(tmpUsers);\r\n         }\r\n         else {\r\n-            setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n+            tmpUsers.map(e => e.id === id ? { ...e, isEdited: false } : e)\r\n+            setUsers(tmpUsers)\r\n         }\r\n     };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n@@ -517,9 +523,9 @@\n                 </Stack>\r\n                 <DataGrid\r\n                     // onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n-                    rows={users}\r\n+                    rows={tmpUsers}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     // checkboxSelection\r\n"
                },
                {
                    "date": 1659498147974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -379,9 +379,10 @@\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n         // console.log('updateRow', updatedRow);\r\n-        setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+        tmpUsers.map((row) => (row.id === newRow.id ? updatedRow : row))\r\n+        setUsers(tmpUsers);\r\n \r\n         return updatedRow;\r\n     };\r\n \r\n"
                },
                {
                    "date": 1659498432742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,8 +309,10 @@\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n         initUser.id = _.cloneDeep(newId)\r\n         // setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n+        console.log('tmpUsers', tmpUsers);\r\n+        \r\n         tmpUsers.unshift(_.cloneDeep(initUser))\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n"
                },
                {
                    "date": 1659498447311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     const router = useRouter()\r\n \r\n     if (status === 'false') {\r\n         // setTimeout(() => router.push('/user/sign-in'), 200)\r\n-        router.push('/user/sign-in')\r\n+        // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n     // const tmpUsers = users.filter((row) => row?.isNew !== true)\r\n"
                },
                {
                    "date": 1659498510695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n         initUser.id = _.cloneDeep(newId)\r\n         // setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n-        console.log('tmpUsers', tmpUsers);\r\n+        console.log('new', initUser, 'tmpUsers', tmpUsers);\r\n         \r\n         tmpUsers.unshift(_.cloneDeep(initUser))\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n"
                },
                {
                    "date": 1659498539091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n         initUser.id = _.cloneDeep(newId)\r\n         // setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n         console.log('new', initUser, 'tmpUsers', tmpUsers);\r\n         \r\n-        tmpUsers.unshift(_.cloneDeep(initUser))\r\n+        tmpUsers.push(_.cloneDeep(initUser))\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n         }));\r\n"
                },
                {
                    "date": 1659498644122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,13 +307,13 @@\n     const [isDisableBtn, setIsDisableBtn] = useState(true)\r\n \r\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n-        initUser.id = _.cloneDeep(newId)\r\n+        // initUser.id = _.cloneDeep(newId)\r\n         // setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n         console.log('new', initUser, 'tmpUsers', tmpUsers);\r\n         \r\n-        tmpUsers.push(_.cloneDeep(initUser))\r\n+        tmpUsers.push({...initUser, id: _.cloneDeep(newId)})\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n         }));\r\n"
                },
                {
                    "date": 1659498670753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n         // initUser.id = _.cloneDeep(newId)\r\n         // setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n         console.log('new', initUser, 'tmpUsers', tmpUsers);\r\n         \r\n-        tmpUsers.push({...initUser, id: _.cloneDeep(newId)})\r\n+        tmpUsers.push(initUser)\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n         }));\r\n"
                },
                {
                    "date": 1659498712616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n         console.log('not sign in')\r\n     }\r\n \r\n     // const tmpUsers = users.filter((row) => row?.isNew !== true)\r\n-    const tmpUsers = _.cloneDeep(users)\r\n+    let tmpUsers = _.cloneDeep(users)\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n     const [selectedId, setSelectedId] = useState([])\r\n \r\n"
                },
                {
                    "date": 1659498819238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n         // initUser.id = _.cloneDeep(newId)\r\n         // setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n         console.log('new', initUser, 'tmpUsers', tmpUsers);\r\n         \r\n-        tmpUsers.push(initUser)\r\n+        tmpUsers = [{...initUser, id: _.cloneDeep(newId)}, ...tmpUsers]\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n         }));\r\n"
                },
                {
                    "date": 1659498886472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,13 +307,13 @@\n     const [isDisableBtn, setIsDisableBtn] = useState(true)\r\n \r\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n-        // initUser.id = _.cloneDeep(newId)\r\n+        initUser.id = _.cloneDeep(newId)\r\n         // setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n         console.log('new', initUser, 'tmpUsers', tmpUsers);\r\n         \r\n-        tmpUsers = [{...initUser, id: _.cloneDeep(newId)}, ...tmpUsers]\r\n+        tmpUsers = [initUser, ...tmpUsers]\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n         }));\r\n"
                },
                {
                    "date": 1659498971177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,14 +127,14 @@\n     const router = useRouter()\r\n \r\n     if (status === 'false') {\r\n         // setTimeout(() => router.push('/user/sign-in'), 200)\r\n-        // router.push('/user/sign-in')\r\n+        router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n     // const tmpUsers = users.filter((row) => row?.isNew !== true)\r\n-    let tmpUsers = _.cloneDeep(users)\r\n+    const tmpUsers = _.cloneDeep(users)\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n     const [selectedId, setSelectedId] = useState([])\r\n \r\n@@ -309,21 +309,18 @@\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n         initUser.id = _.cloneDeep(newId)\r\n         // setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n-        console.log('new', initUser, 'tmpUsers', tmpUsers);\r\n-        \r\n-        tmpUsers = [initUser, ...tmpUsers]\r\n+        tmpUsers.unshift(_.cloneDeep(initUser))\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n         }));\r\n     }\r\n \r\n     const handleEditClick = (id: GridRowId) => () => {\r\n         setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n-        // setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n-        tmpUsers.map(e => e.id === id ? { ...e, isEdited: true } : e)\r\n+        setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n     };\r\n \r\n     const handleSaveClick = (params: GridRowParams) => () => {\r\n         const id = params.id\r\n@@ -336,10 +333,9 @@\n         // })\r\n         // tmpState[0].isNew = false\r\n         // setUsers(_.cloneDeep(tmpState))\r\n         isInValid ? setIsDisableBtn(true) : setIsDisableBtn(false)\r\n-        tmpUsers.map(e => e.id === id ? { ...e, isNew: false } : e)\r\n-        setUsers(tmpUsers)\r\n+        setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isNew: false } : e))\r\n     };\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n         setOpenDialog(true);\r\n@@ -347,10 +343,9 @@\n         setSelectedId(prevState => [...prevState, id])\r\n     };\r\n \r\n     const handleConfirmDelete = () => {\r\n-        tmpUsers.filter((row) => row.id !== selectedId[0])\r\n-        setUsers(tmpUsers);\r\n+        setUsers(users.filter((row) => row.id !== selectedId[0]));\r\n         handleCloseDialog()\r\n     };\r\n \r\n     const handleCloseDialog = () => {\r\n@@ -366,25 +361,22 @@\n             ...rowModesModel,\r\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n         });\r\n \r\n-        const editedRow = tmpUsers.find((row) => row.id === id);\r\n+        const editedRow = users.find((row) => row.id === id);\r\n         setIsDisableBtn(true)\r\n         if (editedRow?.isNew) {\r\n-            tmpUsers.filter((row) => row.id !== id)\r\n-            setUsers(tmpUsers);\r\n+            setUsers(users.filter((row) => row.id !== id));\r\n         }\r\n         else {\r\n-            tmpUsers.map(e => e.id === id ? { ...e, isEdited: false } : e)\r\n-            setUsers(tmpUsers)\r\n+            setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n         }\r\n     };\r\n \r\n     const processRowUpdate = (newRow) => {\r\n         const updatedRow = { ...newRow };\r\n         // console.log('updateRow', updatedRow);\r\n-        tmpUsers.map((row) => (row.id === newRow.id ? updatedRow : row))\r\n-        setUsers(tmpUsers);\r\n+        setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n \r\n         return updatedRow;\r\n     };\r\n \r\n@@ -526,9 +518,9 @@\n                 </Stack>\r\n                 <DataGrid\r\n                     // onCellEditCommit={handleCommit}\r\n                     autoHeight\r\n-                    rows={tmpUsers}\r\n+                    rows={users}\r\n                     columns={cols}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5]}\r\n                     // checkboxSelection\r\n"
                },
                {
                    "date": 1659498983740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     const router = useRouter()\r\n \r\n     if (status === 'false') {\r\n         // setTimeout(() => router.push('/user/sign-in'), 200)\r\n-        router.push('/user/sign-in')\r\n+        // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n     // const tmpUsers = users.filter((row) => row?.isNew !== true)\r\n"
                },
                {
                    "date": 1659499018386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,14 +127,14 @@\n     const router = useRouter()\r\n \r\n     if (status === 'false') {\r\n         // setTimeout(() => router.push('/user/sign-in'), 200)\r\n-        // router.push('/user/sign-in')\r\n+        router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n     // const tmpUsers = users.filter((row) => row?.isNew !== true)\r\n-    const tmpUsers = _.cloneDeep(users)\r\n+    // setUsers(_.cloneDeep(tmpUsers))\r\n \r\n     const [openDialog, setOpenDialog] = useState(false)\r\n     const [selectedId, setSelectedId] = useState([])\r\n \r\n@@ -308,10 +308,9 @@\n \r\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n         initUser.id = _.cloneDeep(newId)\r\n-        // setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n-        tmpUsers.unshift(_.cloneDeep(initUser))\r\n+        setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n         }));\r\n"
                },
                {
                    "date": 1659499024213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     const router = useRouter()\r\n \r\n     if (status === 'false') {\r\n         // setTimeout(() => router.push('/user/sign-in'), 200)\r\n-        router.push('/user/sign-in')\r\n+        // router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n     // const tmpUsers = users.filter((row) => row?.isNew !== true)\r\n"
                },
                {
                    "date": 1659499298216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     const router = useRouter()\r\n \r\n     if (status === 'false') {\r\n         // setTimeout(() => router.push('/user/sign-in'), 200)\r\n-        // router.push('/user/sign-in')\r\n+        router.push('/user/sign-in')\r\n         console.log('not sign in')\r\n     }\r\n \r\n     // const tmpUsers = users.filter((row) => row?.isNew !== true)\r\n"
                },
                {
                    "date": 1659499365062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,22 @@\n import _ from 'lodash'\r\n-import { useCallback, useEffect, useMemo, useState } from 'react';\r\n-import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridCellParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridPreProcessEditCellProps, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid';\r\n-import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack, ThemeProvider, Tooltip } from '@mui/material';\r\n-import Button from '@mui/material/Button';\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\n-import SaveIcon from '@mui/icons-material/Save';\r\n-import CancelIcon from '@mui/icons-material/Close';\r\n+import { useCallback, useEffect, useMemo, useState } from 'react'\r\n+import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridCellParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridPreProcessEditCellProps, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid'\r\n+import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack, ThemeProvider, Tooltip } from '@mui/material'\r\n+import Button from '@mui/material/Button'\r\n+import AddIcon from '@mui/icons-material/Add'\r\n+import EditIcon from '@mui/icons-material/Edit'\r\n+import DeleteIcon from '@mui/icons-material/DeleteOutlined'\r\n+import SaveIcon from '@mui/icons-material/Save'\r\n+import CancelIcon from '@mui/icons-material/Close'\r\n \r\n-import { useAppContext } from '../../context/AppContext';\r\n-import { useRouter } from 'next/router';\r\n-import { makeStyles } from '@material-ui/styles';\r\n-import { createTheme } from '@mui/system';\r\n-import Typography from '@mui/material/Typography';\r\n-import clsx from 'clsx';\r\n-import { truncate } from 'fs/promises';\r\n+import { useAppContext } from '../../context/AppContext'\r\n+import { useRouter } from 'next/router'\r\n+import { makeStyles } from '@material-ui/styles'\r\n+import { createTheme } from '@mui/system'\r\n+import Typography from '@mui/material/Typography'\r\n+import clsx from 'clsx'\r\n+import { truncate } from 'fs/promises'\r\n \r\n \r\n // const useStyles = makeStyles({\r\n //     headerCell: {\r\n@@ -31,9 +31,9 @@\n //       '&:last-child td, &:last-child th': {\r\n //         border: 0,\r\n //       },\r\n //     },\r\n-//   });\r\n+//   })\r\n \r\n \r\n const theme = createTheme({\r\n     palette: {\r\n@@ -53,9 +53,9 @@\n         header: {\r\n             primary: 'red',\r\n         },\r\n     },\r\n-});\r\n+})\r\n \r\n const initUser = {\r\n     id: 0,\r\n     firstName: '',\r\n@@ -66,11 +66,11 @@\n     isEdited: true,\r\n }\r\n \r\n function validateTextInput(name: String, props: GridPreProcessEditCellProps) {\r\n-    console.log('props', props);\r\n+    console.log('props', props)\r\n \r\n-    const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n+    const regex = /^(([^<>()[\\]\\\\.,:\\s@\"]+(\\.[^<>()[\\]\\\\.,:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n \r\n     const nameRegex = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/\r\n     // console.log(nameRegex.test(String(props.otherFieldsProps.firstName)),\r\n     //             nameRegex.test(String(props.otherFieldsProps.lastName)),            \r\n@@ -93,9 +93,9 @@\n             // console.log('lastName',\r\n             //     nameRegex.test(String(props.otherFieldsProps.firstName.value)),\r\n             //     nameRegex.test(String(props.props.value)),\r\n             //     regex.test(String(props.otherFieldsProps.email.value).toLowerCase())\r\n-            // );\r\n+            // )\r\n \r\n             return (\r\n                 nameRegex.test(String(props.otherFieldsProps.firstName.value)) &&\r\n                 nameRegex.test(String(props.props.value)) &&\r\n@@ -105,17 +105,17 @@\n             // console.log('email',\r\n             //     nameRegex.test(String(props.otherFieldsProps.firstName.value)),\r\n             //     nameRegex.test(String(props.otherFieldsProps.lastName.value)),\r\n             //     regex.test(String(props.props.value).toLowerCase())\r\n-            // );\r\n+            // )\r\n \r\n             return (\r\n                 nameRegex.test(String(props.otherFieldsProps.firstName.value)) &&\r\n                 nameRegex.test(String(props.otherFieldsProps.lastName.value)) &&\r\n                 regex.test(String(props.props.value).toLowerCase())\r\n             )\r\n         default:\r\n-            break;\r\n+            break\r\n     }\r\n }\r\n \r\n export default function userPage() {\r\n@@ -142,9 +142,9 @@\n     // console.log('path', router.pathname)\r\n     // const [rowID, setRowID] = useState<GridRowModel[]>(users)\r\n     // const [isEdit, setIsEdit] = useState(false)\r\n     // const isInEditMode = isEdit\r\n-    // console.log('isInEditMode', isInEditMode);\r\n+    // console.log('isInEditMode', isInEditMode)\r\n     // const [usersClone, setUsersClone] = useState(_.clone(users))\r\n \r\n     // console.log('clone', users)\r\n \r\n@@ -152,102 +152,102 @@\n \r\n \r\n \r\n     // const handleEditRowsStop = (params) => () => {\r\n-    //     console.log('stop edit');\r\n+    //     console.log('stop edit')\r\n \r\n-    //     usersClone[params.id].isEdit = false;\r\n+    //     usersClone[params.id].isEdit = false\r\n     // }\r\n     // const [editRow, setEditRow] = useState([])\r\n     // const handleEditRowsStart = (params) => () => {\r\n-    //     // setIsEdit(true);\r\n+    //     // setIsEdit(true)\r\n \r\n     //     // setEditRow(prevState => [...prevState, params])\r\n-    //     console.log('start edit');\r\n+    //     console.log('start edit')\r\n \r\n     //     params.row.isEdit = true\r\n-    //     // console.log('params', params);\r\n+    //     // console.log('params', params)\r\n     //     // setUsersClone()\r\n     //     // usersClone[params.id].isEdit = true\r\n     //     // usersClone.map(e => {\r\n     //     //     e.id === params.id? params : e\r\n     //     // })\r\n-    //     // usersClone[params.id] = _.cloneDeep(params);\r\n-    //     usersClone[params.id].isEdit = true;\r\n+    //     // usersClone[params.id] = _.cloneDeep(params)\r\n+    //     usersClone[params.id].isEdit = true\r\n     // }\r\n \r\n     // // const handleEditClick = (id) => () => {\r\n-    // //     console.log('edit ID:', id);\r\n+    // //     console.log('edit ID:', id)\r\n     // //     // params.isEditable = true\r\n     // //     // // setRowID(id)\r\n     // //     // // getValue\r\n     // //     const tmp = _.cloneDeep(users)\r\n     // //     tmp[id].mode = GridRowModes.Edit\r\n-    // //     console.log('tmp', tmp);\r\n+    // //     console.log('tmp', tmp)\r\n \r\n-    // //     setUsers(_.cloneDeep(tmp));\r\n-    // //     setRowID({ ...users, [id]: { mode: GridRowModes.Edit } });\r\n-    // //     console.log(users);\r\n+    // //     setUsers(_.cloneDeep(tmp))\r\n+    // //     setRowID({ ...users, [id]: { mode: GridRowModes.Edit } })\r\n+    // //     console.log(users)\r\n \r\n-    // // };\r\n+    // // }\r\n \r\n     // const handleSaveClick = () => {\r\n-    //     // setRowID({ ...users, [id]: { mode: GridRowModes.View } });\r\n-    //     // console.log('params', params);\r\n-    //     // const tmp = _.cloneDeep(usersClone);\r\n+    //     // setRowID({ ...users, [id]: { mode: GridRowModes.View } })\r\n+    //     // console.log('params', params)\r\n+    //     // const tmp = _.cloneDeep(usersClone)\r\n     //     // setUsers(usersClone.map((cloneRow) => users.map(row => {\r\n-    //     //     return cloneRow.id === row.id? _.cloneDeep(cloneRow) : [_.cloneDeep(cloneRow), ...users] })));\r\n+    //     //     return cloneRow.id === row.id? _.cloneDeep(cloneRow) : [_.cloneDeep(cloneRow), ...users] })))\r\n     //     const tmp = _.cloneDeep(usersClone)\r\n     //     setUsers(_.cloneDeep(tmp))\r\n-    // };\r\n+    // }\r\n \r\n     // const handleDeleteClick = (params) => () => {\r\n-    //     console.log('params', params);\r\n+    //     console.log('params', params)\r\n \r\n     //     setUsersClone(usersClone.filter((row) => row.id !== params.id))\r\n     //     // setUsers(users.filter((row) => row.id !== params.id))\r\n-    // };\r\n+    // }\r\n \r\n     // const handleCancelClick = () => {\r\n \r\n     //     setUsersClone(_.cloneDeep(users))\r\n \r\n-    //     // setIsEdit(false);\r\n-    //     // setUsersClone(users.map((row) => (row.id === id ? row)));\r\n+    //     // setIsEdit(false)\r\n+    //     // setUsersClone(users.map((row) => (row.id === id ? row)))\r\n     //     // return users\r\n \r\n     //     // const rowId = params.row.id\r\n     //     // params.row.isEdit = false\r\n-    //     // console.log('params', params);\r\n+    //     // console.log('params', params)\r\n \r\n     //     // // const oldRow = users.find(\r\n     //     // //     (e) => e.id === rowId\r\n-    //     // // );\r\n+    //     // // )\r\n \r\n-    //     // usersClone[params.id].isEdit = false;\r\n-    //     // console.log(\"oldRow\", usersClone[rowId]);\r\n-    //     // usersClone[rowId] = _.cloneDeep(oldRow);\r\n+    //     // usersClone[params.id].isEdit = false\r\n+    //     // console.log(\"oldRow\", usersClone[rowId])\r\n+    //     // usersClone[rowId] = _.cloneDeep(oldRow)\r\n \r\n-    //     // console.log('<><><>', usersClone);\r\n+    //     // console.log('<><><>', usersClone)\r\n \r\n     // }\r\n-    // //     const editedRow = usersClone.find((row) => row.id === id);\r\n+    // //     const editedRow = usersClone.find((row) => row.id === id)\r\n     // //     if (editedRow!.isNew) {\r\n-    // //         setUsers(usersClone.filter((row) => row.id !== id));\r\n+    // //         setUsers(usersClone.filter((row) => row.id !== id))\r\n     // //     }\r\n-    // // };\r\n+    // // }\r\n \r\n     // const handleOpenDialog = () => {\r\n     //     setOpenDialog(true)\r\n     // }\r\n \r\n     // const handleCloseDialog = () => {\r\n     //     setOpenDialog(false)\r\n-    //     console.log('openDialog', openDialog);\r\n+    //     console.log('openDialog', openDialog)\r\n     //     setSelectedId(_.pull(prevState,))\r\n     // }\r\n     // const handleCommit = (e: GridCellEditCommitParams) => {\r\n-    //     console.log('here');\r\n+    //     console.log('here')\r\n \r\n     //     const array = users.map(r => {\r\n     //         if (r.id === e.id) {\r\n     //             return {...r, [e.field]: e.value}\r\n@@ -255,176 +255,176 @@\n     //             return {...r}\r\n     //         }\r\n     //     })\r\n     //     setRowID(_.cloneDeep(array))\r\n-    //     console.log('array', array[e.id]);\r\n+    //     console.log('array', array[e.id])\r\n \r\n     // }\r\n     // const fetchUsers = async () => {\r\n     //     const response = await fetch('/api/User')\r\n     //     const data = await response.json()\r\n     //     setUsers(data)\r\n-    //     // console.clear();\r\n-    //     // console.log(\"data\", data);\r\n+    //     // console.clear()\r\n+    //     // console.log(\"data\", data)\r\n \r\n     // }\r\n \r\n     // useEffect(() => {\r\n     //     async function fetchData() {\r\n     //       const res = await fetch('/api/User')\r\n     //       const result: userList[] = await res.json()\r\n-    //     //   console.log(\"data\", result);\r\n+    //     //   console.log(\"data\", result)\r\n     //       setUsers(result)\r\n     //     }\r\n     //     fetchData()\r\n     //   }, [])\r\n \r\n     const handleRowEditStart = (params: GridRowParams, event: MuiEvent<React.SyntheticEvent>) => {\r\n-        event.defaultMuiPrevented = true;\r\n+        event.defaultMuiPrevented = true\r\n         // isInValid = true\r\n-    };\r\n+    }\r\n \r\n     const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\r\n-        event.defaultMuiPrevented = true;\r\n-    };\r\n+        event.defaultMuiPrevented = true\r\n+    }\r\n \r\n-    const [editRowsModel, setEditRowsModel] = useState({});\r\n+    const [editRowsModel, setEditRowsModel] = useState({})\r\n \r\n     // const handleEditRowsModelChange = useCallback((model: GridEditRowsModel) => {\r\n-    //     const updatedModel = { ...model };\r\n+    //     const updatedModel = { ...model }\r\n     //     Object.keys(updatedModel).forEach((id) => {\r\n     //         if (updatedModel[id].email) {\r\n-    //             const isValid = validateEmail(updatedModel[id].email.value);\r\n+    //             const isValid = validateEmail(updatedModel[id].email.value)\r\n \r\n-    //             console.log('>>>isValid', isValid);\r\n+    //             console.log('>>>isValid', isValid)\r\n \r\n-    //             updatedModel[id].email = { ...updatedModel[id].email, error: !isValid };\r\n+    //             updatedModel[id].email = { ...updatedModel[id].email, error: !isValid }\r\n     //         }\r\n-    //     });\r\n-    //     setEditRowsModel(model);\r\n+    //     })\r\n+    //     setEditRowsModel(model)\r\n     // }, [])\r\n \r\n-    const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n+    const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({})\r\n     const [isDisableBtn, setIsDisableBtn] = useState(true)\r\n \r\n     const handleAddRow = () => {\r\n         const newId = Date.now()\r\n         initUser.id = _.cloneDeep(newId)\r\n-        setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone]);\r\n+        setUsers((prevUsersClone) => [_.cloneDeep(initUser), ...prevUsersClone])\r\n         setRowModesModel((oldModel) => ({\r\n             ...oldModel,\r\n             [newId]: { mode: GridRowModes.Edit, fieldToFocus: 'firstName' },\r\n-        }));\r\n+        }))\r\n     }\r\n \r\n     const handleEditClick = (id: GridRowId) => () => {\r\n-        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n+        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } })\r\n         setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n-    };\r\n+    }\r\n \r\n     const handleSaveClick = (params: GridRowParams) => () => {\r\n         const id = params.id\r\n-        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n+        setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } })\r\n         // const tmpState = _.cloneDeep(users)\r\n-        console.log('rowId', id, '\\nparams', params, '\\nrowModel', rowModesModel);\r\n+        console.log('rowId', id, '\\nparams', params, '\\nrowModel', rowModesModel)\r\n \r\n         // isInValid = params.row.map(e => {\r\n         //     return e === ''\r\n         // })\r\n         // tmpState[0].isNew = false\r\n         // setUsers(_.cloneDeep(tmpState))\r\n         isInValid ? setIsDisableBtn(true) : setIsDisableBtn(false)\r\n         setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isNew: false } : e))\r\n-    };\r\n+    }\r\n \r\n     const handleDeleteClick = (id: GridRowId) => () => {\r\n-        setOpenDialog(true);\r\n-        // setUsers(users.filter((row) => row.id !== id));\r\n+        setOpenDialog(true)\r\n+        // setUsers(users.filter((row) => row.id !== id))\r\n         setSelectedId(prevState => [...prevState, id])\r\n-    };\r\n+    }\r\n \r\n     const handleConfirmDelete = () => {\r\n-        setUsers(users.filter((row) => row.id !== selectedId[0]));\r\n+        setUsers(users.filter((row) => row.id !== selectedId[0]))\r\n         handleCloseDialog()\r\n-    };\r\n+    }\r\n \r\n     const handleCloseDialog = () => {\r\n         setOpenDialog(false)\r\n-        // console.log('openDialog', openDialog);\r\n+        // console.log('openDialog', openDialog)\r\n         setSelectedId([])\r\n     }\r\n \r\n     const handleCancelClick = (id: GridRowId) => () => {\r\n-        // console.log('users', users);\r\n+        // console.log('users', users)\r\n \r\n         setRowModesModel({\r\n             ...rowModesModel,\r\n             [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n-        });\r\n+        })\r\n \r\n-        const editedRow = users.find((row) => row.id === id);\r\n+        const editedRow = users.find((row) => row.id === id)\r\n         setIsDisableBtn(true)\r\n         if (editedRow?.isNew) {\r\n-            setUsers(users.filter((row) => row.id !== id));\r\n+            setUsers(users.filter((row) => row.id !== id))\r\n         }\r\n         else {\r\n             setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n         }\r\n-    };\r\n+    }\r\n \r\n     const processRowUpdate = (newRow) => {\r\n-        const updatedRow = { ...newRow };\r\n-        // console.log('updateRow', updatedRow);\r\n-        setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n+        const updatedRow = { ...newRow }\r\n+        // console.log('updateRow', updatedRow)\r\n+        setUsers(users.map((row) => (row.id === newRow.id ? updatedRow : row)))\r\n \r\n-        return updatedRow;\r\n-    };\r\n+        return updatedRow\r\n+    }\r\n \r\n     const getCellTheme = (params) => {\r\n-        console.log('>>>theme', params.row.cellTheme);\r\n+        console.log('>>>theme', params.row.cellTheme)\r\n         \r\n         return params.row.celTheme\r\n     }\r\n \r\n     // const handleDeleteClickTest = (e) => {\r\n-    //     console.log('e', e);\r\n+    //     console.log('e', e)\r\n     // }\r\n \r\n     const cols: GridColumns = [\r\n         { field: 'id', headerName: 'User ID', flex: 1, },\r\n         {\r\n             field: 'firstName', headerName: 'First name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n-                isInValid = !validateTextInput('firstName', params);\r\n-                // console.log('isInValid', isInValid);        //<<<<<<<<<<<<<<<<<<<345\r\n+                isInValid = !validateTextInput('firstName', params)\r\n+                // console.log('isInValid', isInValid)        //<<<<<<<<<<<<<<<<<<<345\r\n                 const id = params.id\r\n                 isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n                     : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n-                return { ...params.props, error: isInValid };\r\n+                return { ...params.props, error: isInValid }\r\n             },\r\n         },\r\n         {\r\n             field: 'lastName', headerName: 'Last name', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n-                isInValid = !validateTextInput('lastName', params);\r\n-                // console.log('isInValid', isInValid);                //<<<<<<<<<<<<<<<<<<<353\r\n+                isInValid = !validateTextInput('lastName', params)\r\n+                // console.log('isInValid', isInValid)                //<<<<<<<<<<<<<<<<<<<353\r\n                 const id = params.id\r\n                 isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n                     : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n-                return { ...params.props, error: isInValid };\r\n+                return { ...params.props, error: isInValid }\r\n             }\r\n         },\r\n         {\r\n             field: 'email', headerName: 'Email', flex: 1, editable: true,\r\n             preProcessEditCellProps(params: GridPreProcessEditCellProps) {\r\n-                // const isValid = params.props.value.length > 0;\r\n-                isInValid = !validateTextInput('email', params);\r\n-                // console.log('isInValid', isInValid);                    //<<<<<<<<<<<<<<<<<<<362\r\n+                // const isValid = params.props.value.length > 0\r\n+                isInValid = !validateTextInput('email', params)\r\n+                // console.log('isInValid', isInValid)                    //<<<<<<<<<<<<<<<<<<<362\r\n                 const id = params.id\r\n                 isInValid ? setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: true } : e))\r\n                     : setUsers(prevState => prevState.map(e => e.id === id ? { ...e, isEdited: false } : e))\r\n \r\n-                return { ...params.props, error: isInValid };\r\n+                return { ...params.props, error: isInValid }\r\n             }\r\n         },\r\n         {\r\n             field: 'actions',\r\n@@ -441,11 +441,11 @@\n                 //                 <CancelIcon fontSize=\"inherit\" />\r\n                 //             </IconButton>\r\n                 //         </Stack>\r\n                 // const id = params.id\r\n-                // console.log('params', params.row.id, params.row.isEdit);\r\n+                // console.log('params', params.row.id, params.row.isEdit)\r\n                 const id = params.id\r\n-                const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n+                const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit\r\n                 if (isInEditMode) {\r\n                     return [\r\n                         <Tooltip title=\"Save\">\r\n                             <Typography>\r\n"
                },
                {
                    "date": 1659500411944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -591,12 +591,8 @@\n                     // getCellClassName={params => {\r\n                     //     return params.value !== \"\"? \"validInputs\" : \"inValidInputs\"\r\n                     // }}\r\n                 />\r\n-                <div style={{ width: '600px' }}>\r\n-                    {/* usersClone: {usersClone.map(e => <div key={e.id}>{JSON.stringify(e)}</div>)} <br></br> */}\r\n-                    users: {JSON.stringify(users)}\r\n-                </div>\r\n             </Box>\r\n             <Dialog\r\n                 open={openDialog}\r\n             // onClose={handleCloseDialog}\r\n"
                },
                {
                    "date": 1659506909230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -613,9 +613,9 @@\n                         variant=\"outlined\"\r\n                         color=\"error\"\r\n                         onClick={handleCloseDialog}\r\n                     >\r\n-                        Cancel\r\n+                        No\r\n                     </Button>\r\n                 </DialogActions>\r\n             </Dialog>\r\n         </>\r\n"
                },
                {
                    "date": 1659507592566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,35 @@\n import _ from 'lodash'\r\n-import { useCallback, useEffect, useMemo, useState } from 'react'\r\n-import { DataGrid, GridActionsCellItem, GridCellEditCommitParams, GridCellParams, GridColDef, GridColumns, GridEditRowsModel, GridEventListener, GridPreProcessEditCellProps, GridRowId, GridRowModel, GridRowModes, GridRowModesModel, GridRowParams, GridRowsProp, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarExport, GridValueGetterParams, MuiEvent } from '@mui/x-data-grid'\r\n-import { Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Stack, ThemeProvider, Tooltip } from '@mui/material'\r\n+import { useState } from 'react'\r\n+import {DataGrid,\r\n+        GridActionsCellItem,\r\n+        GridColumns,\r\n+        GridEventListener, \r\n+        GridPreProcessEditCellProps, \r\n+        GridRowId,  \r\n+        GridRowModes, \r\n+        GridRowModesModel, \r\n+        GridRowParams,  \r\n+        GridToolbarContainer, \r\n+        MuiEvent } from '@mui/x-data-grid'\r\n+import {Box, \r\n+        Dialog, \r\n+        DialogActions, \r\n+        DialogContent, \r\n+        DialogContentText, \r\n+        DialogTitle, \r\n+        Stack, \r\n+        Tooltip } from '@mui/material'\r\n import Button from '@mui/material/Button'\r\n import AddIcon from '@mui/icons-material/Add'\r\n import EditIcon from '@mui/icons-material/Edit'\r\n import DeleteIcon from '@mui/icons-material/DeleteOutlined'\r\n import SaveIcon from '@mui/icons-material/Save'\r\n import CancelIcon from '@mui/icons-material/Close'\r\n-\r\n import { useAppContext } from '../../context/AppContext'\r\n import { useRouter } from 'next/router'\r\n-import { makeStyles } from '@material-ui/styles'\r\n import { createTheme } from '@mui/system'\r\n import Typography from '@mui/material/Typography'\r\n-import clsx from 'clsx'\r\n-import { truncate } from 'fs/promises'\r\n \r\n \r\n // const useStyles = makeStyles({\r\n //     headerCell: {\r\n"
                }
            ],
            "date": 1657786110331,
            "name": "Commit-0",
            "content": "\r\n"
        }
    ]
}